{"file_contents":{"README.md":{"content":"# React\n\nA modern React-based project utilizing the latest frontend technologies and tools for building responsive web applications.\n\n## üöÄ Features\n\n- **React 18** - React version with improved rendering and concurrent features\n- **Vite** - Lightning-fast build tool and development server\n- **Redux Toolkit** - State management with simplified Redux setup\n- **TailwindCSS** - Utility-first CSS framework with extensive customization\n- **React Router v6** - Declarative routing for React applications\n- **Data Visualization** - Integrated D3.js and Recharts for powerful data visualization\n- **Form Management** - React Hook Form for efficient form handling\n- **Animation** - Framer Motion for smooth UI animations\n- **Testing** - Jest and React Testing Library setup\n\n## üìã Prerequisites\n\n- Node.js (v14.x or higher)\n- npm or yarn\n\n## üõ†Ô∏è Installation\n\n1. Install dependencies:\n   ```bash\n   npm install\n   # or\n   yarn install\n   ```\n   \n2. Start the development server:\n   ```bash\n   npm start\n   # or\n   yarn start\n   ```\n\n## üìÅ Project Structure\n\n```\nreact_app/\n‚îú‚îÄ‚îÄ public/             # Static assets\n‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îú‚îÄ‚îÄ components/     # Reusable UI components\n‚îÇ   ‚îú‚îÄ‚îÄ pages/          # Page components\n‚îÇ   ‚îú‚îÄ‚îÄ styles/         # Global styles and Tailwind configuration\n‚îÇ   ‚îú‚îÄ‚îÄ App.jsx         # Main application component\n‚îÇ   ‚îú‚îÄ‚îÄ Routes.jsx      # Application routes\n‚îÇ   ‚îî‚îÄ‚îÄ index.jsx       # Application entry point\n‚îú‚îÄ‚îÄ .env                # Environment variables\n‚îú‚îÄ‚îÄ index.html          # HTML template\n‚îú‚îÄ‚îÄ package.json        # Project dependencies and scripts\n‚îú‚îÄ‚îÄ tailwind.config.js  # Tailwind CSS configuration\n‚îî‚îÄ‚îÄ vite.config.js      # Vite configuration\n```\n\n## üß© Adding Routes\n\nTo add new routes to the application, update the `Routes.jsx` file:\n\n```jsx\nimport { useRoutes } from \"react-router-dom\";\nimport HomePage from \"pages/HomePage\";\nimport AboutPage from \"pages/AboutPage\";\n\nconst ProjectRoutes = () => {\n  let element = useRoutes([\n    { path: \"/\", element: <HomePage /> },\n    { path: \"/about\", element: <AboutPage /> },\n    // Add more routes as needed\n  ]);\n\n  return element;\n};\n```\n\n## üé® Styling\n\nThis project uses Tailwind CSS for styling. The configuration includes:\n\n- Forms plugin for form styling\n- Typography plugin for text styling\n- Aspect ratio plugin for responsive elements\n- Container queries for component-specific responsive design\n- Fluid typography for responsive text\n- Animation utilities\n\n## üì± Responsive Design\n\nThe app is built with responsive design using Tailwind CSS breakpoints.\n\n\n## üì¶ Deployment\n\nBuild the application for production:\n\n```bash\nnpm run build\n```\n\n## üôè Acknowledgments\n\n- Built with [Rocket.new](https://rocket.new)\n- Powered by React and Vite\n- Styled with Tailwind CSS\n\nBuilt with ‚ù§Ô∏è on Rocket.new\n","size_bytes":2887},"postcss.config.js":{"content":"module.exports = {\n  plugins: {\n    \"tailwindcss/nesting\": {},\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n","size_bytes":114},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    \"./index.html\",\n    \"./src/**/*.{js,ts,jsx,tsx}\",\n  ],\n  darkMode: 'class',\n  theme: {\n    extend: {\n      colors: {\n        border: 'var(--color-border)', // slate-200\n        input: 'var(--color-input)', // white\n        ring: 'var(--color-ring)', // blue-600\n        background: 'var(--color-background)', // gray-50\n        foreground: 'var(--color-foreground)', // slate-800\n        primary: {\n          DEFAULT: 'var(--color-primary)', // blue-600\n          foreground: 'var(--color-primary-foreground)', // white\n        },\n        secondary: {\n          DEFAULT: 'var(--color-secondary)', // slate-500\n          foreground: 'var(--color-secondary-foreground)', // white\n        },\n        destructive: {\n          DEFAULT: 'var(--color-destructive)', // red-500\n          foreground: 'var(--color-destructive-foreground)', // white\n        },\n        muted: {\n          DEFAULT: 'var(--color-muted)', // slate-100\n          foreground: 'var(--color-muted-foreground)', // slate-500\n        },\n        accent: {\n          DEFAULT: 'var(--color-accent)', // emerald-600\n          foreground: 'var(--color-accent-foreground)', // white\n        },\n        popover: {\n          DEFAULT: 'var(--color-popover)', // white\n          foreground: 'var(--color-popover-foreground)', // slate-800\n        },\n        card: {\n          DEFAULT: 'var(--color-card)', // white\n          foreground: 'var(--color-card-foreground)', // slate-800\n        },\n        success: {\n          DEFAULT: 'var(--color-success)', // emerald-500\n          foreground: 'var(--color-success-foreground)', // white\n        },\n        warning: {\n          DEFAULT: 'var(--color-warning)', // amber-500\n          foreground: 'var(--color-warning-foreground)', // slate-800\n        },\n        error: {\n          DEFAULT: 'var(--color-error)', // red-500\n          foreground: 'var(--color-error-foreground)', // white\n        },\n      },\n      fontFamily: {\n        sans: ['Inter', 'system-ui', 'sans-serif'],\n        mono: ['JetBrains Mono', 'Consolas', 'monospace'],\n      },\n      fontSize: {\n        'xs': ['0.75rem', { lineHeight: '1rem' }], // 12px\n        'sm': ['0.875rem', { lineHeight: '1.25rem' }], // 14px\n        'base': ['1rem', { lineHeight: '1.5rem' }], // 16px\n        'lg': ['1.125rem', { lineHeight: '1.75rem' }], // 18px\n        'xl': ['1.25rem', { lineHeight: '1.75rem' }], // 20px\n        '2xl': ['1.5rem', { lineHeight: '2rem' }], // 24px\n        '3xl': ['1.875rem', { lineHeight: '2.25rem' }], // 30px\n        '4xl': ['2.25rem', { lineHeight: '2.5rem' }], // 36px\n        '5xl': ['3rem', { lineHeight: '1' }], // 48px\n      },\n      spacing: {\n        '18': '4.5rem', // 72px\n        '88': '22rem', // 352px\n        '128': '32rem', // 512px\n      },\n      borderRadius: {\n        'lg': 'var(--radius-lg)', // 12px\n        'md': 'var(--radius-md)', // 8px\n        'sm': 'var(--radius-sm)', // 4px\n      },\n      boxShadow: {\n        'sm': 'var(--shadow-sm)',\n        'DEFAULT': 'var(--shadow-md)',\n        'md': 'var(--shadow-md)',\n        'lg': 'var(--shadow-lg)',\n        'xl': 'var(--shadow-xl)',\n        'inner': 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)',\n        'none': 'none',\n      },\n      animation: {\n        'fade-in': 'fadeIn 300ms ease-out',\n        'slide-up': 'slideUp 300ms ease-out',\n        'pulse-availability': 'pulse-availability 1.5s ease-in-out infinite',\n        'spin-slow': 'spin 3s linear infinite',\n      },\n      transitionTimingFunction: {\n        'micro': 'cubic-bezier(0.4, 0, 0.2, 1)',\n      },\n      transitionDuration: {\n        '200': '200ms',\n        '250': '250ms',\n      },\n      zIndex: {\n        '60': '60',\n        '70': '70',\n        '80': '80',\n        '90': '90',\n        '100': '100',\n      },\n      screens: {\n        'xs': '375px',\n        'sm': '640px',\n        'md': '768px',\n        'lg': '1024px',\n        'xl': '1280px',\n        '2xl': '1536px',\n        '3xl': '1680px',\n      },\n      gridTemplateColumns: {\n        'auto-fit': 'repeat(auto-fit, minmax(280px, 1fr))',\n        'auto-fill': 'repeat(auto-fill, minmax(280px, 1fr))',\n      },\n      backdropBlur: {\n        'xs': '2px',\n      },\n    },\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n    require('tailwindcss-animate'),\n  ],\n}","size_bytes":4319},"src/App.jsx":{"content":"import React from \"react\";\nimport Routes from \"./Routes\";\nimport { ThemeProvider } from \"./contexts/ThemeContext\";\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <Routes />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","size_bytes":230},"src/Routes.jsx":{"content":"import React from \"react\";\nimport { BrowserRouter, Routes as RouterRoutes, Route } from \"react-router-dom\";\nimport ScrollToTop from \"components/ScrollToTop\";\nimport ErrorBoundary from \"components/ErrorBoundary\";\nimport NotFound from \"pages/NotFound\";\nimport SlotSelectionBooking from './pages/slot-selection-booking';\nimport LocationSearchMap from './pages/location-search-map';\nimport MyBookingsDashboard from './pages/my-bookings-dashboard';\nimport BookingConfirmationPayment from './pages/booking-confirmation-payment';\nimport UserAuthentication from './pages/user-authentication';\nimport FacilityDetailsFloorSelection from './pages/facility-details-floor-selection';\nimport Profile from './pages/profile';\nimport Home from './pages/home';\n\nconst Routes = () => {\n  return (\n    <BrowserRouter>\n      <ErrorBoundary>\n      <ScrollToTop />\n      <RouterRoutes>\n        {/* Define your route here */}\n        <Route path=\"/\" element={<UserAuthentication />} />\n        <Route path=\"/home\" element={<Home />} />\n        <Route path=\"/slot-selection-booking\" element={<SlotSelectionBooking />} />\n        <Route path=\"/location-search-map\" element={<LocationSearchMap />} />\n        <Route path=\"/my-bookings-dashboard\" element={<MyBookingsDashboard />} />\n        <Route path=\"/booking-confirmation-payment\" element={<BookingConfirmationPayment />} />\n        <Route path=\"/user-authentication\" element={<UserAuthentication />} />\n        <Route path=\"/profile\" element={<Profile />} />\n        <Route path=\"/facility-details-floor-selection\" element={<FacilityDetailsFloorSelection />} />\n        <Route path=\"*\" element={<NotFound />} />\n      </RouterRoutes>\n      </ErrorBoundary>\n    </BrowserRouter>\n  );\n};\n\nexport default Routes;","size_bytes":1737},"src/index.jsx":{"content":"import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport { SidebarProvider } from \"./components/ui/SidebarContext\";\nimport \"./styles/tailwind.css\";\nimport \"./styles/index.css\";\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\n\nroot.render(\n  <SidebarProvider>\n    <App />\n  </SidebarProvider>\n);\n","size_bytes":384},"src/components/AppIcon.jsx":{"content":"import React from 'react';\nimport * as LucideIcons from 'lucide-react';\nimport { HelpCircle } from 'lucide-react';\n\nfunction Icon({\n    name,\n    size = 24,\n    color = \"currentColor\",\n    className = \"\",\n    strokeWidth = 2,\n    ...props\n}) {\n    const IconComponent = LucideIcons?.[name];\n\n    if (!IconComponent) {\n        return <HelpCircle size={size} color=\"gray\" strokeWidth={strokeWidth} className={className} {...props} />;\n    }\n\n    return <IconComponent\n        size={size}\n        color={color}\n        strokeWidth={strokeWidth}\n        className={className}\n        {...props}\n    />;\n}\nexport default Icon;","size_bytes":621},"src/components/AppImage.jsx":{"content":"import React from 'react';\n\nfunction Image({\n  src,\n  alt = \"Image Name\",\n  className = \"\",\n  ...props\n}) {\n\n  return (\n    <img\n      src={src}\n      alt={alt}\n      className={className}\n      onError={(e) => {\n        e.target.src = \"/assets/images/no_image.png\"\n      }}\n      {...props}\n    />\n  );\n}\n\nexport default Image;\n","size_bytes":329},"src/components/ErrorBoundary.jsx":{"content":"import React from \"react\";\nimport Icon from \"./AppIcon\";\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    error.__ErrorBoundary = true;\n    window.__COMPONENT_ERROR__?.(error, errorInfo);\n    // console.log(\"Error caught by ErrorBoundary:\", error, errorInfo);\n  }\n\n  render() {\n    if (this.state?.hasError) {\n      return (\n        <div className=\"min-h-screen flex items-center justify-center bg-neutral-50\">\n          <div className=\"text-center p-8 max-w-md\">\n            <div className=\"flex justify-center items-center mb-2\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"42px\" height=\"42px\" viewBox=\"0 0 32 33\" fill=\"none\">\n                <path d=\"M16 28.5C22.6274 28.5 28 23.1274 28 16.5C28 9.87258 22.6274 4.5 16 4.5C9.37258 4.5 4 9.87258 4 16.5C4 23.1274 9.37258 28.5 16 28.5Z\" stroke=\"#343330\" strokeWidth=\"2\" strokeMiterlimit=\"10\" />\n                <path d=\"M11.5 15.5C12.3284 15.5 13 14.8284 13 14C13 13.1716 12.3284 12.5 11.5 12.5C10.6716 12.5 10 13.1716 10 14C10 14.8284 10.6716 15.5 11.5 15.5Z\" fill=\"#343330\" />\n                <path d=\"M20.5 15.5C21.3284 15.5 22 14.8284 22 14C22 13.1716 21.3284 12.5 20.5 12.5C19.6716 12.5 19 13.1716 19 14C19 14.8284 19.6716 15.5 20.5 15.5Z\" fill=\"#343330\" />\n                <path d=\"M21 22.5C19.9625 20.7062 18.2213 19.5 16 19.5C13.7787 19.5 12.0375 20.7062 11 22.5\" stroke=\"#343330\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n              </svg>\n            </div>\n            <div className=\"flex flex-col gap-1 text-center\">\n              <h1 className=\"text-2xl font-medium text-neutral-800\">Something went wrong</h1>\n              <p className=\"text-neutral-600 text-base w w-8/12 mx-auto\">We encountered an unexpected error while processing your request.</p>\n            </div>\n            <div className=\"flex justify-center items-center mt-6\">\n              <button\n                onClick={() => {\n                  window.location.href = \"/\";\n                }}\n                className=\"bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded flex items-center gap-2 transition-colors duration-200 shadow-sm\"\n              >\n                <Icon name=\"ArrowLeft\" size={18} color=\"#fff\" />\n                Back\n              </button>\n            </div>\n          </div >\n        </div >\n      );\n    }\n\n    return this.props?.children;\n  }\n}\n\nexport default ErrorBoundary;","size_bytes":2599},"src/components/ScrollToTop.jsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nconst ScrollToTop = () => {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n};\n\nexport default ScrollToTop;","size_bytes":263},"src/pages/NotFound.jsx":{"content":"import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Button from 'components/ui/Button';\nimport Icon from 'components/AppIcon';\n\nconst NotFound = () => {\n  const navigate = useNavigate();\n\n  const handleGoHome = () => {\n    navigate('/');\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center bg-background p-4\">\n      <div className=\"text-center max-w-md\">\n        <div className=\"flex justify-center mb-6\">\n          <div className=\"relative\">\n            <h1 className=\"text-9xl font-bold text-primary opacity-20\">404</h1>\n          </div>\n        </div>\n\n        <h2 className=\"text-2xl font-medium text-onBackground mb-2\">Page Not Found</h2>\n        <p className=\"text-onBackground/70 mb-8\">\n          The page you're looking for doesn't exist. Let's get you back!\n        </p>\n\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n          <Button\n            variant=\"primary\"\n            icon={<Icon name=\"ArrowLeft\" />}\n            iconPosition=\"left\"\n            onClick={() => window.history?.back()}\n          >\n            Go Back\n          </Button>\n\n          <Button\n            variant=\"outline\"\n            icon={<Icon name=\"Home\" />}\n            iconPosition=\"left\"\n            onClick={handleGoHome}\n          >\n            Back to Home\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","size_bytes":1438},"src/styles/index.css":{"content":"body {\n  margin: 0;\n  padding: 0;\n  font-family: Inter;\n}\n\n* {\n  box-sizing: border-box;\n  line-height: normal;\n  font-family: inherit;\n  margin: unset;\n}\n\n","size_bytes":156},"src/styles/tailwind.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Mobile dropdown fixes */\n@media (max-width: 640px) {\n  /* Ensure dropdowns appear above other content */\n  .relative {\n    z-index: auto;\n  }\n\n  /* Mobile dropdown container fixes */\n  .relative {\n    z-index: auto;\n  }\n\n  /* Ensure dropdowns show above other content */\n  .mobile-dropdown-container {\n    z-index: 50;\n  }\n\n  /* Smooth scrolling for dropdown lists */\n  .mobile-dropdown-container .overflow-y-auto {\n    scroll-behavior: smooth;\n    -webkit-overflow-scrolling: touch;\n  }\n\n  /* Mobile select dropdown improvements */\n  select, .select-dropdown {\n    font-size: 16px; /* Prevents zoom on iOS */\n    max-width: 100%;\n    width: 100%;\n    box-sizing: border-box;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n\n  /* Force mobile select containers to respect parent width */\n  select {\n    min-width: 0;\n    flex-shrink: 1;\n  }\n\n  /* Enhanced mobile select styling */\n  .mobile-select {\n    max-width: calc(100vw - 4rem);\n    width: 100%;\n    padding-right: 2.5rem !important;\n    box-sizing: border-box;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  /* Mobile select options */\n  .mobile-option {\n    max-width: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    padding: 0.5rem;\n  }\n\n  /* Scrollable select dropdown */\n  select[size=\"1\"] {\n    overflow-y: auto;\n    max-height: 200px;\n  }\n\n  /* Desktop select styling */\n  @media (min-width: 1024px) {\n    select {\n      max-height: 300px;\n      overflow-y: auto;\n    }\n\n    select option {\n      padding: 0.5rem;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n  }\n\n  /* Ensure grid containers don't overflow */\n  .grid {\n    min-width: 0;\n  }\n\n  .grid > * {\n    min-width: 0;\n  }\n\n  /* Mobile dropdown container fixes */\n  .relative select {\n    padding-right: 1.5rem; /* Space for chevron icon */\n  }\n\n  /* Ensure dropdown options don't overflow */\n  select option {\n    max-width: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  /* Mobile city list scrolling */\n  .city-list-container {\n    max-height: 60vh;\n    overflow-y: auto;\n    -webkit-overflow-scrolling: touch;\n  }\n\n  /* Smooth scrolling for mobile lists */\n  .mobile-scroll-list {\n    overflow-y: auto;\n    -webkit-overflow-scrolling: touch;\n    scroll-behavior: smooth;\n  }\n\n  /* Enhanced touch scrolling */\n  .touch-scroll {\n    overflow-y: auto;\n    -webkit-overflow-scrolling: touch;\n    overscroll-behavior-y: contain;\n    scroll-behavior: smooth;\n  }\n\n  /* Mobile specific scrolling improvements */\n  @media (max-width: 768px) {\n    .mobile-scroll-list {\n      overflow-y: auto;\n      -webkit-overflow-scrolling: touch;\n      overscroll-behavior: contain;\n      scroll-behavior: smooth;\n      transform: translateZ(0); /* Force hardware acceleration */\n      position: relative;\n      z-index: 1;\n      height: 100%;\n      max-height: 100%;\n    }\n\n    /* Fix iOS Safari scrolling issues */\n    .mobile-scroll-list::-webkit-scrollbar {\n      display: none;\n      width: 0;\n      background: transparent;\n    }\n\n    /* Ensure smooth momentum scrolling */\n    .mobile-scroll-list {\n      -webkit-transform: translateZ(0);\n      transform: translateZ(0);\n      -webkit-backface-visibility: hidden;\n      backface-visibility: hidden;\n      -webkit-perspective: 1000;\n      perspective: 1000;\n    }\n\n    /* Enhanced touch scrolling for location lists */\n    .touch-scroll {\n      overflow-y: auto;\n      -webkit-overflow-scrolling: touch;\n      overscroll-behavior-y: contain;\n      scroll-behavior: smooth;\n      transform: translate3d(0, 0, 0);\n      will-change: scroll-position;\n      height: 100%;\n      max-height: 100%;\n    }\n\n    /* Improve touch responsiveness */\n    .touch-scroll > div {\n      transform: translateZ(0);\n    }\n\n    /* Enhanced touch targets for mobile */\n    .touch-target {\n      min-height: 48px;\n      touch-action: manipulation;\n      user-select: none;\n      -webkit-user-select: none;\n      -webkit-tap-highlight-color: transparent;\n      -webkit-touch-callout: none;\n      cursor: pointer;\n    }\n\n    /* Better touch scrolling */\n    .touch-scroll {\n      -webkit-overflow-scrolling: touch;\n      overscroll-behavior: contain;\n      scroll-behavior: smooth;\n      transform: translateZ(0);\n    }\n  }\n\n  /* Mobile list container improvements */\n  .mobile-list-container {\n    height: 100%;\n    overflow: hidden;\n    display: flex;\n    flex-direction: column;\n  }\n\n  /* Ensure proper scrolling on mobile devices */\n  .mobile-scroll-container {\n    flex: 1;\n    overflow-y: auto;\n    -webkit-overflow-scrolling: touch;\n    transform: translate3d(0, 0, 0);\n    height: 100%;\n  }\n}\n\n/* Container width constraints for mobile */\n.mobile-dropdown-container {\n  max-width: 70px;\n  width: 100%;\n  overflow: hidden;\n  box-sizing: border-box;\n}\n\n/* Vehicle dropdown specific styles */\n.vehicle-dropdown-container,\n.vehicle-model-dropdown-container {\n  position: relative;\n  isolation: isolate;\n}\n\n.vehicle-dropdown-container {\n  z-index: 20;\n}\n\n.vehicle-model-dropdown-container {\n  z-index: 10;\n}\n\n/* Prevent layout shifts when dropdowns open */\n.vehicle-dropdown-container .absolute,\n.vehicle-model-dropdown-container .absolute {\n  position: absolute !important;\n  left: 0 !important;\n  right: 0 !important;\n  top: calc(100% + 4px) !important;\n  width: 100% !important;\n  max-height: 200px !important;\n  overflow-y: auto !important;\n  background-color: white !important;\n  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15) !important;\n  border-radius: 8px !important;\n  border: 1px solid #e5e7eb !important;\n  transform: translateZ(0) !important;\n  -webkit-transform: translateZ(0) !important;\n  will-change: transform !important;\n  backface-visibility: hidden !important;\n}\n\n/* Ensure dropdown appears above other content */\n.vehicle-dropdown-container button[type=\"button\"],\n.vehicle-model-dropdown-container button[type=\"button\"] {\n  position: relative;\n  z-index: 1;\n}\n\n/* 3D Transform styles for vehicle rotation */\n.vehicle-image-3d {\n  perspective: 1000px;\n  perspective-origin: center center;\n}\n\n.vehicle-image-3d img {\n  transform-style: preserve-3d;\n  backface-visibility: hidden;\n}\n\n/* Smooth rotation animation */\n@keyframes rotate360 {\n  from {\n    transform: rotateY(0deg);\n  }\n  to {\n    transform: rotateY(360deg);\n  }\n}\n\n.rotating-vehicle {\n  animation: rotate360 3s linear;\n}\n\n/* Enhanced mobile responsiveness */\n@media (max-width: 640px) {\n  .vehicle-dropdown-container,\n  .vehicle-model-dropdown-container {\n    margin-bottom: 0.5rem;\n  }\n\n  /* Better scrollbar styling for mobile */\n  .vehicle-dropdown-container .absolute::-webkit-scrollbar,\n  .vehicle-model-dropdown-container .absolute::-webkit-scrollbar {\n    width: 4px;\n  }\n\n  .vehicle-dropdown-container .absolute::-webkit-scrollbar-thumb,\n  .vehicle-model-dropdown-container .absolute::-webkit-scrollbar-thumb {\n    background-color: rgba(0, 0, 0, 0.2);\n    border-radius: 2px;\n  }\n\n  /* Ensure dropdowns stay properly positioned on mobile */\n  .vehicle-dropdown-container .absolute,\n  .vehicle-model-dropdown-container .absolute {\n    -webkit-overflow-scrolling: touch !important;\n  }\n}\n\n/* Tablet and desktop positioning */\n@media (min-width: 641px) {\n  .vehicle-dropdown-container .absolute,\n  .vehicle-model-dropdown-container .absolute {\n    position: absolute !important;\n    left: 0 !important;\n    right: 0 !important;\n    top: calc(100% + 4px) !important;\n    bottom: auto !important;\n    transform: translateZ(0) !important;\n    width: 100% !important;\n    max-height: 240px !important;\n    overflow-y: auto !important;\n    z-index: 10000 !important;\n    background-color: white !important;\n    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15) !important;\n    border-radius: 8px !important;\n    border: 1px solid #e5e7eb !important;\n  }\n}\n\n/* Specific mobile container constraints */\n.mobile-dropdown-container select {\n  max-width: 100%;\n  width: 100%;\n  font-size: 9px;\n  padding: 0.1rem 0.25rem;\n  padding-right: 0.7rem;\n  min-height: 20px;\n}\n\n/* Extra compact mobile select for very small screens */\n@media (max-width: 480px) {\n  .mobile-dropdown-container {\n    max-width: 60px;\n  }\n\n  .mobile-dropdown-container select {\n    font-size: 8px;\n    padding: 0.05rem 0.2rem;\n    padding-right: 0.6rem;\n    min-height: 18px;\n  }\n}\n\n/* Compact city selector for mobile */\n.mobile-select {\n  min-height: 32px;\n}\n\n/* Responsive city selector */\n@media (min-width: 640px) {\n  .mobile-dropdown-container {\n    max-width: 100%;\n  }\n\n  .mobile-dropdown-container select {\n    font-size: 14px;\n    padding: 0.75rem 1rem;\n    padding-right: 2.5rem;\n  }\n\n  .mobile-select {\n    min-height: 40px;\n  }\n}\n\n/* Mobile scroll improvements */\n.mobile-scroll-list {\n  -webkit-overflow-scrolling: touch;\n  overscroll-behavior: contain;\n  scroll-behavior: smooth;\n}\n\n.touch-scroll {\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  scroll-behavior: smooth;\n}\n\n/* Enhanced facility list visibility on mobile */\n.facility-card-mobile {\n  min-height: 120px;\n  backdrop-filter: blur(10px);\n}\n\n.facility-card-mobile:hover {\n  transform: translateY(-1px);\n}\n\n.facility-image {\n  border-radius: 8px;\n  overflow: hidden;\n}\n\n.facility-content {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n.facility-title {\n  font-weight: 600;\n  line-height: 1.3;\n}\n\n.facility-subtitle {\n  opacity: 0.8;\n  line-height: 1.4;\n}\n\n.facility-actions {\n  margin-top: auto;\n  padding-top: 8px;\n}\n\n/* Compact header for mobile to maximize list space */\n@media (max-width: 640px) {\n  /* Reduce header heights */\n  .mobile-header {\n    height: 56px !important;\n    min-height: 56px !important;\n  }\n\n  /* Compact search header */\n  .search-header-compact {\n    padding: 8px 16px !important;\n    min-height: 48px !important;\n  }\n\n  /* Compact filter section */\n  .filters-compact {\n    padding: 6px 16px !important;\n  }\n\n  /* Better mobile button spacing */\n  .facility-card-mobile {\n    padding: 12px;\n    margin-bottom: 8px;\n  }\n\n  .facility-image {\n    width: 64px;\n    height: 64px;\n  }\n\n  .facility-actions button {\n    font-size: 12px;\n    padding: 8px 12px;\n  }\n\n  /* Ensure maximum space for facilities list */\n  .facilities-list-container {\n    flex: 1;\n    overflow: hidden;\n    max-height: calc(100vh - 160px);\n  }\n}\n\n@layer base {\n  :root {\n    /* Core Colors */\n    --color-background: #FAFAFA; /* gray-50 */\n    --color-foreground: #1E293B; /* slate-800 */\n    --color-border: #E2E8F0; /* slate-200 */\n    --color-input: #FFFFFF; /* white */\n    --color-ring: #2563EB; /* blue-600 */\n\n    /* Card Colors */\n    --color-card: #FFFFFF; /* white */\n    --color-card-foreground: #1E293B; /* slate-800 */\n\n    /* Popover Colors */\n    --color-popover: #FFFFFF; /* white */\n    --color-popover-foreground: #1E293B; /* slate-800 */\n\n    /* Muted Colors */\n    --color-muted: #F1F5F9; /* slate-100 */\n    --color-muted-foreground: #64748B; /* slate-500 */\n\n    /* Primary Colors */\n    --color-primary: #2563EB; /* blue-600 */\n    --color-primary-foreground: #FFFFFF; /* white */\n\n    /* Secondary Colors */\n    --color-secondary: #64748B; /* slate-500 */\n    --color-secondary-foreground: #FFFFFF; /* white */\n\n    /* Destructive Colors */\n    --color-destructive: #EF4444; /* red-500 */\n    --color-destructive-foreground: #FFFFFF; /* white */\n\n    /* Accent Colors */\n    --color-accent: #059669; /* emerald-600 */\n    --color-accent-foreground: #FFFFFF; /* white */\n\n    /* Success Colors */\n    --color-success: #10B981; /* emerald-500 */\n    --color-success-foreground: #FFFFFF; /* white */\n\n    /* Warning Colors */\n    --color-warning: #F59E0B; /* amber-500 */\n    --color-warning-foreground: #1E293B; /* slate-800 */\n\n    /* Error Colors */\n    --color-error: #EF4444; /* red-500 */\n    --color-error-foreground: #FFFFFF; /* white */\n\n    /* Spacing */\n    --spacing-xs: 0.25rem; /* 4px */\n    --spacing-sm: 0.5rem; /* 8px */\n    --spacing-md: 1rem; /* 16px */\n    --spacing-lg: 1.5rem; /* 24px */\n    --spacing-xl: 2rem; /* 32px */\n\n    /* Border Radius */\n    --radius-sm: 0.25rem; /* 4px */\n    --radius-md: 0.5rem; /* 8px */\n    --radius-lg: 0.75rem; /* 12px */\n    --radius-xl: 1rem; /* 16px */\n\n    /* Shadows */\n    --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1);\n    --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.1);\n    --shadow-lg: 0 10px 25px rgba(0, 0, 0, 0.1);\n    --shadow-xl: 0 20px 40px rgba(0, 0, 0, 0.15);\n  }\n\n  /* Dark theme variables */\n  .dark {\n    /* Core Colors */\n    --color-background: #0F172A; /* slate-900 */\n    --color-foreground: #F1F5F9; /* slate-100 */\n    --color-border: #334155; /* slate-700 */\n    --color-input: #1E293B; /* slate-800 */\n    --color-ring: #3B82F6; /* blue-500 */\n\n    /* Card Colors */\n    --color-card: #1E293B; /* slate-800 */\n    --color-card-foreground: #F1F5F9; /* slate-100 */\n\n    /* Popover Colors */\n    --color-popover: #1E293B; /* slate-800 */\n    --color-popover-foreground: #F1F5F9; /* slate-100 */\n\n    /* Muted Colors */\n    --color-muted: #334155; /* slate-700 */\n    --color-muted-foreground: #94A3B8; /* slate-400 */\n\n    /* Primary Colors */\n    --color-primary: #3B82F6; /* blue-500 */\n    --color-primary-foreground: #FFFFFF; /* white */\n\n    /* Secondary Colors */\n    --color-secondary: #64748B; /* slate-500 */\n    --color-secondary-foreground: #FFFFFF; /* white */\n\n    /* Destructive Colors */\n    --color-destructive: #EF4444; /* red-500 */\n    --color-destructive-foreground: #FFFFFF; /* white */\n\n    /* Accent Colors */\n    --color-accent: #10B981; /* emerald-500 */\n    --color-accent-foreground: #FFFFFF; /* white */\n\n    /* Success Colors */\n    --color-success: #10B981; /* emerald-500 */\n    --color-success-foreground: #FFFFFF; /* white */\n\n    /* Warning Colors */\n    --color-warning: #F59E0B; /* amber-500 */\n    --color-warning-foreground: #1E293B; /* slate-800 */\n\n    /* Error Colors */\n    --color-error: #EF4444; /* red-500 */\n    --color-error-foreground: #FFFFFF; /* white */\n\n    /* Shadows for dark mode */\n    --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.3);\n    --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.3);\n    --shadow-lg: 0 10px 25px rgba(0, 0, 0, 0.4);\n    --shadow-xl: 0 20px 40px rgba(0, 0, 0, 0.5);\n  }\n\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n  }\n\n  /* Typography */\n  h1, h2, h3, h4, h5, h6 {\n    font-family: 'Inter', sans-serif;\n    font-weight: 600;\n    line-height: 1.2;\n  }\n\n  body, p, span, div {\n    font-family: 'Inter', sans-serif;\n    font-weight: 400;\n    line-height: 1.5;\n  }\n\n  .font-mono {\n    font-family: 'JetBrains Mono', monospace;\n  }\n\n  /* Custom animations */\n  @keyframes pulse-availability {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.6; }\n  }\n\n  .animate-pulse-availability {\n    animation: pulse-availability 1.5s ease-in-out infinite;\n  }\n\n  /* Micro-interactions */\n  .transition-micro {\n    transition: all var(--transition-fast);\n  }\n\n  .hover-lift:hover {\n    transform: translateY(-2px);\n    box-shadow: var(--shadow-lg);\n  }\n\n  /* Focus states */\n  .focus-ring:focus {\n    outline: 2px solid var(--color-ring);\n    outline-offset: 2px;\n  }\n\n  /* Scrollbar styling */\n  ::-webkit-scrollbar {\n    width: 6px;\n    height: 6px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: var(--color-muted);\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: var(--color-border);\n    border-radius: 3px;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: var(--color-secondary);\n  }\n}\n\n@layer components {\n  /* Navigation components */\n.nav-item  {\n    @apply flex items-center gap-3 px-3 py-2 rounded-lg transition-all ease-micro duration-200;\n    @apply hover:bg-muted;\n  }\n\n  .nav-item.active {\n    @apply bg-primary text-primary-foreground;\n  }\n\n  /* Status indicators */\n  .status-available {\n    @apply bg-success text-success-foreground;\n  }\n\n  .status-occupied {\n    @apply bg-destructive text-destructive-foreground;\n  }\n\n  .status-reserved {\n    @apply bg-warning text-warning-foreground;\n  }\n\n  /* Pricing displays */\n  .price-highlight {\n    @apply font-mono font-medium text-primary;\n  }\n\n  .price-savings {\n    @apply font-mono text-sm text-success;\n  }\n\n  /* Interactive elements */\n  .interactive-card  {\n    @apply bg-card border border-border rounded-lg p-4 transition-all ease-micro duration-200 cursor-pointer;\n  }\n\n  .floating-action  {\n    @apply fixed bottom-4 right-4 z-50 bg-primary text-primary-foreground rounded-full p-4 shadow-lg;\n    @apply hover:scale-105 transition-transform ease-micro duration-200;\n  }\n}\n\n@layer utilities {\n  /* Spacing utilities */\n  .space-section {\n    @apply space-y-4 sm:space-y-6;\n  }\n\n  .space-content {\n    @apply space-y-3 sm:space-y-4;\n  }\n\n  .space-compact {\n    @apply space-y-1.5 sm:space-y-2;\n  }\n\n  /* Layout utilities */\n  .container-app {\n    @apply max-w-7xl mx-auto px-3 sm:px-4 md:px-6 lg:px-8;\n  }\n\n  .grid-auto-fit {\n    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n  }\n\n  .grid-auto-fill {\n    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n  }\n\n  /* Mobile-first responsive utilities */\n  .mobile-safe-area {\n    @apply pb-16 sm:pb-20 lg:pb-4;\n  }\n\n  .mobile-padding {\n    @apply px-3 sm:px-4 md:px-6 lg:px-8;\n  }\n\n  .mobile-text {\n    @apply text-xs sm:text-sm md:text-base;\n  }\n\n  .mobile-button {\n    @apply py-2 sm:py-2.5 md:py-3 px-3 sm:px-4 md:px-6 text-xs sm:text-sm md:text-base min-h-[40px] sm:min-h-[44px];\n  }\n\n  .mobile-card {\n    @apply p-3 sm:p-4 md:p-5 lg:p-6 xl:p-8;\n  }\n\n  .mobile-header {\n    @apply h-14 sm:h-16 md:h-18 lg:h-20;\n  }\n\n  .mobile-grid {\n    @apply grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4;\n  }\n\n  .mobile-flex-col {\n    @apply flex-col sm:flex-row;\n  }\n\n  .mobile-gap {\n    @apply gap-2 sm:gap-3 md:gap-4 lg:gap-6;\n  }\n\n  .mobile-space-y {\n    @apply space-y-3 sm:space-y-4 md:space-y-5 lg:space-y-6;\n  }\n\n  .mobile-rounded {\n    @apply rounded-lg sm:rounded-xl md:rounded-2xl;\n  }\n\n  .mobile-input {\n    @apply text-sm sm:text-base px-3 sm:px-4 py-2 sm:py-3 min-h-[44px] sm:min-h-[48px];\n  }\n\n  .mobile-title {\n    @apply text-base sm:text-lg md:text-xl lg:text-2xl;\n  }\n\n  .mobile-subtitle {\n    @apply text-sm sm:text-base md:text-lg;\n  }\n\n  .mobile-icon {\n    @apply w-4 h-4 sm:w-5 sm:h-5 md:w-6 md:h-6;\n  }\n\n  .mobile-container {\n    @apply max-w-full sm:max-w-screen-sm md:max-w-screen-md lg:max-w-screen-lg xl:max-w-screen-xl 2xl:max-w-screen-2xl;\n  }\n\n  .mobile-overflow {\n    @apply overflow-x-auto;\n  }\n\n  .mobile-full-width {\n    @apply w-full max-w-none;\n  }\n\n  /* Mobile dropdown container utility */\n  .mobile-dropdown-container {\n    @apply w-full overflow-hidden;\n  }\n\n  @media (max-width: 640px) {\n    .mobile-dropdown-container {\n      max-width: calc(100vw - 2rem);\n    }\n  }\n\n  @media (min-width: 1024px) {\n    .mobile-dropdown-container {\n      max-width: 150px;\n    }\n  }\n\n  /* Enhanced responsive touch targets */\n  .touch-target {\n    @apply min-h-[44px] min-w-[44px] sm:min-h-[48px] sm:min-w-[48px];\n  }\n\n  /* Responsive text scaling */\n  .responsive-text-xs {\n    @apply text-xs sm:text-sm;\n  }\n\n  .responsive-text-sm {\n    @apply text-sm sm:text-base;\n  }\n\n  .responsive-text-base {\n    @apply text-sm sm:text-base md:text-lg;\n  }\n\n  .responsive-text-lg {\n    @apply text-base sm:text-lg md:text-xl;\n  }\n\n  .responsive-text-xl {\n    @apply text-lg sm:text-xl md:text-2xl;\n  }\n\n  /* Text utilities */\n  .text-balance {\n    text-wrap: balance;\n  }\n\n  .text-pretty {\n    text-wrap: pretty;\n  }\n\n  /* Animation utilities */\n  .animate-fade-in {\n    animation: fadeIn var(--transition-normal) ease-out;\n  }\n\n  .animate-slide-up {\n    animation: slideUp var(--transition-normal) ease-out;\n  }\n\n  @keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n  }\n\n  @keyframes slideUp {\n    from { \n      opacity: 0;\n      transform: translateY(20px);\n    }\n    to { \n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  /* Touch targets for mobile */\n  .touch-target {\n    @apply min-h-[44px] min-w-[44px];\n  }\n\n  /* Responsive viewport utilities */\n  .mobile-vh {\n    height: 100vh;\n    height: 100dvh; /* Dynamic viewport height for mobile browsers */\n  }\n\n  /* Scrollbar utilities */\n  .scrollbar-hide {\n    -ms-overflow-style: none;  /* IE and Edge */\n    scrollbar-width: none;  /* Firefox */\n  }\n\n  .scrollbar-hide::-webkit-scrollbar {\n    display: none;  /* Chrome, Safari and Opera */\n  }\n\n  /* Enhanced container utilities */\n  .container-app {\n    @apply max-w-7xl mx-auto px-4 sm:px-6 lg:px-8;\n  }\n\n  .card-container {\n    @apply overflow-hidden break-words;\n  }\n\n  .card-content {\n    @apply min-w-0 flex-1;\n  }\n\n  .mobile-safe-padding {\n    @apply px-4 sm:px-6 lg:px-8;\n  }\n\n  .mobile-safe-text {\n    @apply text-sm sm:text-base;\n  }\n\n  .mobile-responsive-grid {\n    @apply grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6;\n  }\n\n  .mobile-flex-responsive {\n    @apply flex flex-col sm:flex-row items-start sm:items-center gap-3 sm:gap-4;\n  }\n}\n\n/* Responsive text and container classes */\n.responsive-text-xs {\n  @apply text-xs;\n}\n\n@media (max-width: 640px) {\n  .responsive-text-xs {\n    @apply text-xs;\n  }\n}\n\n.responsive-text-sm {\n  @apply text-sm;\n}\n\n@media (max-width: 640px) {\n  .responsive-text-sm {\n    @apply text-xs;\n  }\n}\n\n.responsive-text-base {\n  @apply text-base;\n}\n\n@media (max-width: 640px) {\n  .responsive-text-base {\n    @apply text-sm;\n  }\n}\n\n.responsive-text-lg {\n  @apply text-lg;\n}\n\n@media (max-width: 640px) {\n  .responsive-text-lg {\n    @apply text-base;\n  }\n}\n\n.responsive-text-xl {\n  @apply text-xl;\n}\n\n@media (max-width: 640px) {\n  .responsive-text-xl {\n    @apply text-lg;\n  }\n}\n\n.responsive-text-2xl {\n  @apply text-2xl;\n}\n\n@media (max-width: 640px) {\n  .responsive-text-2xl {\n    @apply text-xl;\n  }\n}\n\n.container-app {\n  @apply w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8;\n}\n\n.card-container {\n  @apply transition-all duration-200 hover:shadow-md;\n}\n\n.card-content {\n  @apply min-w-0 flex-1;\n}\n\n.mobile-flex-responsive {\n  @apply flex items-start gap-3;\n}\n\n@media (max-width: 640px) {\n  .mobile-flex-responsive {\n    @apply flex-col items-center text-center gap-2;\n  }\n}\n\n.mobile-button {\n  @apply min-h-[44px] min-w-[44px];\n}\n\n.touch-target {\n  @apply min-h-[44px] min-w-[44px] touch-manipulation;\n}\n\n.focus-ring {\n  @apply focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 focus:ring-offset-background;\n}\n\n/* Animation classes */\n@keyframes fade-in {\n  from {\n    opacity: 0;\n    transform: translateY(-20px) scale(0.95);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0) scale(1);\n  }\n}\n\n.animate-fade-in {\n  animation: fade-in 0.3s ease-out;\n}\n\n/* Mobile viewport and scrolling fixes */\n.mobile-vh {\n  height: 100vh;\n  height: 100dvh; /* Dynamic viewport height */\n}\n\n.mobile-safe-area {\n  padding-bottom: env(safe-area-inset-bottom);\n}\n\n/* Enhanced mobile responsiveness */\n@media (max-width: 640px) {\n  .card-container {\n    @apply p-3 rounded-lg;\n  }\n\n  .mobile-flex-responsive {\n    @apply gap-2;\n  }\n\n  /* Ensure proper text wrapping on mobile */\n  .responsive-text-sm,\n  .responsive-text-base {\n    @apply break-words hyphens-auto;\n  }\n\n  /* Better button spacing on mobile */\n  .touch-target {\n    @apply px-3 py-2;\n    min-height: 44px;\n  }\n\n  /* Mobile-specific grid improvements */\n  .mobile-responsive-grid {\n    @apply grid-cols-1 gap-3;\n  }\n\n  /* Better modal handling on mobile */\n  .fixed .max-w-md,\n  .fixed .max-w-sm {\n    @apply mx-3 max-w-none;\n  }\n}\n\n/* Improved flex layouts for mobile */\n@media (max-width: 768px) {\n  .lg\\:grid {\n    @apply block space-y-4;\n  }\n\n  .lg\\:col-span-8,\n  .lg\\:col-span-4 {\n    @apply w-full;\n  }\n}\n\n/* Touch scrolling improvements */\n.mobile-scroll {\n  -webkit-overflow-scrolling: touch;\n  overscroll-behavior: contain;\n  scroll-behavior: smooth;\n}\n\n/* Mobile dropdown improvements */\n@media (max-width: 640px) {\n  /* Force dropdown visibility and positioning */\n  [role=\"listbox\"] {\n    position: fixed !important;\n    bottom: 20% !important;\n    left: 1rem !important;\n    right: 1rem !important;\n    top: auto !important;\n    z-index: 10000 !important;\n    max-height: 50vh !important;\n    transform: translateZ(0) !important;\n    -webkit-transform: translateZ(0) !important;\n    background-color: white !important;\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15) !important;\n    border-radius: 12px !important;\n    isolation: isolate !important;\n    will-change: transform !important;\n    backface-visibility: hidden !important;\n  }\n\n  /* Ensure parent container doesn't interfere */\n  .relative:has([role=\"listbox\"]) {\n    position: relative !important;\n    z-index: 10000 !important;\n    isolation: isolate !important;\n  }\n\n  .mobile-dropdown {\n    @apply fixed left-4 right-4 max-w-none;\n    z-index: 10000 !important;\n    position: fixed !important;\n    bottom: 20% !important;\n    top: auto !important;\n    max-height: 50vh !important;\n    transform: translateZ(0);\n    -webkit-transform: translateZ(0);\n    background-color: white !important;\n    isolation: isolate !important;\n  }\n}\n\n  .mobile-dropdown-option {\n    @apply min-h-[48px] text-base px-4 py-3;\n    -webkit-tap-highlight-color: rgba(0,0,0,0.1);\n    border-bottom: 1px solid rgba(0,0,0,0.1);\n    user-select: none;\n    -webkit-user-select: none;\n  }\n\n  /* Better touch targets */\n  .touch-friendly {\n    @apply min-h-[48px] min-w-[48px];\n    -webkit-tap-highlight-color: transparent;\n    touch-action: manipulation;\n  }\n\n  /* Mobile select container styling */\n  .mobile-select-container {\n    position: relative;\n    z-index: 1;\n  }\n\n  /* Force mobile dropdown positioning */\n  [role=\"listbox\"] {\n    position: fixed !important;\n    bottom: 25% !important;\n    left: 1rem !important;\n    right: 1rem !important;\n    top: auto !important;\n    z-index: 9999 !important;\n    max-height: 50vh !important;\n    transform: translateZ(0) !important;\n    -webkit-transform: translateZ(0) !important;\n    will-change: transform !important;\n    backface-visibility: hidden !important;\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15) !important;\n    border-radius: 12px !important;\n    isolation: isolate !important;\n    background-color: white !important;\n  }\n\n  /* Enhanced mobile dropdown styling */\n  .mobile-dropdown-fixed {\n    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15) !important;\n    border-radius: 12px !important;\n    overflow: hidden;\n    background-color: white !important;\n  }\n\n  /* Desktop dropdown positioning */\n  @media (min-width: 641px) {\n    [role=\"listbox\"] {\n      position: absolute !important;\n      top: calc(100% + 4px) !important;\n      left: 0 !important;\n      right: 0 !important;\n      bottom: auto !important;\n      z-index: 9999 !important;\n      background-color: white !important;\n      width: 100% !important;\n    }\n  }\n\n  .mobile-dropdown-fixed .mobile-scroll {\n    max-height: 35vh !important;\n    overflow-y: auto;\n    -webkit-overflow-scrolling: touch;\n    overscroll-behavior: contain;\n  }\n\n  /* Prevent zoom on input focus */\n  input[type=\"text\"],\n  input[type=\"email\"], \n  input[type=\"password\"],\n  select,\n  textarea {\n    font-size: 16px;\n  }\n\n  /* Compact vehicle selector on mobile */\n  .mobile-vehicle-selector {\n    max-height: 200px;\n    overflow: hidden;\n  }\n\n  .mobile-vehicle-compact {\n    padding: 0.75rem !important;\n  }\n\n  .mobile-vehicle-compact .space-y-3 > * + * {\n    margin-top: 0.5rem !important;\n  }\n\n/* Ensure dropdowns work properly on touch devices */\n.dropdown-container {\n  position: relative;\n  -webkit-transform: translateZ(0);\n  transform: translateZ(0);\n}\n\n.dropdown-menu {\n  -webkit-overflow-scrolling: touch;\n  overscroll-behavior: contain;\n}\n\n/* Touch scrolling improvements */\n  .mobile-scroll {\n    -webkit-overflow-scrolling: touch;\n    overscroll-behavior: contain;\n    scroll-behavior: smooth;\n  }\n\n  /* Parking slot grid fixes */\n  .slot-grid-container {\n    overflow-x: auto;\n    overflow-y: visible;\n    -webkit-overflow-scrolling: touch;\n    scrollbar-width: thin;\n    scrollbar-color: var(--color-border) transparent;\n  }\n\n  .slot-grid-container::-webkit-scrollbar {\n    height: 4px;\n  }\n\n  .slot-grid-container::-webkit-scrollbar-track {\n    background: var(--color-muted);\n    border-radius: 2px;\n  }\n\n  .slot-grid-container::-webkit-scrollbar-thumb {\n    background: var(--color-border);\n    border-radius: 2px;\n  }\n\n  /* Prevent slot number labels from causing overflow */\n  .slot-button {\n    position: relative;\n    overflow: visible;\n  }\n\n  .slot-number-label {\n    position: absolute;\n    bottom: -1.5rem;\n    left: 50%;\n    transform: translateX(-50%);\n    white-space: nowrap;\n    pointer-events: none;\n  }\n","size_bytes":28856},"src/utils/cn.js":{"content":"import { clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs) {\n    return twMerge(clsx(inputs));\n}","size_bytes":139},"src/components/ui/BookingFloatingActions.jsx":{"content":"import React, { useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport Icon from '../AppIcon';\nimport Button from './Button';\n\nconst BookingFloatingActions = ({ className = '' }) => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const isOnFacilityPage = location?.pathname === '/facility-details-floor-selection';\n  const isOnSearchPage = location?.pathname === '/location-search-map';\n\n  // Don't show on booking flow pages\n  if (location?.pathname === '/slot-selection-booking' || \n      location?.pathname === '/booking-confirmation-payment' ||\n      location?.pathname === '/my-bookings-dashboard' ||\n      location?.pathname === '/user-authentication') {\n    return null;\n  }\n\n  const handleQuickBook = () => {\n    if (isOnFacilityPage) {\n      navigate('/slot-selection-booking');\n    } else {\n      // From search page, navigate to a sample facility\n      navigate('/facility-details-floor-selection');\n    }\n  };\n\n  const handleViewBookings = () => {\n    navigate('/my-bookings-dashboard');\n  };\n\n  const handleFindNearby = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation?.getCurrentPosition(\n        (position) => {\n          navigate('/location-search-map', {\n            state: {\n              userLocation: {\n                lat: position?.coords?.latitude,\n                lng: position?.coords?.longitude\n              },\n              searchNearby: true\n            }\n          });\n        },\n        (error) => {\n          console.error('Location access denied:', error);\n          navigate('/location-search-map');\n        }\n      );\n    }\n  };\n\n  const toggleExpanded = () => {\n    setIsExpanded(!isExpanded);\n  };\n\n  return (\n    <div className={`fixed bottom-20 lg:bottom-6 right-4 z-90 ${className}`}>\n      {/* Expanded Actions */}\n      {isExpanded && (\n        <div className=\"mb-4 space-y-3 animate-slide-up\">\n          {!isOnSearchPage && (\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={handleFindNearby}\n              iconName=\"MapPin\"\n              iconPosition=\"left\"\n              className=\"shadow-lg hover:shadow-xl transition-all duration-200 w-full justify-start\"\n            >\n              Find Nearby\n            </Button>\n          )}\n          \n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={handleViewBookings}\n            iconName=\"Calendar\"\n            iconPosition=\"left\"\n            className=\"shadow-lg hover:shadow-xl transition-all duration-200 w-full justify-start\"\n          >\n            My Bookings\n          </Button>\n          \n          {isOnFacilityPage && (\n            <Button\n              variant=\"success\"\n              size=\"sm\"\n              onClick={handleQuickBook}\n              iconName=\"Clock\"\n              iconPosition=\"left\"\n              className=\"shadow-lg hover:shadow-xl transition-all duration-200 w-full justify-start\"\n            >\n              Quick Book\n            </Button>\n          )}\n        </div>\n      )}\n\n      {/* Main FAB */}\n      <Button\n        variant=\"primary\"\n        size=\"lg\"\n        onClick={isOnFacilityPage ? handleQuickBook : toggleExpanded}\n        className=\"rounded-full w-14 h-14 shadow-lg hover:shadow-xl transition-all duration-200 hover:scale-105\"\n      >\n        <Icon \n          name={isOnFacilityPage ? \"Plus\" : isExpanded ? \"X\" : \"Plus\"} \n          size={24} \n          className=\"text-primary-foreground\"\n        />\n      </Button>\n\n      {/* Quick Action Hint */}\n      {!isExpanded && !isOnFacilityPage && (\n        <div className=\"absolute -top-12 right-0 bg-popover text-popover-foreground px-3 py-1 rounded-lg text-sm shadow-md whitespace-nowrap opacity-0 hover:opacity-100 transition-opacity duration-200 pointer-events-none\">\n          Quick Actions\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BookingFloatingActions;","size_bytes":3996},"src/components/ui/BookingProgressHeader.jsx":{"content":"import React from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport Icon from '../AppIcon';\nimport Button from './Button';\nimport { useSidebar } from './SidebarContext';\n\nconst BookingProgressHeader = ({ className = '' }) => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const { toggle } = useSidebar();\n\n  const bookingSteps = [\n    {\n      path: '/slot-selection-booking',\n      label: 'Select Slot',\n      step: 1\n    },\n    {\n      path: '/booking-confirmation-payment',\n      label: 'Payment',\n      step: 2\n    }\n  ];\n\n  const getCurrentStep = () => {\n    const currentStep = bookingSteps?.find(step => step?.path === location?.pathname);\n    return currentStep ? currentStep?.step : 1;\n  };\n\n  const handleBack = () => {\n    const currentStep = getCurrentStep();\n    if (currentStep === 2) {\n      navigate('/slot-selection-booking');\n    } else {\n      navigate('/facility-details-floor-selection');\n    }\n  };\n\n  const handleCancel = () => {\n    navigate('/location-search-map');\n  };\n\n  const currentStepNumber = getCurrentStep();\n  const totalSteps = bookingSteps?.length;\n\n  return (\n    <header className={`bg-card border-b border-border sticky top-0 z-80 ${className}`}>\n      <div className=\"container-app\">\n        <div className=\"flex items-center justify-between py-4\">\n          {/* Back Button and Progress */}\n          <div className=\"flex items-center gap-4\">\n            {/* Sidebar toggle (desktop) */}\n            <button\n              type=\"button\"\n              onClick={toggle}\n              aria-label=\"Toggle sidebar\"\n              className=\"hidden lg:inline-flex items-center justify-center w-9 h-9 rounded-md text-muted-foreground hover:text-foreground hover:bg-muted transition-colors\"\n            >\n              <Icon name=\"Menu\" size={20} />\n            </button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleBack}\n              iconName=\"ArrowLeft\"\n              iconPosition=\"left\"\n              className=\"text-muted-foreground hover:text-foreground\"\n            >\n              Back\n            </Button>\n\n            {/* Progress Indicator - Desktop */}\n            <div className=\"hidden md:flex items-center gap-4\">\n              {bookingSteps?.map((step, index) => (\n                <div key={step?.path} className=\"flex items-center gap-2\">\n                  <div className={`flex items-center gap-2 ${\n                    step?.step <= currentStepNumber ? 'text-primary' : 'text-muted-foreground'\n                  }`}>\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                      step?.step < currentStepNumber \n                        ? 'bg-primary text-primary-foreground' \n                        : step?.step === currentStepNumber\n                        ? 'bg-primary text-primary-foreground'\n                        : 'bg-muted text-muted-foreground'\n                    }`}>\n                      {step?.step < currentStepNumber ? (\n                        <Icon name=\"Check\" size={16} />\n                      ) : (\n                        step?.step\n                      )}\n                    </div>\n                    <span className=\"font-medium\">{step?.label}</span>\n                  </div>\n                  {index < bookingSteps?.length - 1 && (\n                    <div className={`w-8 h-0.5 mx-2 ${\n                      step?.step < currentStepNumber ? 'bg-primary' : 'bg-muted'\n                    }`} />\n                  )}\n                </div>\n              ))}\n            </div>\n\n            {/* Progress Indicator - Mobile */}\n            <div className=\"md:hidden flex items-center gap-2\">\n              <div className=\"text-sm font-medium text-foreground\">\n                Step {currentStepNumber} of {totalSteps}\n              </div>\n              <div className=\"w-16 h-2 bg-muted rounded-full overflow-hidden\">\n                <div \n                  className=\"h-full bg-primary transition-all duration-300\"\n                  style={{ width: `${(currentStepNumber / totalSteps) * 100}%` }}\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Cancel Button */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleCancel}\n            className=\"text-muted-foreground hover:text-destructive\"\n          >\n            Cancel\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default BookingProgressHeader;","size_bytes":4582},"src/components/ui/BottomTabNavigation.jsx":{"content":"import React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport Icon from '../AppIcon';\nimport { useSidebar } from './SidebarContext';\n\nconst BottomTabNavigation = ({ className = '' }) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const navigationItems = [\n    {\n      label: 'Home',\n      path: '/home',\n      icon: 'Home',\n      tooltip: 'Dashboard'\n    },\n    {\n      label: 'Search',\n      path: '/location-search-map',\n      icon: 'Search',\n      tooltip: 'Find parking spots'\n    },\n    {\n      label: 'My Bookings',\n      path: '/my-bookings-dashboard',\n      icon: 'Calendar',\n      tooltip: 'View your reservations'\n    },\n    {\n      label: 'Profile',\n      path: '/profile',\n      icon: 'User',\n      tooltip: 'Account settings'\n    }\n  ];\n\n  const isActive = (path) => {\n    if (path === '/location-search-map') {\n      return location?.pathname === path || location?.pathname === '/facility-details-floor-selection';\n    }\n    if (path === '/home') {\n      return location?.pathname === path;\n    }\n    return location?.pathname === path;\n  };\n\n  const handleNavigation = (path) => {\n    navigate(path);\n  };\n\n  const { isOpen, close } = useSidebar();\n\n  return (\n    <>\n      {/* Mobile Bottom Navigation */}\n      <nav className={`lg:hidden fixed bottom-0 left-0 right-0 bg-card border-t border-border z-100 ${className}`} style={{ paddingBottom: 'env(safe-area-inset-bottom)' }}>\n        <div className=\"flex items-center justify-around px-2 py-2 safe-area-inset-bottom\">\n          {navigationItems?.map((item) => (\n            <button\n              key={item?.path}\n              onClick={() => handleNavigation(item?.path)}\n              className={`flex flex-col items-center justify-center px-2 py-2 rounded-lg transition-all ease-micro duration-200 min-w-0 flex-1 mobile-touch-target ${\n                isActive(item?.path)\n                  ? 'text-primary bg-primary/10' :'text-muted-foreground hover:text-foreground hover:bg-muted'\n              }`}\n              title={item?.tooltip}\n            >\n              <Icon \n                name={item?.icon} \n                size={20}\n                className={`mb-1 ${isActive(item?.path) ? 'text-primary' : ''}`}\n              />\n              <span className=\"text-xs font-medium truncate leading-tight\">{item?.label}</span>\n            </button>\n          ))}\n        </div>\n      </nav>\n      {/* Desktop Sidebar Navigation */}\n      <nav\n        className={`hidden lg:flex fixed left-0 top-0 h-full w-56 bg-card border-r border-border z-90 flex-col transform transition-transform duration-200 ease-micro ${\n          isOpen ? 'translate-x-0' : '-translate-x-full'\n        } ${className}`}\n        aria-hidden={!isOpen}\n      >\n        {/* Logo Section */}\n        <div className=\"p-6 border-b border-border\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <Icon name=\"Car\" size={20} color=\"white\" />\n            </div>\n            <div>\n              <h1 className=\"text-lg font-semibold text-foreground\">ParkSlot Pro</h1>\n              <p className=\"text-xs text-muted-foreground\">Smart Parking</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation Items */}\n        <div className=\"flex-1 p-4 space-y-2\">\n          {navigationItems?.map((item) => (\n            <button\n              key={item?.path}\n              onClick={() => handleNavigation(item?.path)}\n              className={`w-full flex items-center gap-3 px-4 py-3 rounded-lg transition-all ease-micro duration-200 text-left ${\n                isActive(item?.path)\n                  ? 'bg-primary text-primary-foreground'\n                  : 'text-foreground hover:bg-muted focus-ring'\n              }`}\n              title={item?.tooltip}\n            >\n              <Icon \n                name={item?.icon} \n                size={20} \n                className={isActive(item?.path) ? 'text-primary-foreground' : 'text-muted-foreground'}\n              />\n              <span className=\"font-medium\">{item?.label}</span>\n            </button>\n          ))}\n        </div>\n\n        {/* Footer */}\n        <div className=\"p-4 border-t border-border\">\n          <div className=\"text-xs text-muted-foreground text-center\">\n            ¬© 2025 ParkSlot Pro\n          </div>\n        </div>\n      </nav>\n\n      {/* Overlay when sidebar is open */}\n      {isOpen && (\n        <div\n          className=\"hidden lg:block fixed inset-0 bg-black/20 z-80\"\n          onClick={close}\n          aria-hidden=\"true\"\n        />\n      )}\n    </>\n  );\n};\n\nexport default BottomTabNavigation;","size_bytes":4709},"src/components/ui/Button.jsx":{"content":"import React from 'react';\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva } from \"class-variance-authority\";\nimport { cn } from \"../../utils/cn\";\nimport Icon from '../AppIcon';\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n    {\n        variants: {\n            variant: {\n                default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n                destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n                outline: \"border border-input hover:bg-accent hover:text-accent-foreground\",\n                secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n                ghost: \"hover:bg-accent hover:text-accent-foreground\",\n                link: \"text-primary underline-offset-4 hover:underline\",\n                success: \"bg-success text-success-foreground hover:bg-success/90\",\n                warning: \"bg-warning text-warning-foreground hover:bg-warning/90\",\n                danger: \"bg-error text-error-foreground hover:bg-error/90\",\n            },\n            size: {\n                default: \"h-10 px-4 py-2\",\n                sm: \"h-9 rounded-md px-3\",\n                lg: \"h-11 rounded-md px-8\",\n                icon: \"h-10 w-10\",\n                xs: \"h-8 rounded-md px-2 text-xs\",\n                xl: \"h-12 rounded-md px-10 text-base\",\n            },\n        },\n        defaultVariants: {\n            variant: \"default\",\n            size: \"default\",\n        },\n    }\n);\n\nconst Button = React.forwardRef(({\n    className,\n    variant,\n    size,\n    asChild = false,\n    children,\n    loading = false,\n    iconName = null,\n    iconPosition = 'left',\n    iconSize = null,\n    fullWidth = false,\n    disabled = false,\n    ...props\n}, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n\n    // Icon size mapping based on button size\n    const iconSizeMap = {\n        xs: 12,\n        sm: 14,\n        default: 16,\n        lg: 18,\n        xl: 20,\n        icon: 16,\n    };\n\n    const calculatedIconSize = iconSize || iconSizeMap?.[size] || 16;\n\n    // Loading spinner\n    const LoadingSpinner = () => (\n        <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\">\n            <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" />\n            <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 714 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" />\n        </svg>\n    );\n\n    const renderIcon = () => {\n        if (!iconName) return null;\n        try {\n            return (\n                <Icon\n                    name={iconName}\n                    size={calculatedIconSize}\n                    className={cn(\n                        children && iconPosition === 'left' && \"mr-2\",\n                        children && iconPosition === 'right' && \"ml-2\"\n                    )}\n                />\n            );\n        } catch {\n            return null;\n        }\n    };\n\n    const renderFallbackButton = () => (\n        <button\n            className={cn(\n                buttonVariants({ variant, size, className }),\n                fullWidth && \"w-full\"\n            )}\n            ref={ref}\n            disabled={disabled || loading}\n            {...props}\n        >\n            {loading && <LoadingSpinner />}\n            {iconName && iconPosition === 'left' && renderIcon()}\n            {children}\n            {iconName && iconPosition === 'right' && renderIcon()}\n        </button>\n    );\n\n    // When asChild is true, merge icons into the child element\n    if (asChild) {\n        try {\n            if (!children || React.Children?.count(children) !== 1) {\n                return renderFallbackButton();\n            }\n\n            const child = React.Children?.only(children);\n\n            if (!React.isValidElement(child)) {\n                return renderFallbackButton();\n            }\n            const content = (\n                <>\n                    {loading && <LoadingSpinner />}\n                    {iconName && iconPosition === 'left' && renderIcon()}\n                    {child?.props?.children}\n                    {iconName && iconPosition === 'right' && renderIcon()}\n                </>\n            );\n\n            const clonedChild = React.cloneElement(child, {\n                className: cn(\n                    buttonVariants({ variant, size, className }),\n                    fullWidth && \"w-full\",\n                    child?.props?.className\n                ),\n                disabled: disabled || loading || child?.props?.disabled,\n                children: content,\n            });\n\n            return <Comp ref={ref} {...props}>{clonedChild}</Comp>;\n        } catch {\n            return renderFallbackButton();\n        }\n    }\n\n    return (\n        <Comp\n            className={cn(\n                buttonVariants({ variant, size, className }),\n                fullWidth && \"w-full\"\n            )}\n            ref={ref}\n            disabled={disabled || loading}\n            {...props}\n        >\n            {loading && <LoadingSpinner />}\n            {iconName && iconPosition === 'left' && renderIcon()}\n            {children}\n            {iconName && iconPosition === 'right' && renderIcon()}\n        </Comp>\n    );\n});\n\nButton.displayName = \"Button\";\nexport default Button;","size_bytes":5605},"src/components/ui/Checkbox.jsx":{"content":"import React from \"react\";\nimport { Check, Minus } from \"lucide-react\";\nimport { cn } from \"../../utils/cn\";\n\nconst Checkbox = React.forwardRef(({\n    className,\n    id,\n    checked,\n    indeterminate = false,\n    disabled = false,\n    required = false,\n    label,\n    description,\n    error,\n    size = \"default\",\n    ...props\n}, ref) => {\n    // Generate unique ID if not provided\n    const checkboxId = id || `checkbox-${Math.random()?.toString(36)?.substr(2, 9)}`;\n\n    // Size variants\n    const sizeClasses = {\n        sm: \"h-4 w-4\",\n        default: \"h-4 w-4\",\n        lg: \"h-5 w-5\"\n    };\n\n    return (\n        <div className={cn(\"flex items-start space-x-2\", className)}>\n            <div className=\"relative flex items-center\">\n                <input\n                    type=\"checkbox\"\n                    ref={ref}\n                    id={checkboxId}\n                    checked={checked}\n                    disabled={disabled}\n                    required={required}\n                    className=\"sr-only\"\n                    {...props}\n                />\n\n                <label\n                    htmlFor={checkboxId}\n                    className={cn(\n                        \"peer shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground cursor-pointer transition-colors\",\n                        sizeClasses?.[size],\n                        checked && \"bg-primary text-primary-foreground border-primary\",\n                        indeterminate && \"bg-primary text-primary-foreground border-primary\",\n                        error && \"border-destructive\",\n                        disabled && \"cursor-not-allowed opacity-50\"\n                    )}\n                >\n                    {checked && !indeterminate && (\n                        <Check className=\"h-3 w-3 text-current flex items-center justify-center\" />\n                    )}\n                    {indeterminate && (\n                        <Minus className=\"h-3 w-3 text-current flex items-center justify-center\" />\n                    )}\n                </label>\n            </div>\n            {(label || description || error) && (\n                <div className=\"flex-1 space-y-1\">\n                    {label && (\n                        <label\n                            htmlFor={checkboxId}\n                            className={cn(\n                                \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\",\n                                error ? \"text-destructive\" : \"text-foreground\"\n                            )}\n                        >\n                            {label}\n                            {required && <span className=\"text-destructive ml-1\">*</span>}\n                        </label>\n                    )}\n\n                    {description && !error && (\n                        <p className=\"text-sm text-muted-foreground\">\n                            {description}\n                        </p>\n                    )}\n\n                    {error && (\n                        <p className=\"text-sm text-destructive\">\n                            {error}\n                        </p>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n});\n\nCheckbox.displayName = \"Checkbox\";\n\n// Checkbox Group component\nconst CheckboxGroup = React.forwardRef(({\n    className,\n    children,\n    label,\n    description,\n    error,\n    required = false,\n    disabled = false,\n    ...props\n}, ref) => {\n    return (\n        <fieldset\n            ref={ref}\n            disabled={disabled}\n            className={cn(\"space-y-3\", className)}\n            {...props}\n        >\n            {label && (\n                <legend className={cn(\n                    \"text-sm font-medium\",\n                    error ? \"text-destructive\" : \"text-foreground\"\n                )}>\n                    {label}\n                    {required && <span className=\"text-destructive ml-1\">*</span>}\n                </legend>\n            )}\n\n            {description && !error && (\n                <p className=\"text-sm text-muted-foreground\">\n                    {description}\n                </p>\n            )}\n\n            <div className=\"space-y-2\">\n                {children}\n            </div>\n\n            {error && (\n                <p className=\"text-sm text-destructive\">\n                    {error}\n                </p>\n            )}\n        </fieldset>\n    );\n});\n\nCheckboxGroup.displayName = \"CheckboxGroup\";\n\nexport default Checkbox;\nexport { Checkbox, CheckboxGroup };","size_bytes":4781},"src/components/ui/CitySelector.jsx":{"content":"import React, { useState, useRef, useEffect } from 'react';\nimport Icon from '../AppIcon';\n\nconst CitySelector = ({ selectedCity, onCityChange, className = '', cities }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef(null);\n  \n  // Default cities if not provided as prop\n  const defaultCities = [\n    {\n      value: 'hyderabad',\n      label: 'Hyderabad',\n      coordinates: { lat: 17.3850, lng: 78.4867 },\n      icon: 'MapPin',\n      areas: [\n        { name: 'Hitech City', coordinates: { lat: 17.4435, lng: 78.3772 } },\n        { name: 'Gachibowli', coordinates: { lat: 17.4400, lng: 78.3482 } },\n        { name: 'Madhapur', coordinates: { lat: 17.4481, lng: 78.3915 } },\n        { name: 'Jubilee Hills', coordinates: { lat: 17.4305, lng: 78.4059 } },\n        { name: 'Banjara Hills', coordinates: { lat: 17.4123, lng: 78.4439 } },\n        { name: 'Secunderabad', coordinates: { lat: 17.5040, lng: 78.5440 } },\n        { name: 'Begumpet', coordinates: { lat: 17.4520, lng: 78.4636 } },\n        { name: 'Kukatpally', coordinates: { lat: 17.4840, lng: 78.4071 } },\n        { name: 'Kondapur', coordinates: { lat: 17.4615, lng: 78.3677 } },\n        { name: 'Miyapur', coordinates: { lat: 17.4953, lng: 78.3584 } },\n        { name: 'Ameerpet', coordinates: { lat: 17.4369, lng: 78.4482 } },\n        { name: 'SR Nagar', coordinates: { lat: 17.4398, lng: 78.4482 } },\n        { name: 'Punjagutta', coordinates: { lat: 17.4326, lng: 78.4594 } },\n        { name: 'Somajiguda', coordinates: { lat: 17.4195, lng: 78.4547 } },\n        { name: 'Abids', coordinates: { lat: 17.3907, lng: 78.4865 } }\n      ]\n    },\n    {\n      value: 'bangalore',\n      label: 'Bangalore',\n      coordinates: { lat: 12.9716, lng: 77.5946 },\n      icon: 'MapPin',\n      areas: [\n        { name: 'Koramangala', coordinates: { lat: 12.9352, lng: 77.6245 } },\n        { name: 'Indiranagar', coordinates: { lat: 12.9784, lng: 77.6408 } },\n        { name: 'Whitefield', coordinates: { lat: 12.9698, lng: 77.7500 } },\n        { name: 'Electronic City', coordinates: { lat: 12.8456, lng: 77.6603 } },\n        { name: 'BTM Layout', coordinates: { lat: 12.9165, lng: 77.6101 } },\n        { name: 'Jayanagar', coordinates: { lat: 12.9237, lng: 77.5828 } },\n        { name: 'MG Road', coordinates: { lat: 12.9759, lng: 77.6039 } },\n        { name: 'HSR Layout', coordinates: { lat: 12.9081, lng: 77.6476 } },\n        { name: 'Marathahalli', coordinates: { lat: 12.9591, lng: 77.6974 } },\n        { name: 'Sarjapur Road', coordinates: { lat: 12.9010, lng: 77.6874 } },\n        { name: 'Banashankari', coordinates: { lat: 12.9250, lng: 77.5678 } },\n        { name: 'Rajajinagar', coordinates: { lat: 12.9916, lng: 77.5554 } },\n        { name: 'Malleshwaram', coordinates: { lat: 12.9940, lng: 77.5746 } },\n        { name: 'Basavanagudi', coordinates: { lat: 12.9420, lng: 77.5737 } },\n        { name: 'JP Nagar', coordinates: { lat: 12.9082, lng: 77.5854 } }\n      ]\n    },\n    {\n      value: 'delhi',\n      label: 'Delhi',\n      coordinates: { lat: 28.6139, lng: 77.2090 },\n      icon: 'MapPin',\n      areas: [\n        { name: 'Connaught Place', coordinates: { lat: 28.6304, lng: 77.2177 } },\n        { name: 'Karol Bagh', coordinates: { lat: 28.6519, lng: 77.1909 } },\n        { name: 'Lajpat Nagar', coordinates: { lat: 28.5678, lng: 77.2432 } },\n        { name: 'Chandni Chowk', coordinates: { lat: 28.6506, lng: 77.2303 } },\n        { name: 'India Gate', coordinates: { lat: 28.6129, lng: 77.2295 } }\n      ]\n    },\n    {\n      value: 'mumbai',\n      label: 'Mumbai',\n      coordinates: { lat: 19.0760, lng: 72.8777 },\n      icon: 'MapPin',\n      areas: [\n        { name: 'Bandra', coordinates: { lat: 19.0596, lng: 72.8295 } },\n        { name: 'Andheri', coordinates: { lat: 19.1136, lng: 72.8697 } },\n        { name: 'Powai', coordinates: { lat: 19.1176, lng: 72.9060 } },\n        { name: 'Colaba', coordinates: { lat: 18.9067, lng: 72.8147 } },\n        { name: 'Worli', coordinates: { lat: 19.0176, lng: 72.8187 } }\n      ]\n    }\n  ];\n\n  const citiesData = cities || defaultCities;\n\n  const handleCityChange = (cityValue) => {\n    const city = citiesData.find(c => c.value === cityValue);\n    if (city) {\n      onCityChange(city);\n    }\n    setIsOpen(false);\n  };\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  return (\n    <div ref={dropdownRef} className={`relative w-full max-w-[180px] ${className}`}>\n      {/* Dropdown Trigger */}\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"w-full bg-white border border-gray-300 rounded-md py-2 px-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm text-left flex items-center justify-between\"\n      >\n        <span>{selectedCity?.label || citiesData[0].label}</span>\n        <svg \n          className={`w-4 h-4 transition-transform ${isOpen ? 'rotate-180' : ''}`} \n          fill=\"none\" \n          stroke=\"currentColor\" \n          viewBox=\"0 0 24 24\"\n        >\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n        </svg>\n      </button>\n\n      {/* Scrollable Dropdown List */}\n      {isOpen && (\n        <div className=\"absolute top-full left-0 right-0 mt-1 bg-white border border-gray-300 rounded-md shadow-xl z-50 max-h-60 overflow-y-auto\">\n          {citiesData.map((city) => (\n            <button\n              key={city.value}\n              onClick={() => handleCityChange(city.value)}\n              className={`w-full text-left px-3 py-2 hover:bg-gray-100 border-b border-gray-100 last:border-b-0 ${\n                selectedCity?.value === city.value ? 'bg-blue-50 text-blue-600 font-medium' : 'text-gray-800'\n              }`}\n            >\n              <div className=\"flex items-center justify-between\">\n                <span>{city.label}</span>\n                {city.areas && (\n                  <span className=\"text-xs text-gray-500\">\n                    {city.areas.length} areas\n                  </span>\n                )}\n              </div>\n            </button>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CitySelector;","size_bytes":6458},"src/components/ui/GlobalSearchHeader.jsx":{"content":"import React, { useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport Icon from '../AppIcon';\nimport Button from './Button';\nimport Input from './Input';\nimport CitySelector from './CitySelector';\nimport { useSidebar } from './SidebarContext';\n\nconst GlobalSearchHeader = ({ selectedCity, onCityChange, onLocationSearch, className = '' }) => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isSearchExpanded, setIsSearchExpanded] = useState(false);\n  const { toggle } = useSidebar();\n\n  const isOnSearchPage = location?.pathname === '/location-search-map';\n  const isOnFacilityPage = location?.pathname === '/facility-details-floor-selection';\n\n  const handleSearch = (e) => {\n    e?.preventDefault();\n    if (searchQuery?.trim()) {\n      if (isOnSearchPage && onLocationSearch) {\n        // If on search page and onLocationSearch is provided, use it\n        onLocationSearch(searchQuery?.trim());\n      } else {\n        // Navigate to search page\n        navigate('/location-search-map', { \n          state: { searchQuery: searchQuery?.trim() } \n        });\n      }\n      setSearchQuery(''); // Clear search after submitting\n    }\n  };\n\n  const handleLocationRequest = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation?.getCurrentPosition(\n        (position) => {\n          navigate('/location-search-map', {\n            state: {\n              userLocation: {\n                lat: position?.coords?.latitude,\n                lng: position?.coords?.longitude\n              }\n            }\n          });\n        },\n        (error) => {\n          console.error('Location access denied:', error);\n          // Fallback to search page without location\n          navigate('/location-search-map');\n        }\n      );\n    }\n  };\n\n  const handleBack = () => {\n    if (isOnFacilityPage) {\n      navigate('/location-search-map');\n    } else {\n      navigate(-1);\n    }\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border sticky top-0 z-80\">\n      <div className=\"container-app\">\n        <div className=\"flex items-center gap-4 py-4\">\n          {/* Logo and Back Navigation */}\n          <div className=\"flex items-center gap-3\">\n            {(isOnSearchPage || isOnFacilityPage) ? (\n              <div className=\"flex items-center gap-3\">\n                {/* Sidebar toggle button */}\n                <button\n                  type=\"button\"\n                  onClick={toggle}\n                  aria-label=\"Toggle sidebar\"\n                  className=\"hidden lg:inline-flex items-center justify-center w-9 h-9 rounded-md text-muted-foreground hover:text-foreground hover:bg-muted transition-colors\"\n                >\n                  <Icon name=\"Menu\" size={20} />\n                </button>\n                <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                  <Icon name=\"Car\" size={20} color=\"white\" />\n                </div>\n                <div className=\"hidden sm:block\">\n                  <h1 className=\"text-lg font-semibold text-foreground\">ParkSlot Pro</h1>\n                </div>\n              </div>\n            ) : (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleBack}\n                iconName=\"ArrowLeft\"\n                iconPosition=\"left\"\n                className=\"text-muted-foreground hover:text-foreground\"\n              >\n                Back\n              </Button>\n            )}\n          </div>\n\n          {/* Search Bar */}\n          <div className=\"flex-1 max-w-2xl\">\n            {/* Desktop Search */}\n            <form onSubmit={handleSearch} className=\"hidden sm:block\">\n              <div className=\"relative\">\n                <Input\n                  type=\"search\"\n                  placeholder=\"Search for parking locations...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e?.target?.value)}\n                  className=\"pl-10 pr-12\"\n                />\n                <Icon \n                  name=\"Search\" \n                  size={20} \n                  className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleLocationRequest}\n                  className=\"absolute right-1 top-1/2 transform -translate-y-1/2 p-2\"\n                  title=\"Use current location\"\n                >\n                  <Icon name=\"MapPin\" size={16} />\n                </Button>\n              </div>\n            </form>\n\n            {/* Mobile Search - Only show on non-search pages */}\n            {!isOnSearchPage && (\n              <div className=\"sm:hidden\">\n                {isSearchExpanded ? (\n                  <form onSubmit={handleSearch} className=\"flex items-center gap-2\">\n                    <Input\n                      type=\"search\"\n                      placeholder=\"Search locations...\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e?.target?.value)}\n                      className=\"flex-1\"\n                      autoFocus\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setIsSearchExpanded(false)}\n                    >\n                      <Icon name=\"X\" size={20} />\n                    </Button>\n                  </form>\n                ) : (\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setIsSearchExpanded(true)}\n                      className=\"flex-1 justify-start text-muted-foreground\"\n                    >\n                      <Icon name=\"Search\" size={20} className=\"mr-2\" />\n                      Search locations...\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={handleLocationRequest}\n                      title=\"Use current location\"\n                    >\n                      <Icon name=\"MapPin\" size={20} />\n                    </Button>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* City Selector - Only on search page */}\n          {isOnSearchPage && selectedCity && onCityChange && (\n            <CitySelector\n              selectedCity={selectedCity}\n              onCityChange={onCityChange}\n              className=\"flex sm:flex max-w-[140px] sm:max-w-none\"\n            />\n          )}\n\n          {/* Filter Button - Only on search page */}\n          {isOnSearchPage && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              iconName=\"Filter\"\n              className=\"hidden sm:flex\"\n            >\n              Filters\n            </Button>\n          )}\n\n          {/* Mobile Filter Button */}\n          {isOnSearchPage && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"sm:hidden\"\n            >\n              <Icon name=\"Filter\" size={20} />\n            </Button>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default GlobalSearchHeader;","size_bytes":7542},"src/components/ui/Input.jsx":{"content":"import React from \"react\";\nimport { cn } from \"../../utils/cn\";\n\nconst Input = React.forwardRef(({\n    className,\n    type = \"text\",\n    label,\n    description,\n    error,\n    required = false,\n    id,\n    ...props\n}, ref) => {\n    // Generate unique ID if not provided\n    const inputId = id || `input-${Math.random()?.toString(36)?.substr(2, 9)}`;\n\n    // Base input classes\n    const baseInputClasses = \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\";\n\n    // Checkbox-specific styles\n    if (type === \"checkbox\") {\n        return (\n            <input\n                type=\"checkbox\"\n                className={cn(\n                    \"h-4 w-4 rounded border border-input bg-background text-primary focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n                    className\n                )}\n                ref={ref}\n                id={inputId}\n                {...props}\n            />\n        );\n    }\n\n    // Radio button-specific styles\n    if (type === \"radio\") {\n        return (\n            <input\n                type=\"radio\"\n                className={cn(\n                    \"h-4 w-4 rounded-full border border-input bg-background text-primary focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n                    className\n                )}\n                ref={ref}\n                id={inputId}\n                {...props}\n            />\n        );\n    }\n\n    // For regular inputs with wrapper structure\n    return (\n        <div className=\"space-y-2\">\n            {label && (\n                <label\n                    htmlFor={inputId}\n                    className={cn(\n                        \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n                        error ? \"text-destructive\" : \"text-foreground\"\n                    )}\n                >\n                    {label}\n                    {required && <span className=\"text-destructive ml-1\">*</span>}\n                </label>\n            )}\n\n            <input\n                type={type}\n                className={cn(\n                    baseInputClasses,\n                    error && \"border-destructive focus-visible:ring-destructive\",\n                    className\n                )}\n                ref={ref}\n                id={inputId}\n                {...props}\n            />\n\n            {description && !error && (\n                <p className=\"text-sm text-muted-foreground\">\n                    {description}\n                </p>\n            )}\n\n            {error && (\n                <p className=\"text-sm text-destructive\">\n                    {error}\n                </p>\n            )}\n        </div>\n    );\n});\n\nInput.displayName = \"Input\";\n\nexport default Input;","size_bytes":3121},"src/components/ui/Select.jsx":{"content":"import React, { useState, useRef, useEffect } from 'react';\nimport Icon from '../AppIcon';\n\nconst Select = ({\n  options = [],\n  value = '',\n  onChange,\n  placeholder = 'Select an option',\n  label = '',\n  error = '',\n  disabled = false,\n  className = '',\n  required = false\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const selectRef = useRef(null);\n  const dropdownRef = useRef(null);\n\n  const filteredOptions = options.filter(option =>\n    option.label.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const selectedOption = options.find(option => option.value === value);\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (selectRef.current && !selectRef.current.contains(event.target)) {\n        setIsOpen(false);\n        setSearchTerm('');\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    document.addEventListener('touchstart', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n      document.removeEventListener('touchstart', handleClickOutside);\n    };\n  }, []);\n\n  const handleSelect = (optionValue) => {\n    onChange(optionValue);\n    setIsOpen(false);\n    setSearchTerm('');\n  };\n\n  const toggleDropdown = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (!disabled) {\n      setIsOpen(!isOpen);\n    }\n  };\n\n  return (\n    <div className={`relative w-full ${className}`} ref={selectRef}>\n      {label && (\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          {label}\n          {required && <span className=\"text-red-500 ml-1\">*</span>}\n        </label>\n      )}\n\n      <div\n        className={`\n          relative w-full bg-white border border-gray-300 rounded-lg px-3 py-3 cursor-pointer\n          transition-all duration-200 min-h-[48px] flex items-center\n          text-base select-none touch-manipulation\n          ${error ? 'border-red-500' : 'border-gray-300 hover:border-blue-500 focus-within:border-blue-500'}\n          ${disabled ? 'opacity-50 cursor-not-allowed bg-gray-100' : 'hover:bg-gray-50 active:bg-gray-100'}\n          ${isOpen ? 'border-blue-500 ring-1 ring-blue-500 shadow-sm' : ''}\n        `}\n        onClick={toggleDropdown}\n        onTouchStart={(e) => e.preventDefault()}\n        role=\"button\"\n        tabIndex={0}\n        aria-expanded={isOpen}\n        aria-haspopup=\"listbox\"\n        style={{ WebkitTapHighlightColor: 'transparent' }}\n      >\n        <span className={`flex-1 text-left truncate ${selectedOption ? 'text-gray-900' : 'text-gray-500'}`}>\n          {selectedOption ? selectedOption.label : placeholder}\n        </span>\n        <Icon\n          name=\"ChevronDown\"\n          size={20}\n          className={`text-gray-400 transition-transform ml-2 flex-shrink-0 ${isOpen ? 'rotate-180' : ''}`}\n        />\n      </div>\n\n      {isOpen && (\n        <div\n          ref={dropdownRef}\n          className=\"absolute left-0 right-0 mt-1 z-50 bg-white border border-gray-300 rounded-lg shadow-xl overflow-hidden max-h-60\"\n          style={{ \n            zIndex: 9999,\n            position: 'absolute',\n            top: '100%',\n            left: 0,\n            right: 0,\n            marginTop: '4px',\n            WebkitOverflowScrolling: 'touch'\n          }}\n          onClick={(e) => e.stopPropagation()}\n        >\n          {options.length > 5 && (\n            <div className=\"p-3 border-b border-gray-200 bg-gray-50\">\n              <input\n                type=\"text\"\n                placeholder=\"Search options...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full px-3 py-2 text-base bg-white border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 min-h-[44px]\"\n                onClick={(e) => e.stopPropagation()}\n                style={{ fontSize: '16px' }}\n                autoFocus\n              />\n            </div>\n          )}\n\n          <div \n            className=\"overflow-y-auto overscroll-contain max-h-48\"\n            style={{ WebkitOverflowScrolling: 'touch' }}\n          >\n            {filteredOptions.length > 0 ? (\n              filteredOptions.map((option) => (\n                <div\n                  key={option.value}\n                  className={`\n                    px-4 py-3 cursor-pointer transition-colors text-base touch-manipulation\n                    hover:bg-gray-100 active:bg-gray-200 min-h-[48px] flex items-center\n                    ${option.value === value ? 'bg-blue-50 text-blue-700 font-medium border-l-2 border-blue-500' : 'text-gray-900'}\n                  `}\n                  onClick={() => handleSelect(option.value)}\n                  onTouchEnd={(e) => {\n                    e.preventDefault();\n                    handleSelect(option.value);\n                  }}\n                  role=\"option\"\n                  aria-selected={option.value === value}\n                  style={{ \n                    WebkitTapHighlightColor: 'rgba(0, 0, 0, 0.1)',\n                    fontSize: '16px'\n                  }}\n                >\n                  <span className=\"truncate flex-1\">{option.label}</span>\n                  {option.value === value && (\n                    <Icon name=\"Check\" size={14} className=\"ml-2 text-blue-600 flex-shrink-0\" />\n                  )}\n                </div>\n              ))\n            ) : (\n              <div className=\"px-4 py-3 text-sm text-gray-500 min-h-[44px] flex items-center\">\n                No options found\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {error && (\n        <p className=\"mt-2 text-sm text-red-600\">{error}</p>\n      )}\n    </div>\n  );\n};\n\nexport default Select;\n","size_bytes":5794},"src/components/ui/SidebarContext.jsx":{"content":"import React, { createContext, useCallback, useContext, useEffect, useState } from 'react';\n\nconst SidebarContext = createContext({\n  isOpen: false,\n  open: () => {},\n  close: () => {},\n  toggle: () => {},\n});\n\nexport const SidebarProvider = ({ children }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const open = useCallback(() => setIsOpen(true), []);\n  const close = useCallback(() => setIsOpen(false), []);\n  const toggle = useCallback(() => setIsOpen((prev) => !prev), []);\n\n  useEffect(() => {\n    const onKeyDown = (e) => {\n      if (e.key === 'Escape') setIsOpen(false);\n    };\n    window.addEventListener('keydown', onKeyDown);\n    return () => window.removeEventListener('keydown', onKeyDown);\n  }, []);\n\n  return (\n    <SidebarContext.Provider value={{ isOpen, open, close, toggle }}>\n      {children}\n    </SidebarContext.Provider>\n  );\n};\n\nexport const useSidebar = () => useContext(SidebarContext);\n\n\n","size_bytes":926},"src/pages/booking-confirmation-payment/index.jsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport Icon from '../../components/AppIcon';\nimport Button from '../../components/ui/Button';\nimport BookingProgressHeader from '../../components/ui/BookingProgressHeader';\nimport BottomTabNavigation from '../../components/ui/BottomTabNavigation';\nimport BookingFloatingActions from '../../components/ui/BookingFloatingActions';\nimport BookingSummaryCard from './components/BookingSummaryCard';\nimport PricingBreakdown from './components/PricingBreakdown';\nimport PaymentMethodSection from './components/PaymentMethodSection';\nimport BookingTermsSection from './components/BookingTermsSection';\nimport BookingConfirmationButton from './components/BookingConfirmationButton';\n\nconst BookingConfirmationPayment = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState('card_1');\n  const [termsAccepted, setTermsAccepted] = useState(false);\n  const [isFormValid, setIsFormValid] = useState(false);\n  const [showSuccessPopup, setShowSuccessPopup] = useState(false);\n  const [bookingId, setBookingId] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [bookingData, setBookingData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Get booking data from various sources\n  useEffect(() => {\n    const getBookingData = () => {\n      console.log('BookingConfirmationPayment - Starting data retrieval...');\n      console.log('Navigation state:', location?.state);\n      \n      let actualBookingData = null;\n\n      try {\n        // Priority 1: Check location state\n        if (location?.state?.bookingData) {\n          actualBookingData = location.state.bookingData;\n          console.log('BookingConfirmationPayment - Found data in navigation state');\n        }\n        \n        // Priority 2: Check localStorage\n        if (!actualBookingData) {\n          try {\n            const storedData = localStorage.getItem('pendingBookingData');\n            if (storedData) {\n              actualBookingData = JSON.parse(storedData);\n              console.log('BookingConfirmationPayment - Retrieved data from localStorage');\n            }\n          } catch (storageError) {\n            console.error('Failed to retrieve booking data from localStorage:', storageError);\n          }\n        }\n\n        // Priority 3: Create fallback data to prevent errors\n        if (!actualBookingData) {\n          console.warn('No booking data found, creating fallback data');\n          const now = new Date();\n          const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n          const endTime = new Date(now.getTime() + 2 * 60 * 60 * 1000);\n          const endTimeString = `${endTime.getHours().toString().padStart(2, '0')}:${endTime.getMinutes().toString().padStart(2, '0')}`;\n          \n          actualBookingData = {\n            facility: {\n              id: Date.now(),\n              name: 'Hitech City Hub',\n              address: 'Financial District, Hitech City, Hyderabad',\n              location: { lat: 17.3850, lng: 78.4867 },\n              rating: 4.8,\n              reviews: 324\n            },\n            slot: {\n              location: '1st Floor A Row 1st Parking Slot',\n              floor: '1st Floor',\n              row: 'A Row',\n              number: '1',\n              type: 'Standard'\n            },\n            vehicle: {\n              name: 'Selected Vehicle',\n              model: 'Selected Vehicle',\n              type: 'Vehicle Type',\n              category: 'Vehicle Category',\n              vehicleType: 'two-wheeler',\n              label: 'Selected Vehicle',\n              image: 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop'\n            },\n            checkIn: {\n              date: now.toISOString().split('T')[0],\n              time: currentTime\n            },\n            checkOut: {\n              date: now.toISOString().split('T')[0],\n              time: endTimeString\n            },\n            duration: '2 hours',\n            pricing: {\n              totalCost: 200,\n              baseRate: 180,\n              serviceFee: 10.00,\n              tax: 10.00\n            },\n            isQuickBooking: false\n          };\n        }\n\n        console.log('BookingConfirmationPayment - Final booking data:', actualBookingData);\n        setBookingData(actualBookingData);\n        setError(null);\n        \n      } catch (error) {\n        console.error('Error processing booking data:', error);\n        setError('Failed to load booking data');\n        \n        // Set fallback data even on error\n        const errorFallbackTime = new Date();\n        const errorCurrentTime = `${errorFallbackTime.getHours().toString().padStart(2, '0')}:${errorFallbackTime.getMinutes().toString().padStart(2, '0')}`;\n        const errorEndTime = new Date(errorFallbackTime.getTime() + 2 * 60 * 60 * 1000);\n        const errorEndTimeString = `${errorEndTime.getHours().toString().padStart(2, '0')}:${errorEndTime.getMinutes().toString().padStart(2, '0')}`;\n        \n        setBookingData({\n          facility: {\n            id: Date.now(),\n            name: 'Hitech City Hub',\n            address: 'Financial District, Hitech City, Hyderabad',\n            location: { lat: 17.3850, lng: 78.4867 },\n            rating: 4.8,\n            reviews: 324\n          },\n          slot: {\n            location: '1st Floor A Row 1st Parking Slot',\n            floor: '1st Floor',\n            row: 'A Row',\n            number: '1',\n            type: 'Standard'\n          },\n          vehicle: {\n            name: 'Selected Vehicle',\n            model: 'Selected Vehicle',\n            type: 'Vehicle Type',\n            category: 'Vehicle Category',\n            vehicleType: 'two-wheeler',\n            label: 'Selected Vehicle',\n            image: 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop'\n          },\n          checkIn: {\n            date: errorFallbackTime.toISOString().split('T')[0],\n            time: errorCurrentTime\n          },\n          checkOut: {\n            date: errorFallbackTime.toISOString().split('T')[0],\n            time: errorEndTimeString\n          },\n          duration: '2 hours',\n          pricing: {\n            totalCost: 200,\n            baseRate: 180,\n            serviceFee: 10.00,\n            tax: 10.00\n          },\n          isQuickBooking: false\n        });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    // Get booking data immediately\n    getBookingData();\n  }, [location?.state]);\n\n  // Use actual pricing data from booking data instead of hard-coded values\n  const getActualPricingData = () => {\n    const actualPricing = bookingData?.pricing;\n    \n    if (actualPricing) {\n      console.log('Using actual pricing data from slot selection:', actualPricing);\n      \n      // Use the actual calculated values from pricing breakdown\n      const baseRate = actualPricing.subtotal || actualPricing.baseCost || 0;\n      const serviceFee = actualPricing.serviceFee || 0;\n      const tax = actualPricing.taxes || 0;\n      const total = actualPricing.totalCost || 0;\n      \n      // Get actual duration in minutes\n      const actualMinutes = actualPricing.actualMinutes || 0;\n      let durationDisplay = \"0 minutes\";\n      \n      if (actualMinutes < 60) {\n        durationDisplay = `${actualMinutes} minutes`;\n      } else if (actualMinutes === 60) {\n        durationDisplay = '1 hour';\n      } else if (actualMinutes % 60 === 0) {\n        durationDisplay = `${Math.floor(actualMinutes / 60)} hours`;\n      } else {\n        const hours = Math.floor(actualMinutes / 60);\n        const mins = actualMinutes % 60;\n        durationDisplay = `${hours}h ${mins}m`;\n      }\n      \n      return {\n        baseRate: baseRate,\n        timeAdjustment: actualPricing.timeAdjustment || 0,\n        vehicleFee: actualPricing.vehicleFee || 0,\n        discounts: actualPricing.applicableDiscounts || [],\n        subtotal: baseRate,\n        serviceFee: serviceFee,\n        tax: tax,\n        taxRate: 18,\n        total: total,\n        totalSavings: actualPricing.savings || 0,\n        duration: durationDisplay,\n        actualMinutes: actualMinutes\n      };\n    }\n    \n    // Fallback pricing only if no data is available\n    console.warn('No pricing data available, using fallback pricing');\n    return {\n      baseRate: 45.00,\n      timeAdjustment: 5.00,\n      vehicleFee: 0.00,\n      discounts: [],\n      subtotal: 37.50,\n      serviceFee: 2.50,\n      tax: 3.20,\n      taxRate: 8.5,\n      total: 43.20,\n      totalSavings: 0,\n      duration: bookingData?.duration || \"2 hours\"\n    };\n  };\n\n  const pricingData = getActualPricingData();\n\n  // Validate form whenever payment method or terms change\n  useEffect(() => {\n    const isPaymentMethodSelected = selectedPaymentMethod !== '';\n    const areTermsAccepted = termsAccepted;\n    setIsFormValid(isPaymentMethodSelected && areTermsAccepted);\n  }, [selectedPaymentMethod, termsAccepted]);\n\n  const handlePaymentMethodChange = (method) => {\n    setSelectedPaymentMethod(method);\n  };\n\n  const handleTermsAcceptance = (accepted) => {\n    setTermsAccepted(accepted);\n  };\n\n  const handleConfirmBooking = async () => {\n    try {\n      setIsProcessing(true);\n\n      const currentTime = new Date();\n      const startDateTime = bookingData?.checkIn?.date && bookingData?.checkIn?.time \n        ? new Date(`${bookingData.checkIn.date}T${bookingData.checkIn.time}:00`)\n        : currentTime;\n      const endDateTime = bookingData?.checkOut?.date && bookingData?.checkOut?.time \n        ? new Date(`${bookingData.checkOut.date}T${bookingData.checkOut.time}:00`)\n        : new Date(startDateTime.getTime() + 4 * 60 * 60 * 1000);\n\n      const newBooking = {\n        id: `BK${Date.now().toString().slice(-6)}`,\n        facility: bookingData?.facility || {\n          id: Date.now(),\n          name: 'Selected Location',\n          address: 'Selected Address',\n          location: { lat: 17.3850, lng: 78.4867 },\n          rating: 4.8,\n          reviews: 324\n        },\n        slotLocation: bookingData?.slot?.location || 'Floor 1 A Row 1st Parking Slot',\n        slot: bookingData?.slot || {\n          location: 'Floor 1 A Row 1st Parking Slot',\n          floor: '1st Floor',\n          row: 'A Row',\n          number: '1',\n          type: 'Standard'\n        },\n        vehicleType: bookingData?.vehicle?.name || bookingData?.vehicle?.model || bookingData?.vehicle?.type || 'Selected Vehicle',\n        vehicleImage: bookingData?.vehicle?.image || 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop',\n        actualVehicleType: bookingData?.vehicle?.vehicleType || 'four-wheeler',\n        vehicleCategory: bookingData?.vehicle?.category || bookingData?.vehicle?.type || 'Vehicle',\n        vehicle: bookingData?.vehicle || {\n          name: 'Selected Vehicle',\n          model: 'Selected Vehicle',\n          type: 'Vehicle',\n          category: 'Vehicle',\n          vehicleType: 'four-wheeler',\n          label: 'Selected Vehicle',\n          image: 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop'\n        },\n        startTime: startDateTime.toISOString(),\n        endTime: endDateTime.toISOString(),\n        duration: bookingData?.duration || '2 hours',\n        checkIn: {\n          date: bookingData?.checkIn?.date || new Date().toISOString().split('T')[0],\n          time: bookingData?.checkIn?.time || '09:00',\n          fullDateTime: startDateTime.toISOString()\n        },\n        checkOut: {\n          date: bookingData?.checkOut?.date || new Date().toISOString().split('T')[0], \n          time: bookingData?.checkOut?.time || '11:00',\n          fullDateTime: endDateTime.toISOString()\n        },\n        totalAmount: pricingData?.total || 43.20,\n        status: 'active',\n        receiptUrl: '#',\n        createdAt: currentTime.toISOString(),\n        paymentMethod: selectedPaymentMethod,\n        isQuickBooking: bookingData?.isQuickBooking || false\n      };\n\n      // Save to localStorage\n      const existingBookings = JSON.parse(localStorage.getItem('userBookings') || '[]');\n      const updatedBookings = [newBooking, ...existingBookings];\n      localStorage.setItem('userBookings', JSON.stringify(updatedBookings));\n\n      // Trigger storage event for real-time updates\n      window.dispatchEvent(new Event('bookingUpdate'));\n\n      // Set booking ID and show success popup\n      setBookingId(newBooking.id);\n      setShowSuccessPopup(true);\n\n      // Auto-close popup after 3 seconds and navigate\n      setTimeout(() => {\n        setShowSuccessPopup(false);\n        navigate('/my-bookings-dashboard', {\n          state: {\n            initialTab: 'active',\n            newBookingId: newBooking.id\n          }\n        });\n      }, 3000);\n    } catch (error) {\n      console.error('Booking confirmation error:', error);\n      alert('Payment failed. Please try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  // Show loading state\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Icon name=\"Loader\" size={32} className=\"animate-spin text-primary mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">Loading booking details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show error state with fallback content\n  if (error && !bookingData) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center max-w-md mx-auto p-6\">\n          <Icon name=\"AlertCircle\" size={48} className=\"text-destructive mx-auto mb-4\" />\n          <h2 className=\"text-xl font-semibold text-foreground mb-2\">Something went wrong</h2>\n          <p className=\"text-muted-foreground mb-6\">\n            We encountered an error while loading your booking details.\n          </p>\n          <div className=\"space-y-3\">\n            <Button \n              onClick={() => navigate('/slot-selection-booking')}\n              className=\"w-full\"\n            >\n              Go Back to Booking\n            </Button>\n            <Button \n              variant=\"outline\"\n              onClick={() => window.location.reload()}\n              className=\"w-full\"\n            >\n              Try Again\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header with Progress */}\n      <BookingProgressHeader />\n      \n      {/* Main Content */}\n      <main className=\"container-app py-6 pb-24 lg:pb-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          {/* Page Title - Mobile */}\n          <div className=\"lg:hidden mb-6\">\n            <h1 className=\"text-2xl font-bold text-foreground mb-2\">Confirm & Pay</h1>\n            <p className=\"text-muted-foreground\">Review your booking details and complete payment</p>\n          </div>\n\n          {/* Responsive Layout */}\n          <div className=\"lg:grid lg:grid-cols-5 lg:gap-8\">\n            {/* Left Column - Booking Summary (Desktop only) */}\n            <div className=\"hidden lg:block lg:col-span-2 space-y-6\">\n              {/* Page Title - Desktop */}\n              <div>\n                <h1 className=\"text-3xl font-bold text-foreground mb-2\">Confirm & Pay</h1>\n                <p className=\"text-muted-foreground\">Review your booking details and complete payment</p>\n              </div>\n\n              <BookingSummaryCard bookingData={bookingData} />\n              <PricingBreakdown pricingData={pricingData} />\n            </div>\n\n            {/* Right Column - Payment & Terms (Desktop) / Full Content (Mobile) */}\n            <div className=\"lg:col-span-3 space-y-6 mt-6 lg:mt-0\">\n              {/* Mobile Only Components */}\n              <div className=\"lg:hidden space-y-6\">\n                <BookingSummaryCard bookingData={bookingData} />\n                <PricingBreakdown pricingData={pricingData} />\n              </div>\n\n              {/* Payment & Terms - Both Mobile and Desktop */}\n              <PaymentMethodSection\n                onPaymentMethodChange={handlePaymentMethodChange}\n                selectedMethod={selectedPaymentMethod}\n              />\n\n              <BookingTermsSection\n                onTermsAcceptance={handleTermsAcceptance}\n                termsAccepted={termsAccepted}\n              />\n\n              <BookingConfirmationButton\n                isValid={isFormValid}\n                totalAmount={pricingData?.total}\n                onConfirmBooking={handleConfirmBooking}\n                isProcessing={isProcessing}\n              />\n            </div>\n          </div>\n        </div>\n      </main>\n      \n      {/* Navigation */}\n      <BottomTabNavigation />\n      <BookingFloatingActions />\n\n      {/* Success Popup */}\n      {showSuccessPopup && (\n        <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-white rounded-2xl shadow-2xl max-w-sm w-full mx-4 p-4 sm:p-6 text-center animate-fade-in\">\n            <div className=\"flex items-center justify-center mb-6\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                <Icon name=\"Check\" size={24} className=\"text-green-600\" />\n              </div>\n            </div>\n\n            <h2 className=\"text-lg sm:text-xl font-bold text-gray-800 mb-2\">\n              üéâ Booking Confirmed!\n            </h2>\n            <p className=\"text-sm text-gray-600 mb-4\">\n              Your parking slot has been successfully booked\n            </p>\n\n            <div className=\"bg-gray-50 rounded-lg p-3 mb-4\">\n              <p className=\"text-sm text-gray-600 mb-1\">Booking ID</p>\n              <p className=\"font-mono font-semibold text-gray-800\">{bookingId}</p>\n            </div>\n\n            <p className=\"text-gray-600 text-sm mb-6\">\n              Redirecting to your bookings dashboard...\n            </p>\n\n            <button\n              onClick={() => {\n                setShowSuccessPopup(false);\n                navigate('/my-bookings-dashboard', {\n                  state: {\n                    initialTab: 'active',\n                    newBookingId: bookingId\n                  }\n                });\n              }}\n              className=\"w-full bg-blue-600 text-white py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors\"\n            >\n              Go to My Bookings\n            </button>\n\n            <div className=\"mt-4 pt-4 border-t border-gray-200\">\n              <p className=\"text-xs text-gray-500\">\n                You will receive a confirmation email with your booking details and QR code for facility access.\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BookingConfirmationPayment;\n","size_bytes":19102},"src/pages/facility-details-floor-selection/index.jsx":{"content":"import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport GlobalSearchHeader from '../../components/ui/GlobalSearchHeader';\nimport BottomTabNavigation from '../../components/ui/BottomTabNavigation';\nimport BookingFloatingActions from '../../components/ui/BookingFloatingActions';\nimport BreadcrumbNavigation from './components/BreadcrumbNavigation';\nimport FacilityHero from './components/FacilityHero';\nimport FacilityTabs from './components/FacilityTabs';\nimport OverviewTab from './components/OverviewTab';\nimport FloorsTab from './components/FloorsTab';\nimport AmenitiesTab from './components/AmenitiesTab';\nimport ReviewsTab from './components/ReviewsTab';\n\nconst FacilityDetailsFloorSelection = () => {\n  const navigate = useNavigate();\n  const [activeTab, setActiveTab] = useState('overview');\n\n  // Mock facility data\n  const facility = {\n    id: 1,\n    name: \"Downtown Premium Parking\",\n    address: \"123 Business District, Downtown, NY 10001\",\n    rating: 4.6,\n    reviewCount: 248,\n    distance: \"0.3 miles away\",\n    isOpen: true,\n    totalSlots: 450,\n    availableSlots: 127,\n    hourlyRate: 8,\n    dailyRate: 45,\n    monthlyRate: 280,\n    weekdayHours: \"6:00 AM - 11:00 PM\",\n    weekendHours: \"7:00 AM - 10:00 PM\",\n    phone: \"+1 (555) 123-4567\",\n    email: \"info@downtownparking.com\",\n    website: \"www.downtownparking.com\",\n    hasEVCharging: true,\n    hasWifi: true,\n    hasValet: true,\n    isCovered: true,\n    hasMotionSensors: true,\n    hasAlarmSystem: true,\n    isWheelchairAccessible: true,\n    hasDisabledSpots: true,\n    hasElevator: true,\n    hasWideSpaces: true,\n    hasAudioAssistance: false,\n    hasVisualIndicators: true,\n    hasCarWash: true,\n    hasWaitingArea: true,\n    images: [\n      \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=800\",\n      \"https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800\",\n      \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=800\",\n      \"https://images.unsplash.com/photo-1590674899484-d5640e854abe?w=800\"\n    ],\n    floors: [\n      {\n        id: 1,\n        name: \"Ground Floor\",\n        totalSlots: 120,\n        availableSlots: 45,\n        slots: generateMockSlots(120, 'ground'),\n        rows: [\n          { id: 'A', name: 'A', total: 20, available: 8 },\n          { id: 'B', name: 'B', total: 20, available: 12 },\n          { id: 'C', name: 'C', total: 20, available: 6 },\n          { id: 'D', name: 'D', total: 20, available: 9 },\n          { id: 'E', name: 'E', total: 20, available: 5 },\n          { id: 'F', name: 'F', total: 20, available: 5 }\n        ],\n        hourlyProjection: [\n          { time: '9AM', availability: 85 },\n          { time: '11AM', availability: 65 },\n          { time: '1PM', availability: 45 },\n          { time: '3PM', availability: 55 },\n          { time: '5PM', availability: 25 },\n          { time: '7PM', availability: 70 }\n        ]\n      },\n      {\n        id: 2,\n        name: \"1st Floor\",\n        totalSlots: 110,\n        availableSlots: 32,\n        slots: generateMockSlots(110, '1st'),\n        rows: [\n          { id: 'A', name: 'A', total: 18, available: 5 },\n          { id: 'B', name: 'B', total: 18, available: 8 },\n          { id: 'C', name: 'C', total: 18, available: 4 },\n          { id: 'D', name: 'D', total: 18, available: 6 },\n          { id: 'E', name: 'E', total: 19, available: 5 },\n          { id: 'F', name: 'F', total: 19, available: 4 }\n        ],\n        hourlyProjection: [\n          { time: '9AM', availability: 75 },\n          { time: '11AM', availability: 55 },\n          { time: '1PM', availability: 35 },\n          { time: '3PM', availability: 45 },\n          { time: '5PM', availability: 15 },\n          { time: '7PM', availability: 60 }\n        ]\n      },\n      {\n        id: 3,\n        name: \"2nd Floor\",\n        totalSlots: 110,\n        availableSlots: 28,\n        slots: generateMockSlots(110, '2nd'),\n        rows: [\n          { id: 'A', name: 'A', total: 18, available: 4 },\n          { id: 'B', name: 'B', total: 18, available: 6 },\n          { id: 'C', name: 'C', total: 18, available: 3 },\n          { id: 'D', name: 'D', total: 18, available: 5 },\n          { id: 'E', name: 'E', total: 19, available: 5 },\n          { id: 'F', name: 'F', total: 19, available: 5 }\n        ],\n        hourlyProjection: [\n          { time: '9AM', availability: 70 },\n          { time: '11AM', availability: 50 },\n          { time: '1PM', availability: 30 },\n          { time: '3PM', availability: 40 },\n          { time: '5PM', availability: 10 },\n          { time: '7PM', availability: 55 }\n        ]\n      },\n      {\n        id: 4,\n        name: \"3rd Floor\",\n        totalSlots: 110,\n        availableSlots: 22,\n        slots: generateMockSlots(110, '3rd'),\n        rows: [\n          { id: 'A', name: 'A', total: 18, available: 3 },\n          { id: 'B', name: 'B', total: 18, available: 4 },\n          { id: 'C', name: 'C', total: 18, available: 2 },\n          { id: 'D', name: 'D', total: 18, available: 4 },\n          { id: 'E', name: 'E', total: 19, available: 4 },\n          { id: 'F', name: 'F', total: 19, available: 5 }\n        ],\n        hourlyProjection: [\n          { time: '9AM', availability: 65 },\n          { time: '11AM', availability: 45 },\n          { time: '1PM', availability: 25 },\n          { time: '3PM', availability: 35 },\n          { time: '5PM', availability: 5 },\n          { time: '7PM', availability: 50 }\n        ]\n      }\n    ]\n  };\n\n  // Generate mock slots for each floor\n  function generateMockSlots(count, floorPrefix) {\n    const slots = [];\n    const rows = ['A', 'B', 'C', 'D', 'E', 'F'];\n    const slotsPerRow = Math.ceil(count / rows?.length);\n    const statuses = ['available', 'reserved', 'maintenance'];\n    const vehicleTypes = ['car', 'bike', 'both'];\n\n    let slotId = 1;\n    rows?.forEach((row, rowIndex) => {\n      const rowSlotCount = rowIndex === rows?.length - 1 ? count - (slotsPerRow * rowIndex) : slotsPerRow;\n      \n      for (let i = 1; i <= rowSlotCount; i++) {\n        const randomStatus = statuses?.[Math.floor(Math.random() * statuses?.length)];\n        const randomVehicleType = vehicleTypes?.[Math.floor(Math.random() * vehicleTypes?.length)];\n        \n        // Adjust probabilities for more realistic distribution\n        let status;\n        const rand = Math.random();\n        if (rand < 0.4) status = 'available';\n        else if (rand < 0.85) status = 'reserved';\n        else status = 'maintenance';\n\n        slots?.push({\n          id: `${floorPrefix}-${row}${i}`,\n          row: row,\n          number: i,\n          status: status,\n          vehicleType: randomVehicleType,\n          floor: floorPrefix\n        });\n        slotId++;\n      }\n    });\n\n    return slots;\n  }\n\n  const handleBookNow = () => {\n    navigate('/slot-selection-booking');\n  };\n\n  const handleFloorSelect = (floor) => {\n    console.log('Selected floor:', floor);\n  };\n\n  const handleBookSlot = (slot) => {\n    navigate('/slot-selection-booking', { \n      state: { \n        selectedSlot: slot,\n        facility: facility \n      } \n    });\n  };\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'overview':\n        return <OverviewTab facility={facility} />;\n      case 'floors':\n        return (\n          <FloorsTab \n            facility={facility} \n            onFloorSelect={handleFloorSelect}\n            onBookSlot={handleBookSlot}\n          />\n        );\n      case 'amenities':\n        return <AmenitiesTab facility={facility} />;\n      case 'reviews':\n        return <ReviewsTab facility={facility} />;\n      default:\n        return <OverviewTab facility={facility} />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <GlobalSearchHeader />\n      <BreadcrumbNavigation facility={facility} />\n      \n      <main className=\"pb-20 lg:pb-6 lg:ml-64\">\n        <FacilityHero facility={facility} onBookNow={handleBookNow} />\n        \n        <FacilityTabs \n          facility={facility}\n          activeTab={activeTab}\n          onTabChange={setActiveTab}\n        >\n          {renderTabContent()}\n        </FacilityTabs>\n      </main>\n\n      <BottomTabNavigation />\n      <BookingFloatingActions />\n    </div>\n  );\n};\n\nexport default FacilityDetailsFloorSelection;","size_bytes":8267},"src/pages/home/index.jsx":{"content":"import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Icon from '../../components/AppIcon';\nimport Button from '../../components/ui/Button';\nimport BottomTabNavigation from '../../components/ui/BottomTabNavigation';\nimport GlobalSearchHeader from '../../components/ui/GlobalSearchHeader';\nimport { useTheme } from '../../contexts/ThemeContext';\n// Removed: import CitySelector from '../../components/ui/CitySelector';\n// Removed unused lucide-react imports - using Icon component instead\n\n// Mock data for parking areas by city\nconst cityParkingData = {\n  hyderabad: [\n    { id: 1, name: 'Gachibowli Arena', slots: 45, price: '‚Çπ8/hr', distance: '0.3 km' },\n    { id: 2, name: 'Hitech City Hub', slots: 12, price: '‚Çπ6/hr', distance: '0.7 km' },\n    { id: 3, name: 'Secunderabad Plaza', slots: 78, price: '‚Çπ10/hr', distance: '1.2 km' },\n    { id: 4, name: 'Kukatpally Center', slots: 156, price: '‚Çπ5/hr', distance: '1.8 km' },\n    { id: 5, name: 'Banjara Hills Parking', slots: 234, price: '‚Çπ15/hr', distance: '2.5 km' },\n    { id: 6, name: 'HITEX Exhibition Center', slots: 23, price: '‚Çπ4/hr', distance: '3.1 km' },\n    { id: 7, name: 'Lingampally Lot', slots: 50, price: '‚Çπ7/hr', distance: '3.5 km' },\n    { id: 8, name: 'Begumpet Parking', slots: 60, price: '‚Çπ9/hr', distance: '4.0 km' }\n  ],\n  bangalore: [\n    { id: 1, name: 'Koramangala Plaza', slots: 85, price: '‚Çπ12/hr', distance: '0.4 km', coordinates: { lat: 12.9352, lng: 77.6245 } },\n    { id: 2, name: 'Indiranagar Hub', slots: 67, price: '‚Çπ10/hr', distance: '0.8 km', coordinates: { lat: 12.9784, lng: 77.6408 } },\n    { id: 3, name: 'Whitefield Center', slots: 123, price: '‚Çπ8/hr', distance: '1.5 km', coordinates: { lat: 12.9698, lng: 77.7500 } },\n    { id: 4, name: 'Electronic City Mall', slots: 189, price: '‚Çπ6/hr', distance: '2.1 km', coordinates: { lat: 12.8456, lng: 77.6603 } },\n    { id: 5, name: 'BTM Layout Complex', slots: 98, price: '‚Çπ9/hr', distance: '1.7 km', coordinates: { lat: 12.9165, lng: 77.6101 } },\n    { id: 6, name: 'MG Road Station', slots: 45, price: '‚Çπ15/hr', distance: '2.8 km', coordinates: { lat: 12.9759, lng: 77.6039 } },\n    { id: 7, name: 'HSR Layout Center', slots: 76, price: '‚Çπ11/hr', distance: '2.3 km', coordinates: { lat: 12.9081, lng: 77.6476 } },\n    { id: 8, name: 'Marathahalli Junction', slots: 134, price: '‚Çπ7/hr', distance: '3.0 km', coordinates: { lat: 12.9591, lng: 77.6974 } }\n  ]\n};\n\nconst cityPopularPlaces = {\n  hyderabad: [\n    { name: 'Hitech City', rating: 4.5, spots: 150, price: 8 },\n    { name: 'Gachibowli', rating: 4.3, spots: 120, price: 6 },\n    { name: 'Madhapur', rating: 4.2, spots: 180, price: 10 },\n    { name: 'Jubilee Hills', rating: 4.6, spots: 90, price: 12 },\n    { name: 'Banjara Hills', rating: 4.4, spots: 200, price: 15 },\n    { name: 'Secunderabad', rating: 4.1, spots: 160, price: 7 },\n    { name: 'Begumpet', rating: 4.0, spots: 110, price: 9 },\n    { name: 'Kukatpally', rating: 4.3, spots: 140, price: 5 },\n    { name: 'Kondapur', rating: 4.2, spots: 130, price: 8 },\n    { name: 'Miyapur', rating: 4.1, spots: 100, price: 6 },\n    { name: 'Ameerpet', rating: 4.5, spots: 170, price: 11 },\n    { name: 'SR Nagar', rating: 4.0, spots: 95, price: 9 },\n    { name: 'Punjagutta', rating: 4.3, spots: 125, price: 10 },\n    { name: 'Somajiguda', rating: 4.4, spots: 145, price: 13 },\n    { name: 'Abids', rating: 3.9, spots: 80, price: 7 },\n    { name: 'Lakdikapul', rating: 4.1, spots: 105, price: 8 },\n    { name: 'Mehdipatnam', rating: 4.0, spots: 115, price: 6 },\n    { name: 'Tolichowki', rating: 4.2, spots: 135, price: 9 },\n    { name: 'Manikonda', rating: 4.3, spots: 155, price: 7 },\n    { name: 'Nanakramguda', rating: 4.1, spots: 120, price: 8 }\n  ],\n  bangalore: [\n    { name: 'Koramangala', rating: 4.6, spots: 180, price: 12 },\n    { name: 'Indiranagar', rating: 4.4, spots: 165, price: 10 },\n    { name: 'Whitefield', rating: 4.3, spots: 210, price: 8 },\n    { name: 'Electronic City', rating: 4.2, spots: 195, price: 6 },\n    { name: 'BTM Layout', rating: 4.1, spots: 145, price: 9 },\n    { name: 'Jayanagar', rating: 4.5, spots: 130, price: 11 },\n    { name: 'MG Road', rating: 4.7, spots: 85, price: 15 },\n    { name: 'HSR Layout', rating: 4.4, spots: 160, price: 11 },\n    { name: 'Marathahalli', rating: 4.2, spots: 175, price: 7 },\n    { name: 'Sarjapur Road', rating: 4.3, spots: 155, price: 8 },\n    { name: 'Banashankari', rating: 4.1, spots: 125, price: 7 },\n    { name: 'Rajajinagar', rating: 4.0, spots: 110, price: 8 },\n    { name: 'Malleshwaram', rating: 4.3, spots: 120, price: 9 },\n    { name: 'Basavanagudi', rating: 4.2, spots: 100, price: 8 },\n    { name: 'Commercial Street', rating: 4.4, spots: 75, price: 14 },\n    { name: 'Brigade Road', rating: 4.5, spots: 90, price: 13 },\n    { name: 'UB City Mall', rating: 4.6, spots: 65, price: 16 },\n    { name: 'Forum Mall', rating: 4.3, spots: 140, price: 10 },\n    { name: 'Phoenix MarketCity', rating: 4.4, spots: 220, price: 9 },\n    { name: 'Orion Mall', rating: 4.2, spots: 185, price: 8 }\n  ]\n};\n\nconst Home = () => {\n  const navigate = useNavigate();\n  const [user, setUser] = useState(null);\n\n  // Get bookings from localStorage or use mock data\n  const getBookingsFromStorage = () => {\n    const storedBookings = localStorage.getItem('userBookings');\n    if (storedBookings) {\n      return JSON.parse(storedBookings);\n    }\n    return [\n      {\n        id: 'BK001',\n        facility: {\n          id: 'fac-001',\n          name: 'Downtown Mall Parking',\n          address: '123 Main Street, Downtown',\n          location: { lat: 40.7128, lng: -74.0060 }\n        },\n        slotLocation: '2nd Floor B Row 15th Parking Slot',\n        vehicleType: 'Mahindra XUV700',\n        vehicleImage: 'https://images.pexels.com/photos/116675/pexels-photo-116675.jpeg',\n        startTime: new Date(Date.now() - 2 * 60 * 60 * 1000)?.toISOString(),\n        endTime: new Date(Date.now() + 2 * 60 * 60 * 1000)?.toISOString(),\n        duration: '4 Hours',\n        totalAmount: 25.00,\n        status: 'active',\n        receiptUrl: '#'\n      },\n      {\n        id: 'BK002',\n        facility: {\n          id: 'fac-002',\n          name: 'City Airport Terminal 1',\n          address: '456 Airport Blvd, Terminal 1',\n          location: { lat: 40.6892, lng: -74.1745 }\n        },\n        slotLocation: '1st Floor A Row 8th Parking Slot',\n        vehicleType: 'Honda Activa 6G',\n        vehicleImage: 'https://images.pexels.com/photos/2116475/pexels-photo-2116475.jpeg',\n        startTime: new Date(Date.now() + 24 * 60 * 60 * 1000)?.toISOString(),\n        endTime: new Date(Date.now() + 28 * 60 * 60 * 1000)?.toISOString(),\n        duration: '4 Hours',\n        totalAmount: 15.00,\n        status: 'upcoming',\n        receiptUrl: '#'\n      }\n    ];\n  };\n\n  const [selectedCity, setSelectedCity] = useState('hyderabad'); // Track selected city\n  const [selectedArea, setSelectedArea] = useState(null);\n  const [showAreaDetails, setShowAreaDetails] = useState(false);\n  const [bookingsData, setBookingsData] = useState(getBookingsFromStorage());\n  const [showProfileDropdown, setShowProfileDropdown] = useState(false);\n  const profileDropdownRef = useRef(null);\n  const { theme, toggleTheme } = useTheme();\n\n  useEffect(() => {\n    // Check if user is authenticated\n    const isAuthenticated = localStorage.getItem('isAuthenticated');\n    const userEmail = localStorage.getItem('userEmail');\n    const userName = localStorage.getItem('userName');\n\n    if (!isAuthenticated || !userEmail) {\n      navigate('/user-authentication');\n      return;\n    }\n\n    setUser({\n      email: userEmail,\n      name: userName || 'User'\n    });\n  }, [navigate]);\n\n  // Update bookings data in real-time\n  useEffect(() => {\n    const updateBookings = () => {\n      const latestBookings = getBookingsFromStorage();\n      setBookingsData(latestBookings);\n    };\n\n    // Check immediately\n    updateBookings();\n\n    // Listen for booking updates\n    const handleBookingUpdate = () => {\n      updateBookings();\n    };\n\n    // Set up event listeners for real-time updates\n    window.addEventListener('bookingUpdate', handleBookingUpdate);\n    window.addEventListener('storage', handleBookingUpdate);\n\n    // Check for booking updates every 2 seconds\n    const interval = setInterval(updateBookings, 2000);\n\n    return () => {\n      clearInterval(interval);\n      window.removeEventListener('bookingUpdate', handleBookingUpdate);\n      window.removeEventListener('storage', handleBookingUpdate);\n    };\n  }, []);\n\n  const handleLogout = () => {\n    localStorage.removeItem('isAuthenticated');\n    localStorage.removeItem('userEmail');\n    localStorage.removeItem('userName');\n    localStorage.removeItem('userVehicle');\n    localStorage.removeItem('tempPassword');\n    navigate('/user-authentication');\n  };\n\n  const handleCityChange = (cityValue) => {\n    setSelectedCity(cityValue);\n  };\n\n  const handleAreaSelect = (area) => {\n    setSelectedArea(area);\n    setShowAreaDetails(true);\n  };\n\n  const handleQuickBook = (area) => {\n    navigate('/location-search-map', {\n      state: {\n        selectedArea: area,\n        quickBooking: true\n      }\n    });\n  };\n\n  const handlePlaceClick = (placeName) => {\n    // Navigate to slot selection with the selected place\n    // Create a facility info object for proper navigation\n    const baseCoords = selectedCity === 'hyderabad' ? \n      { lat: 17.3850, lng: 78.4867 } : \n      { lat: 12.9716, lng: 77.5946 };\n\n    const facilityInfo = {\n      id: Date.now(),\n      name: `${placeName} Parking Complex`,\n      address: `${placeName}, ${selectedCity === 'hyderabad' ? 'Hyderabad' : 'Bangalore'}`,\n      lat: baseCoords.lat + (Math.random() - 0.5) * 0.1,\n      lng: baseCoords.lng + (Math.random() - 0.5) * 0.1,\n      location: {\n        lat: baseCoords.lat + (Math.random() - 0.5) * 0.1,\n        lng: baseCoords.lng + (Math.random() - 0.5) * 0.1\n      },\n      rating: 4.2,\n      reviews: 150,\n      totalSlots: 200\n    };\n\n    console.log('Navigating with facility info:', facilityInfo); // Debug log\n\n    navigate('/slot-selection-booking', {\n      state: {\n        facilityInfo: facilityInfo\n      }\n    });\n  };\n\n  // Get current city data\n  const currentParkingAreas = cityParkingData[selectedCity] || cityParkingData.hyderabad;\n  const currentPopularPlaces = cityPopularPlaces[selectedCity] || cityPopularPlaces.hyderabad;\n  const cityDisplayName = selectedCity === 'hyderabad' ? 'Hyderabad' : 'Bangalore';\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Icon name=\"Loader\" size={32} className=\"animate-spin text-primary mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background pb-16 sm:pb-20 lg:pb-4\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border sticky top-0 z-40\">\n        <div className=\"px-3 sm:px-4 md:px-6 h-14 sm:h-16 flex items-center\">\n          <div className=\"flex items-center justify-between w-full\">\n            <div className=\"min-w-0 flex-1\">\n              <h1 className=\"text-sm sm:text-base md:text-lg font-bold text-foreground truncate\">ParkSlot Pro</h1>\n              <p className=\"text-xs sm:text-sm text-muted-foreground truncate\">Find parking instantly</p>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              {/* Theme Toggle */}\n              <button \n                onClick={toggleTheme}\n                className=\"relative p-2 hover:bg-muted rounded-lg transition-colors group\"\n                title={theme === 'light' ? 'Switch to dark theme' : 'Switch to light theme'}\n              >\n                <Icon \n                  name={theme === 'light' ? 'Sun' : 'Moon'} \n                  size={20} \n                  className=\"text-muted-foreground group-hover:text-foreground transition-colors\" \n                />\n              </button>\n\n              {/* Profile Dropdown */}\n              <div className=\"relative\" ref={profileDropdownRef}>\n                <button\n                  onClick={() => setShowProfileDropdown(!showProfileDropdown)}\n                  className=\"flex items-center gap-2 hover:bg-muted rounded-lg transition-colors p-1.5\"\n                >\n                  <div className=\"w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center\">\n                    <Icon name=\"User\" size={16} />\n                  </div>\n                  <span className=\"text-sm font-medium text-foreground hidden sm:block\">Profile</span>\n                  <Icon name=\"ChevronDown\" size={16} className=\"text-muted-foreground hidden sm:block\" />\n                </button>\n\n                {/* Profile Dropdown Menu */}\n                {showProfileDropdown && (\n                  <div className=\"absolute right-0 top-full mt-2 w-48 bg-card border border-border rounded-lg shadow-lg z-50\">\n                    <div className=\"p-3 border-b border-border\">\n                      <p className=\"text-sm font-medium text-foreground\">{user?.name}</p>\n                      <p className=\"text-xs text-muted-foreground\">{user?.email}</p>\n                    </div>\n                    <div className=\"p-1\">\n                      <button\n                        onClick={() => {\n                          setShowProfileDropdown(false);\n                          navigate('/profile');\n                        }}\n                        className=\"w-full flex items-center gap-2 px-3 py-2 text-sm text-foreground hover:bg-muted rounded-md transition-colors\"\n                      >\n                        <Icon name=\"User\" size={16} />\n                        View Profile\n                      </button>\n                      <button\n                        onClick={() => {\n                          setShowProfileDropdown(false);\n                          navigate('/profile');\n                        }}\n                        className=\"w-full flex items-center gap-2 px-3 py-2 text-sm text-foreground hover:bg-muted rounded-md transition-colors\"\n                      >\n                        <Icon name=\"Settings\" size={16} />\n                        Settings\n                      </button>\n                      <div className=\"border-t border-border my-1\"></div>\n                      <button\n                        onClick={() => {\n                          setShowProfileDropdown(false);\n                          handleLogout();\n                        }}\n                        className=\"w-full flex items-center gap-2 px-3 py-2 text-sm text-destructive hover:bg-destructive/10 rounded-md transition-colors\"\n                      >\n                        <Icon name=\"LogOut\" size={16} />\n                        Logout\n                      </button>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"flex flex-col lg:flex-row h-[calc(100vh-80px)]\">\n        {/* Desktop Sidebar */}\n        <div className=\"hidden lg:block w-80 xl:w-96 border-r border-border bg-card overflow-hidden\">\n          <div className=\"h-full flex flex-col\">\n            {/* Welcome Section */}\n            <div className=\"flex-shrink-0 p-4 xl:p-6 border-b border-border\">\n              <div className=\"text-center\">\n                <div className=\"w-12 h-12 xl:w-16 xl:h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-3 xl:mb-4\">\n                  <Icon name=\"User\" size={24} className=\"xl:w-8 xl:h-8 text-primary\" />\n                </div>\n                <h2 className=\"text-lg xl:text-xl font-bold text-foreground mb-2\">Welcome back, {user.name}!</h2>\n                <p className=\"text-muted-foreground text-sm\">Ready to find your perfect parking spot?</p>\n              </div>\n            </div>\n\n            {/* Quick Stats */}\n            <div className=\"flex-shrink-0 p-4 xl:p-6 border-b border-border\">\n              <h3 className=\"font-medium text-foreground mb-3 xl:mb-4\">Quick Stats</h3>\n              <div className=\"grid grid-cols-2 gap-3 xl:gap-4\">\n                <button\n                  onClick={() => navigate('/my-bookings-dashboard', {\n                    state: { initialTab: 'active' }\n                  })}\n                  className=\"card-container text-center p-2 sm:p-3 bg-muted rounded-lg hover:bg-muted/80 transition-colors cursor-pointer min-h-[80px] flex flex-col justify-center\"\n                >\n                  <div className=\"responsive-text-xl font-bold text-primary truncate\">\n                    {bookingsData?.filter(b => b?.status === 'active')?.length || 0}\n                  </div>\n                  <div className=\"responsive-text-xs text-muted-foreground truncate\">Active Bookings</div>\n                </button>\n                <button\n                  onClick={() => navigate('/my-bookings-dashboard', {\n                    state: { initialTab: 'all' }\n                  })}\n                  className=\"card-container text-center p-2 sm:p-3 bg-muted rounded-lg hover:bg-muted/80 transition-colors cursor-pointer min-h-[80px] flex flex-col justify-center\"\n                >\n                  <div className=\"responsive-text-xl font-bold text-success truncate\">\n                    {bookingsData?.length || 0}\n                  </div>\n                  <div className=\"responsive-text-xs text-muted-foreground truncate\">Total Bookings</div>\n                </button>\n              </div>\n            </div>\n\n            {/* My Bookings */}\n            <div className=\"flex-1 p-4 xl:p-6 overflow-y-auto\">\n              <div className=\"flex items-center justify-between mb-3 xl:mb-4\">\n                <h3 className=\"font-medium text-foreground\">My Bookings</h3>\n                <button\n                  onClick={() => navigate('/my-bookings-dashboard')}\n                  className=\"text-xs text-primary hover:text-primary/80 transition-colors\"\n                >\n                  View All\n                </button>\n              </div>\n              <div className=\"space-y-2 xl:space-y-3\">\n                {bookingsData?.slice(0, 3)?.map((booking) => (\n                  <button\n                    key={booking?.id}\n                    onClick={() => navigate('/my-bookings-dashboard')}\n                    className=\"w-full text-left p-3 bg-muted/50 rounded-lg hover:bg-muted transition-colors group\"\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      <div className={`w-2 h-2 rounded-full mt-2 flex-shrink-0 ${\n                        booking?.status === 'active' ? 'bg-success' :\n                        booking?.status === 'upcoming' ? 'bg-warning' :\n                        'bg-muted-foreground'\n                      }`}></div>\n                      <div className=\"card-content\">\n                        <p className=\"responsive-text-sm font-medium text-foreground truncate group-hover:text-primary transition-colors\">\n                          {booking?.facility?.name}\n                        </p>\n                        <p className=\"responsive-text-xs text-muted-foreground truncate\">\n                          {booking?.slotLocation} ‚Ä¢ {booking?.vehicleType}\n                          {booking?.actualVehicleType && ` (${booking.actualVehicleType === 'two-wheeler' ? 'Two-wheeler' : 'Four-wheeler'})`}\n                        </p>\n                        <p className=\"responsive-text-xs text-muted-foreground truncate\">\n                          {booking?.status === 'active' ? 'Active now' :\n                           booking?.status === 'upcoming' ? 'Upcoming' :\n                           'Completed'} ‚Ä¢ ${booking?.totalAmount}\n                        </p>\n                      </div>\n                    </div>\n                  </button>\n                )) || (\n                  <div className=\"text-center py-6 xl:py-8\">\n                    <Icon name=\"Calendar\" size={40} className=\"xl:w-12 xl:h-12 text-muted-foreground mx-auto mb-3 xl:mb-4\" />\n                    <p className=\"text-muted-foreground text-sm\">No bookings yet</p>\n                    <p className=\"text-muted-foreground text-xs\">Start booking to see your reservations here</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content Area */}\n        <div className=\"flex-1 px-3 sm:px-4 md:px-6 py-4 sm:py-6 space-y-4 sm:space-y-6 overflow-y-auto\">\n          {/* Welcome Message */}\n          <div className=\"flex flex-col sm:flex-row sm:items-start sm:justify-between gap-4\">\n            <div className=\"space-y-2 flex-1\">\n              <h1 className=\"text-lg sm:text-xl md:text-2xl lg:text-3xl font-bold text-foreground\">Welcome to ParkSlot Pro</h1>\n              <p className=\"text-sm sm:text-base text-muted-foreground\">Your smart parking solution starts here</p>\n            </div>\n\n            {/* City Selector */}\n            <div className=\"flex-shrink-0\">\n              <div className=\"bg-card border border-border rounded-lg p-4 min-w-[200px]\">\n                <h3 className=\"text-sm font-medium text-foreground mb-3\">Select City</h3>\n                <select\n                  value={selectedCity}\n                  onChange={(e) => handleCityChange(e.target.value)}\n                  className=\"w-full bg-white border border-gray-300 rounded-md py-2 px-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm\"\n                >\n                  <option value=\"hyderabad\">Hyderabad</option>\n                  <option value=\"bangalore\">Bangalore</option>\n                </select>\n              </div>\n            </div>\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6\">\n            {/* Find Parking */}\n            <button\n              onClick={() => navigate('/location-search-map')}\n              className=\"card-container group bg-card border border-border rounded-lg p-4 md:p-6 hover:shadow-md transition-all duration-200 hover:bg-card/80 focus-ring text-left w-full\"\n            >\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-10 h-10 md:w-12 md:h-12 bg-primary/10 rounded-lg flex items-center justify-center group-hover:bg-primary/20 transition-colors flex-shrink-0\">\n                  <Icon name=\"Search\" size={20} className=\"md:w-6 md:h-6 text-primary\" />\n                </div>\n                <div className=\"min-w-0 flex-1\">\n                  <h3 className=\"text-base md:text-lg font-semibold text-foreground group-hover:text-primary transition-colors truncate\">Find Parking</h3>\n                  <p className=\"text-sm text-muted-foreground truncate\">Search for available parking spots</p>\n                </div>\n              </div>\n            </button>\n\n            {/* Quick Book */}\n            <button\n              onClick={() => navigate('/slot-selection-booking')}\n              className=\"card-container group bg-card border border-border rounded-lg p-4 md:p-6 hover:shadow-md transition-all duration-200 hover:bg-card/80 focus-ring text-left w-full\"\n            >\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-10 h-10 md:w-12 md:h-12 bg-warning/10 rounded-lg flex items-center justify-center group-hover:bg-warning/20 transition-colors flex-shrink-0\">\n                  <Icon name=\"Clock\" size={20} className=\"md:w-6 md:h-6 text-warning\" />\n                </div>\n                <div className=\"min-w-0 flex-1\">\n                  <h3 className=\"text-base md:text-lg font-semibold text-foreground group-hover:text-warning transition-colors truncate\">Quick Book</h3>\n                  <p className=\"text-sm text-muted-foreground truncate\">Book a spot in your favorite location</p>\n                </div>\n              </div>\n            </button>\n          </div>\n\n          {/* Nearby Parking Areas */}\n          <div className=\"bg-card rounded-lg sm:rounded-xl shadow-lg border border-border p-3 sm:p-4\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h3 className=\"text-base sm:text-lg font-semibold text-foreground\">Nearby Parking Locations</h3>\n              <button\n                onClick={() => navigate('/location-search-map')}\n                className=\"text-xs text-primary hover:text-primary/80 transition-colors\"\n              >\n                View All\n              </button>\n            </div>\n            <div className=\"space-y-2 sm:space-y-3\">\n              {currentParkingAreas?.slice(0, 8)?.map((area) => (\n                <button\n                  key={area.id}\n                  onClick={() => handlePlaceClick(area.name)}\n                  className=\"w-full text-left p-3 bg-muted rounded-lg hover:bg-muted/80 transition-colors border border-transparent hover:border-primary/20\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                      <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0\">\n                        <Icon name=\"MapPin\" size={16} className=\"text-primary\" />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <h4 className=\"text-sm font-medium text-foreground truncate\">{area.name}</h4>\n                        <p className=\"text-xs text-muted-foreground truncate\">{area.distance} away</p>\n                      </div>\n                    </div>\n                    <div className=\"text-right flex-shrink-0\">\n                      <div className=\"text-sm font-semibold text-success\">{area.slots} slots</div>\n                      <div className=\"text-sm font-semibold text-foreground\">{area.price}</div>\n                    </div>\n                  </div>\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Popular Places */}\n          <div className=\"bg-card rounded-lg sm:rounded-xl shadow-lg border border-border p-3 sm:p-4\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h3 className=\"text-base sm:text-lg font-semibold text-foreground\">Popular Places in {cityDisplayName}</h3>\n              <button\n                onClick={() => navigate('/location-search-map')}\n                className=\"text-xs text-primary hover:text-primary/80 transition-colors\"\n              >\n                View All\n              </button>\n            </div>\n            {/* Mobile: Single column layout */}\n            <div className=\"block sm:hidden space-y-2 max-h-[300px] overflow-y-auto overscroll-y-contain\" style={{WebkitOverflowScrolling: \"touch\"}}>\n              {currentPopularPlaces?.slice(0, 10)?.map((place, index) => (\n                <button\n                  key={`${place.name}-${index}`}\n                  onClick={() => handlePlaceClick(place.name)}\n                  className=\"w-full text-left p-3 bg-muted rounded-lg hover:bg-muted/80 transition-colors border border-transparent hover:border-primary/20\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                      <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0\">\n                        <Icon name=\"MapPin\" size={16} className=\"text-primary\" />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <h4 className=\"text-sm font-medium text-foreground truncate\">{place.name}</h4>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <div className=\"flex items-center gap-1\">\n                            <Icon name=\"Star\" size={12} className=\"text-yellow-500\" />\n                            <span className=\"text-xs text-muted-foreground\">{place.rating}</span>\n                          </div>\n                          <span className=\"text-xs text-muted-foreground\">‚Ä¢</span>\n                          <span className=\"text-xs text-success font-medium\">{place.spots} spots</span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right flex-shrink-0\">\n                      <div className=\"text-sm font-semibold text-primary\">‚Çπ{place.price}/hr</div>\n                    </div>\n                  </div>\n                </button>\n              ))}\n            </div>\n            {/* Desktop: Grid layout */}\n            <div className=\"hidden sm:grid sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-2 sm:gap-3 max-h-[300px] overflow-y-auto overscroll-y-contain\" style={{WebkitOverflowScrolling: \"touch\"}}>\n              {currentPopularPlaces?.slice(0, 20)?.map((place, index) => (\n                <button\n                  key={`${place.name}-${index}`}\n                  onClick={() => handlePlaceClick(place.name)}\n                  className=\"card-container text-left p-2 bg-muted rounded-lg min-h-[70px] flex items-center gap-2 hover:bg-muted/80 transition-colors\"\n                >\n                  <div className=\"w-6 h-6 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0\">\n                    <Icon name=\"MapPin\" size={12} className=\"text-primary\" />\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <h4 className=\"text-xs font-medium text-foreground truncate\">{place.name}</h4>\n                    <div className=\"flex items-center gap-1 mt-1\">\n                      <span className=\"text-xs text-success font-medium\">\n                        {place.spots}\n                      </span>\n                      <span className=\"text-xs text-primary\">\n                        ‚Çπ{place.price}/hr\n                      </span>\n                    </div>\n                  </div>\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        \n      </div>\n\n      {/* Bottom Navigation */}\n      <BottomTabNavigation />\n\n      {/* Area Details Modal */}\n      {showAreaDetails && selectedArea && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-card rounded-2xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-y-auto p-4 sm:p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-xl font-semibold text-foreground\">{selectedArea.name}</h3>\n              <button\n                onClick={() => setShowAreaDetails(false)}\n                className=\"p-2 hover:bg-muted rounded-lg transition-colors\"\n              >\n                <Icon name=\"X\" size={20} className=\"text-muted-foreground\" />\n              </button>\n            </div>\n\n            <div className=\"space-y-3 sm:space-y-4 mb-6\">\n              <div className=\"card-container flex items-center justify-between p-2 sm:p-3 bg-muted rounded-lg\">\n                <span className=\"responsive-text-sm text-muted-foreground truncate\">Available Slots</span>\n                <span className=\"responsive-text-sm font-semibold text-foreground flex-shrink-0 ml-2\">{selectedArea.slots}</span>\n              </div>\n              <div className=\"card-container flex items-center justify-between p-2 sm:p-3 bg-muted rounded-lg\">\n                <span className=\"responsive-text-sm text-muted-foreground truncate\">Price</span>\n                <span className=\"responsive-text-sm font-semibold text-foreground flex-shrink-0 ml-2\">{selectedArea.price}</span>\n              </div>\n              <div className=\"card-container flex items-center justify-between p-2 sm:p-3 bg-muted rounded-lg\">\n                <span className=\"responsive-text-sm text-muted-foreground truncate\">Distance</span>\n                <span className=\"responsive-text-sm font-semibold text-foreground flex-shrink-0 ml-2\">{selectedArea.distance}</span>\n              </div>\n            </div>\n\n            <div className=\"flex gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowAreaDetails(false)}\n                className=\"flex-1\"\n              >\n                Close\n              </Button>\n              <Button\n                onClick={() => {\n                  setShowAreaDetails(false);\n                  navigate('/slot-selection-booking');\n                }}\n                className=\"flex-1\"\n              >\n                Book Now\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Home;","size_bytes":32933},"src/pages/location-search-map/index.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport GlobalSearchHeader from '../../components/ui/GlobalSearchHeader';\nimport BottomTabNavigation from '../../components/ui/BottomTabNavigation';\nimport BookingFloatingActions from '../../components/ui/BookingFloatingActions';\nimport SearchFilters from './components/SearchFilters';\nimport FacilityList from './components/FacilityList';\n\nconst LocationSearchMap = () => {\n  const location = useLocation();\n  const [selectedFacility, setSelectedFacility] = useState(null);\n  const [userLocation, setUserLocation] = useState(null);\n\n  // Import the cities array to get the full city object with areas\n  const cities = [\n    {\n      value: 'hyderabad',\n      label: 'Hyderabad',\n      coordinates: { lat: 17.3850, lng: 78.4867 },\n      icon: 'MapPin',\n      areas: [\n        { name: 'Hitech City', coordinates: { lat: 17.4435, lng: 78.3772 } },\n        { name: 'Gachibowli', coordinates: { lat: 17.4400, lng: 78.3482 } },\n        { name: 'Madhapur', coordinates: { lat: 17.4481, lng: 78.3915 } },\n        { name: 'Jubilee Hills', coordinates: { lat: 17.4305, lng: 78.4059 } },\n        { name: 'Banjara Hills', coordinates: { lat: 17.4123, lng: 78.4439 } },\n        { name: 'Secunderabad', coordinates: { lat: 17.5040, lng: 78.5440 } },\n        { name: 'Begumpet', coordinates: { lat: 17.4520, lng: 78.4636 } },\n        { name: 'Kukatpally', coordinates: { lat: 17.4840, lng: 78.4071 } },\n        { name: 'Kondapur', coordinates: { lat: 17.4615, lng: 78.3677 } },\n        { name: 'Miyapur', coordinates: { lat: 17.4953, lng: 78.3584 } },\n        { name: 'Ameerpet', coordinates: { lat: 17.4369, lng: 78.4482 } },\n        { name: 'Somajiguda', coordinates: { lat: 17.4195, lng: 78.4547 } },\n        { name: 'Abids', coordinates: { lat: 17.3907, lng: 78.4865 } },\n        { name: 'Koti', coordinates: { lat: 17.3748, lng: 78.4849 } },\n        { name: 'Dilsukhnagar', coordinates: { lat: 17.3688, lng: 78.5246 } },\n        { name: 'LB Nagar', coordinates: { lat: 17.3421, lng: 78.5515 } },\n        { name: 'Uppal', coordinates: { lat: 17.4062, lng: 78.5562 } },\n        { name: 'Kompally', coordinates: { lat: 17.5454, lng: 78.4897 } },\n        { name: 'Nizampet', coordinates: { lat: 17.5063, lng: 78.3959 } },\n        { name: 'Bachupally', coordinates: { lat: 17.5373, lng: 78.3664 } },\n        { name: 'Madinaguda', coordinates: { lat: 17.4984, lng: 78.3896 } },\n        { name: 'Chandanagar', coordinates: { lat: 17.4953, lng: 78.3424 } },\n        { name: 'Charminar', coordinates: { lat: 17.3616, lng: 78.4747 } },\n        { name: 'Tolichowki', coordinates: { lat: 17.4108, lng: 78.4167 } },\n        { name: 'Mehdipatnam', coordinates: { lat: 17.4048, lng: 78.4343 } },\n        { name: 'Lakdikapul', coordinates: { lat: 17.4072, lng: 78.4620 } },\n        { name: 'Nampally', coordinates: { lat: 17.3830, lng: 78.4731 } },\n        { name: 'Malakpet', coordinates: { lat: 17.3831, lng: 78.5073 } },\n        { name: 'Tarnaka', coordinates: { lat: 17.4203, lng: 78.5382 } },\n        { name: 'Habsiguda', coordinates: { lat: 17.4286, lng: 78.5489 } }\n      ]\n    },\n    {\n      value: 'bengaluru',\n      label: 'Bengaluru',\n      coordinates: { lat: 12.9716, lng: 77.5946 },\n      icon: 'MapPin',\n      areas: [\n        { name: 'Koramangala', coordinates: { lat: 12.9352, lng: 77.6245 } },\n        { name: 'Indiranagar', coordinates: { lat: 12.9784, lng: 77.6408 } },\n        { name: 'Whitefield', coordinates: { lat: 12.9698, lng: 77.7500 } },\n        { name: 'Electronic City', coordinates: { lat: 12.8456, lng: 77.6603 } },\n        { name: 'BTM Layout', coordinates: { lat: 12.9165, lng: 77.6101 } },\n        { name: 'Jayanagar', coordinates: { lat: 12.9237, lng: 77.5828 } },\n        { name: 'MG Road', coordinates: { lat: 12.9759, lng: 77.6039 } },\n        { name: 'HSR Layout', coordinates: { lat: 12.9081, lng: 77.6476 } },\n        { name: 'Marathahalli', coordinates: { lat: 12.9591, lng: 77.6974 } },\n        { name: 'Sarjapur Road', coordinates: { lat: 12.9010, lng: 77.6874 } },\n        { name: 'Banashankari', coordinates: { lat: 12.9250, lng: 77.5678 } },\n        { name: 'Rajajinagar', coordinates: { lat: 12.9916, lng: 77.5554 } },\n        { name: 'Malleshwaram', coordinates: { lat: 12.9940, lng: 77.5746 } },\n        { name: 'Basavanagudi', coordinates: { lat: 12.9420, lng: 77.5737 } },\n        { name: 'JP Nagar', coordinates: { lat: 12.9082, lng: 77.5854 } },\n        { name: 'Bannerghatta Road', coordinates: { lat: 12.8886, lng: 77.6006 } },\n        { name: 'Silk Board', coordinates: { lat: 12.9178, lng: 77.6226 } },\n        { name: 'Domlur', coordinates: { lat: 12.9609, lng: 77.6389 } },\n        { name: 'CV Raman Nagar', coordinates: { lat: 12.9786, lng: 77.6630 } },\n        { name: 'Banaswadi', coordinates: { lat: 13.0116, lng: 77.6533 } },\n        { name: 'Hebbal', coordinates: { lat: 13.0358, lng: 77.5970 } },\n        { name: 'Yeshwantpur', coordinates: { lat: 13.0284, lng: 77.5547 } },\n        { name: 'Peenya', coordinates: { lat: 13.0297, lng: 77.5208 } },\n        { name: 'Vijayanagar', coordinates: { lat: 12.9716, lng: 77.5370 } },\n        { name: 'Cunningham Road', coordinates: { lat: 12.9876, lng: 77.5934 } },\n        { name: 'Commercial Street', coordinates: { lat: 12.9837, lng: 77.6082 } },\n        { name: 'Brigade Road', coordinates: { lat: 12.9734, lng: 77.6079 } },\n        { name: 'Richmond Road', coordinates: { lat: 12.9590, lng: 77.6008 } },\n        { name: 'Residency Road', coordinates: { lat: 12.9658, lng: 77.6067 } },\n        { name: 'Ulsoor', coordinates: { lat: 12.9810, lng: 77.6207 } }\n      ]\n    }\n  ];\n\n  const [selectedCity, setSelectedCity] = useState(cities[0]);\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [filters, setFilters] = useState({\n    vehicleType: 'all',\n    priceRange: 'all',\n    distance: '5',\n    amenities: []\n  });\n\n  // Generate realistic parking facilities based on selected city (show only 8 initially)\n  const generateCityFacilities = (city, showAll = false) => {\n    if (!city?.areas) return [];\n\n    const facilityTypes = ['Mall', 'Plaza', 'Tower', 'Complex', 'Center', 'Hub', 'Park', 'Gate'];\n    const amenityOptions = ['covered', 'security', 'ev_charging', 'valet', 'handicap'];\n\n    const areasToShow = showAll ? city.areas : city.areas.slice(0, 8);\n\n    return areasToShow.map((area, index) => ({\n      id: index + 1,\n      name: `${area.name} ${facilityTypes[index % facilityTypes.length]}`,\n      address: `${area.name}, ${city.label}`,\n      image: `https://images.unsplash.com/photo-${1506905925346 + index}?w=400&h=300&fit=crop`,\n      distance: Math.round((Math.random() * 4 + 0.5) * 10) / 10,\n      hourlyRate: Math.floor(Math.random() * 15) + 5,\n      originalRate: Math.floor(Math.random() * 10) + 20,\n      availableSlots: Math.floor(Math.random() * 200) + 10,\n      totalSlots: Math.floor(Math.random() * 300) + 50,\n      rating: Math.round((Math.random() * 2 + 3) * 10) / 10,\n      reviewCount: Math.floor(Math.random() * 500) + 50,\n      amenities: amenityOptions.slice(0, Math.floor(Math.random() * 3) + 1),\n      discount: Math.random() > 0.7 ? Math.floor(Math.random() * 25) + 10 : null,\n      coordinates: {\n        lat: area.coordinates.lat + (Math.random() - 0.5) * 0.01,\n        lng: area.coordinates.lng + (Math.random() - 0.5) * 0.01\n      },\n      area: area.name\n    }));\n  };\n\n  // Helper function to generate facilities for a specific area\n  const generateAreaSpecificFacilities = (area, city) => {\n    const facilityTypes = ['Mall', 'Plaza', 'Tower', 'Complex', 'Center', 'Hub', 'Park', 'Gate'];\n    const amenityOptions = ['covered', 'security', 'ev_charging', 'valet', 'handicap'];\n\n    return [{\n      id: Math.floor(Math.random() * 1000),\n      name: `${area.name} ${facilityTypes[Math.floor(Math.random() * facilityTypes.length)]}`,\n      address: `${area.name}, ${city.label}`,\n      image: `https://images.unsplash.com/photo-${1506905925346 + Math.floor(Math.random() * 10)}?w=400&h=300&fit=crop`,\n      distance: Math.round((Math.random() * 4 + 0.5) * 10) / 10,\n      hourlyRate: Math.floor(Math.random() * 15) + 5,\n      originalRate: Math.floor(Math.random() * 10) + 20,\n      availableSlots: Math.floor(Math.random() * 200) + 10,\n      totalSlots: Math.floor(Math.random() * 300) + 50,\n      rating: Math.round((Math.random() * 2 + 3) * 10) / 10,\n      reviewCount: Math.floor(Math.random() * 500) + 50,\n      amenities: amenityOptions.slice(0, Math.floor(Math.random() * 3) + 1),\n      discount: Math.random() > 0.7 ? Math.floor(Math.random() * 25) + 10 : null,\n      coordinates: {\n        lat: area.coordinates.lat + (Math.random() - 0.5) * 0.01,\n        lng: area.coordinates.lng + (Math.random() - 0.5) * 0.01\n      },\n      area: area.name\n    }];\n  };\n\n  const [facilities, setFacilities] = useState(() => generateCityFacilities(selectedCity));\n\n  // Initialize user location from navigation state or get current location\n  useEffect(() => {\n    if (location?.state?.userLocation) {\n      setUserLocation(location?.state?.userLocation);\n    } else if (location?.state?.searchNearby) {\n      // Auto-request location for nearby search\n      if (navigator.geolocation) {\n        navigator.geolocation?.getCurrentPosition(\n          (position) => {\n            setUserLocation({\n              lat: position?.coords?.latitude,\n              lng: position?.coords?.longitude\n            });\n          },\n          (error) => {\n            console.error('Location access denied:', error);\n          }\n        );\n      }\n    }\n  }, [location?.state]);\n\n  const handleLocationSearch = (query) => {\n    setLoading(true);\n\n    // Simulate search API call\n    setTimeout(() => {\n      if (typeof query === 'object' && query?.lat && query?.lng) {\n        // Location coordinates provided\n        setUserLocation(query);\n      } else {\n        // Text search - find matching area and generate facilities for that area\n        const searchTerm = query.toLowerCase();\n        const matchingArea = selectedCity?.areas?.find(area => \n          area.name.toLowerCase().includes(searchTerm)\n        );\n\n        if (matchingArea) {\n          // Generate facilities specifically for the searched area\n          const areaFacilities = generateAreaSpecificFacilities(matchingArea, selectedCity);\n          setFacilities(areaFacilities);\n          // Center map on the searched area\n          setUserLocation(matchingArea.coordinates);\n        } else {\n          // If no specific area found, search all areas and generate comprehensive results\n          const matchingAreas = selectedCity?.areas?.filter(area =>\n            area.name.toLowerCase().includes(searchTerm)\n          );\n\n          if (matchingAreas && matchingAreas.length > 0) {\n            // Generate facilities for all matching areas\n            const allMatchingFacilities = matchingAreas.flatMap(area => \n              generateAreaSpecificFacilities(area, selectedCity)\n            );\n            setFacilities(allMatchingFacilities);\n            // Center on first matching area\n            setUserLocation(matchingAreas[0].coordinates);\n          } else {\n            // Fallback: regenerate all facilities and filter by search term\n            const allFacilities = generateCityFacilities(selectedCity);\n            const searchResults = allFacilities.filter(facility =>\n              facility.name.toLowerCase().includes(searchTerm) ||\n              facility.address.toLowerCase().includes(searchTerm) ||\n              facility.area.toLowerCase().includes(searchTerm)\n            );\n            setFacilities(searchResults.length > 0 ? searchResults : allFacilities);\n          }\n        }\n\n        console.log('Searching for:', query);\n      }\n      setLoading(false);\n    }, 1000);\n  };\n\n  const handleFiltersChange = (newFilters) => {\n    setFilters(newFilters);\n    // Apply filters to facilities list\n  };\n\n  const handleFacilitySelect = (facility) => {\n    setSelectedFacility(facility);\n  };\n\n  const handleRefresh = async () => {\n    setLoading(true);\n    // Simulate refresh API call\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    setLoading(false);\n  };\n\n  const handleSortChange = (sortBy) => {\n    // Sorting is handled in FacilityList component\n    console.log('Sort by:', sortBy);\n  };\n\n  const handleCityChange = (city) => {\n    setSelectedCity(city);\n    setSelectedPlace(null); // Clear selected place when city changes\n    setUserLocation(null); // Clear user location when city changes\n    setFacilities(generateCityFacilities(city)); // Generate new facilities for selected city\n  };\n\n  const handlePlaceChange = (place) => {\n    setSelectedPlace(place);\n    if (place) {\n      // Generate facilities for the selected place\n      const areaFacilities = generateAreaSpecificFacilities(place, selectedCity);\n      setFacilities(areaFacilities);\n      // Center map on the selected place\n      setUserLocation(place.coordinates);\n    } else {\n      // Show all facilities for the city\n      setFacilities(generateCityFacilities(selectedCity));\n      setUserLocation(null);\n    }\n  };\n\n  const filteredFacilities = facilities?.filter(facility => {\n    // Apply filters\n    if (filters?.vehicleType !== 'all') {\n      // Vehicle type filtering logic would go here\n    }\n\n    if (filters?.priceRange !== 'all') {\n      const [min, max] = filters?.priceRange?.split('-')?.map(Number);\n      if (max) {\n        if (facility?.hourlyRate < min || facility?.hourlyRate > max) return false;\n      } else if (filters?.priceRange === '15+') {\n        if (facility?.hourlyRate < 15) return false;\n      }\n    }\n\n    if (filters?.distance) {\n      const maxDistance = parseFloat(filters?.distance);\n      if (facility?.distance > maxDistance) return false;\n    }\n\n    if (filters?.amenities && filters?.amenities?.length > 0) {\n      const hasRequiredAmenities = filters?.amenities?.every(amenity => \n        facility?.amenities?.includes(amenity)\n      );\n      if (!hasRequiredAmenities) return false;\n    }\n\n    return true;\n  });\n\n  return (\n    <div className=\"h-screen flex flex-col bg-background overflow-hidden\">\n      {/* Header */}\n      <div className=\"flex-shrink-0\">\n        <GlobalSearchHeader \n          selectedCity={selectedCity}\n          onCityChange={handleCityChange}\n          onLocationSearch={handleLocationSearch}\n        />\n      </div>\n\n      {/* Search Filters */}\n      <div className=\"border-b border-border flex-shrink-0\">\n        <SearchFilters\n          filters={filters}\n          onFiltersChange={handleFiltersChange}\n          onLocationSearch={handleLocationSearch}\n          className=\"border-0 rounded-none py-2\"\n        />\n      </div>\n\n      {/* Main Content - Full Width Facility List */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <div className=\"flex-1 overflow-hidden\">\n          <FacilityList\n            facilities={filteredFacilities}\n            loading={loading}\n            onRefresh={handleRefresh}\n            onSortChange={handleSortChange}\n            selectedCity={selectedCity}\n            selectedPlace={selectedPlace}\n            onPlaceChange={handlePlaceChange}\n          />\n        </div>\n      </div>\n\n      {/* Booking Floating Actions */}\n      <BookingFloatingActions />\n      {/* Bottom Tab Navigation */}\n      <BottomTabNavigation />\n    </div>\n  );\n};\n\nexport default LocationSearchMap;","size_bytes":15465},"src/pages/my-bookings-dashboard/index.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport BottomTabNavigation from '../../components/ui/BottomTabNavigation';\nimport BookingCard from './components/BookingCard';\nimport QuickBookingWidget from './components/QuickBookingWidget';\nimport BookingTabs from './components/BookingTabs';\nimport EmptyState from './components/EmptyState';\nimport SearchAndFilter from './components/SearchAndFilter';\nimport EmergencyContact from './components/EmergencyContact';\nimport ExtendTimeModal from './components/ExtendTimeModal';\nimport CancellationModal from '../../components/ui/CancellationModal';\nimport Icon from '../../components/AppIcon';\nimport Button from '../../components/ui/Button';\n\nconst MyBookingsDashboard = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [activeTab, setActiveTab] = useState(location?.state?.initialTab || 'active');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filters, setFilters] = useState({});\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [extendModalOpen, setExtendModalOpen] = useState(false);\n  const [selectedBookingForExtend, setSelectedBookingForExtend] = useState(null);\n  const [showCancellationModal, setShowCancellationModal] = useState(false);\n  const [selectedBookingForCancel, setSelectedBookingForCancel] = useState(null);\n  const [isCancelling, setIsCancelling] = useState(false);\n\n  // Get bookings from localStorage or use mock data\n  const getBookingsFromStorage = () => {\n    const storedBookings = localStorage.getItem('userBookings');\n    if (storedBookings) {\n      return JSON.parse(storedBookings);\n    }\n    return [\n      {\n        id: 'BK001',\n        facility: {\n          id: 'fac-001',\n          name: 'Hitech City Hub',\n          address: 'Financial District, Hitech City, Hyderabad',\n          location: { lat: 17.4435, lng: 78.3772 }\n        },\n        slotLocation: '1st Floor A Row 13th Parking Slot',\n        vehicleType: 'Honda Activa 6G',\n        vehicleImage: 'https://images.pexels.com/photos/2116475/pexels-photo-2116475.jpeg',\n        actualVehicleType: 'two-wheeler',\n        vehicleCategory: 'Scooter',\n        vehicle: {\n          name: 'Honda Activa 6G',\n          model: 'Activa 6G',\n          category: 'Scooter',\n          vehicleType: 'two-wheeler',\n          image: 'https://images.pexels.com/photos/2116475/pexels-photo-2116475.jpeg'\n        },\n        startTime: new Date(Date.now() - 1 * 60 * 60 * 1000)?.toISOString(),\n        endTime: new Date(Date.now() + 8 * 60 * 60 * 1000)?.toISOString(),\n        duration: '9 Hours',\n        totalAmount: 43.20,\n        status: 'active',\n        createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000)?.toISOString(),\n        receiptUrl: '#'\n      },\n      {\n        id: 'BK002',\n        facility: {\n          id: 'fac-002',\n          name: 'Gachibowli Arena',\n          address: 'IT Hub, Gachibowli, Hyderabad',\n          location: { lat: 17.4400, lng: 78.3482 }\n        },\n        slotLocation: '2nd Floor B Row 25th Parking Slot',\n        vehicleType: 'Maruti Swift Dzire',\n        vehicleImage: 'https://images.pexels.com/photos/112460/pexels-photo-112460.jpeg',\n        actualVehicleType: 'four-wheeler',\n        vehicleCategory: 'Sedan',\n        vehicle: {\n          name: 'Maruti Swift Dzire',\n          model: 'Swift Dzire',\n          category: 'Sedan',\n          vehicleType: 'four-wheeler',\n          image: 'https://images.pexels.com/photos/112460/pexels-photo-112460.jpeg'\n        },\n        startTime: new Date(Date.now() + 6 * 60 * 60 * 1000)?.toISOString(),\n        endTime: new Date(Date.now() + 10 * 60 * 60 * 1000)?.toISOString(),\n        duration: '4 Hours',\n        totalAmount: 28.50,\n        status: 'upcoming',\n        createdAt: new Date(Date.now() - 12 * 60 * 60 * 1000)?.toISOString(),\n        receiptUrl: '#'\n      },\n      {\n        id: 'BK011',\n        facility: {\n          id: 'fac-011',\n          name: 'Phoenix Mall Hyderabad',\n          address: 'Banjara Hills, Hyderabad',\n          location: { lat: 17.4123, lng: 78.4456 }\n        },\n        slotLocation: '3rd Floor C Row 18th Parking Slot',\n        vehicleType: 'Honda City',\n        vehicleImage: 'https://images.pexels.com/photos/112460/pexels-photo-112460.jpeg',\n        actualVehicleType: 'four-wheeler',\n        vehicleCategory: 'Sedan',\n        vehicle: {\n          name: 'Honda City',\n          model: 'City',\n          category: 'Sedan',\n          vehicleType: 'four-wheeler',\n          image: 'https://images.pexels.com/photos/112460/pexels-photo-112460.jpeg'\n        },\n        startTime: new Date(Date.now() + 12 * 60 * 60 * 1000)?.toISOString(),\n        endTime: new Date(Date.now() + 18 * 60 * 60 * 1000)?.toISOString(),\n        duration: '6 Hours',\n        totalAmount: 45.00,\n        status: 'upcoming',\n        createdAt: new Date(Date.now() - 6 * 60 * 60 * 1000)?.toISOString(),\n        receiptUrl: '#'\n      },\n      {\n        id: 'BK012',\n        facility: {\n          id: 'fac-012',\n          name: 'Inorbit Mall Hyderabad',\n          address: 'HITEC City, Madhapur, Hyderabad',\n          location: { lat: 17.4456, lng: 78.3731 }\n        },\n        slotLocation: 'Basement 1 A Row 12th Parking Slot',\n        vehicleType: 'Yamaha FZ',\n        vehicleImage: 'https://images.pexels.com/photos/2116475/pexels-photo-2116475.jpeg',\n        actualVehicleType: 'two-wheeler',\n        vehicleCategory: 'Sport Bike',\n        vehicle: {\n          name: 'Yamaha FZ',\n          model: 'FZ v3.0',\n          category: 'Sport Bike',\n          vehicleType: 'two-wheeler',\n          image: 'https://images.pexels.com/photos/2116475/pexels-photo-2116475.jpeg'\n        },\n        startTime: new Date(Date.now() + 24 * 60 * 60 * 1000)?.toISOString(),\n        endTime: new Date(Date.now() + 28 * 60 * 60 * 1000)?.toISOString(),\n        duration: '4 Hours',\n        totalAmount: 20.00,\n        status: 'upcoming',\n        createdAt: new Date(Date.now() - 3 * 60 * 60 * 1000)?.toISOString(),\n        receiptUrl: '#'\n      },\n      {\n        id: 'BK003',\n        facility: {\n          id: 'fac-003',\n          name: 'Grand Hotel Parking',\n          address: '789 Luxury Ave, Hotel District',\n          location: { lat: 40.7589, lng: -73.9851 }\n        },\n        slotLocation: 'Ground Floor Premium Section A5',\n        vehicleType: 'BMW X3',\n        vehicleImage: 'https://images.pexels.com/photos/170811/pexels-photo-170811.jpeg',\n        actualVehicleType: 'four-wheeler',\n        vehicleCategory: 'SUV',\n        vehicle: {\n          name: 'BMW X3',\n          model: 'X3',\n          category: 'Luxury SUV',\n          vehicleType: 'four-wheeler',\n          image: 'https://images.pexels.com/photos/170811/pexels-photo-170811.jpeg'\n        },\n        startTime: new Date(Date.now() - 72 * 60 * 60 * 1000)?.toISOString(),\n        endTime: new Date(Date.now() - 60 * 60 * 60 * 1000)?.toISOString(),\n        duration: '12 Hours',\n        totalAmount: 85.00,\n        status: 'completed',\n        rated: false,\n        createdAt: new Date(Date.now() - 96 * 60 * 60 * 1000)?.toISOString(),\n        receiptUrl: '#'\n      },\n      {\n        id: 'BK004',\n        facility: {\n          id: 'fac-004',\n          name: 'Airport Terminal 2 Parking',\n          address: '321 Airport Way, Terminal 2',\n          location: { lat: 40.6413, lng: -73.7781 }\n        },\n        slotLocation: '3rd Floor Long Stay C Row 45th',\n        vehicleType: 'Hyundai Creta',\n        vehicleImage: 'https://images.pexels.com/photos/116675/pexels-photo-116675.jpeg',\n        actualVehicleType: 'four-wheeler',\n        vehicleCategory: 'Compact SUV',\n        vehicle: {\n          name: 'Hyundai Creta',\n          model: 'Creta',\n          category: 'Compact SUV',\n          vehicleType: 'four-wheeler',\n          image: 'https://images.pexels.com/photos/116675/pexels-photo-116675.jpeg'\n        },\n        startTime: new Date(Date.now() + 48 * 60 * 60 * 1000)?.toISOString(),\n        endTime: new Date(Date.now() + 120 * 60 * 60 * 1000)?.toISOString(),\n        duration: '72 Hours',\n        totalAmount: 180.00,\n        status: 'upcoming',\n        createdAt: new Date(Date.now() - 6 * 60 * 60 * 1000)?.toISOString(),\n        receiptUrl: '#'\n      },\n      {\n        id: 'BK005',\n        facility: {\n          id: 'fac-005',\n          name: 'Metro Station Parking',\n          address: '654 Metro Plaza, Transport Hub',\n          location: { lat: 40.7306, lng: -73.9352 }\n        },\n        slotLocation: 'Level 1 Two Wheeler Zone T12',\n        vehicleType: 'Yamaha R15 V4',\n        vehicleImage: 'https://images.pexels.com/photos/2116475/pexels-photo-2116475.jpeg',\n        actualVehicleType: 'two-wheeler',\n        vehicleCategory: 'Sport Bike',\n        vehicle: {\n          name: 'Yamaha R15 V4',\n          model: 'R15 V4',\n          category: 'Sport Bike',\n          vehicleType: 'two-wheeler',\n          image: 'https://images.pexels.com/photos/2116475/pexels-photo-2116475.jpeg'\n        },\n        startTime: new Date(Date.now() - 120 * 60 * 60 * 1000)?.toISOString(),\n        endTime: new Date(Date.now() - 114 * 60 * 60 * 1000)?.toISOString(),\n        duration: '6 Hours',\n        totalAmount: 18.00,\n        status: 'completed',\n        rated: true,\n        createdAt: new Date(Date.now() - 144 * 60 * 60 * 1000)?.toISOString(),\n        receiptUrl: '#'\n      },\n      {\n        id: 'BK006',\n        facility: {\n          id: 'fac-006',\n          name: 'Office Complex Parking',\n          address: '987 Corporate Square, Business Bay',\n          location: { lat: 40.7614, lng: -73.9776 }\n        },\n        slotLocation: 'Basement 2 Reserved Slot R-08',\n        vehicleType: 'Tesla Model 3',\n        vehicleImage: 'https://images.pexels.com/photos/193991/pexels-photo-193991.jpeg',\n        actualVehicleType: 'four-wheeler',\n        vehicleCategory: 'Electric Sedan',\n        vehicle: {\n          name: 'Tesla Model 3',\n          model: 'Model 3',\n          category: 'Electric Sedan',\n          vehicleType: 'four-wheeler',\n          image: 'https://images.pexels.com/photos/193991/pexels-photo-193991.jpeg'\n        },\n        startTime: new Date(Date.now() - 168 * 60 * 60 * 1000)?.toISOString(),\n        endTime: new Date(Date.now() - 160 * 60 * 60 * 1000)?.toISOString(),\n        duration: '8 Hours',\n        totalAmount: 55.00,\n        status: 'completed',\n        rated: true,\n        createdAt: new Date(Date.now() - 192 * 60 * 60 * 1000)?.toISOString(),\n        receiptUrl: '#'\n      },\n      {\n        id: 'BK007',\n        facility: {\n          id: 'fac-007',\n          name: 'Stadium Event Parking',\n          address: '555 Sports Complex Dr, Arena District',\n          location: { lat: 40.7505, lng: -73.9934 }\n        },\n        slotLocation: 'Outdoor Lot Section E Row 15',\n        vehicleType: 'Royal Enfield Classic',\n        vehicleImage: 'https://images.pexels.com/photos/2116475/pexels-photo-2116475.jpeg',\n        actualVehicleType: 'two-wheeler',\n        vehicleCategory: 'Cruiser',\n        vehicle: {\n          name: 'Royal Enfield Classic',\n          model: 'Classic 350',\n          category: 'Cruiser',\n          vehicleType: 'two-wheeler',\n          image: 'https://images.pexels.com/photos/2116475/pexels-photo-2116475.jpeg'\n        },\n        startTime: new Date(Date.now() - 240 * 60 * 60 * 1000)?.toISOString(),\n        endTime: new Date(Date.now() - 235 * 60 * 60 * 1000)?.toISOString(),\n        duration: '5 Hours',\n        totalAmount: 22.50,\n        status: 'completed',\n        rated: false,\n        createdAt: new Date(Date.now() - 264 * 60 * 60 * 1000)?.toISOString(),\n        receiptUrl: '#'\n      },\n      {\n        id: 'BK008',\n        facility: {\n          id: 'fac-008',\n          name: 'Hospital Emergency Parking',\n          address: '333 Medical Center Rd, Health District',\n          location: { lat: 40.7831, lng: -73.9712 }\n        },\n        slotLocation: 'Emergency Zone Quick Access A1',\n        vehicleType: 'Honda City',\n        vehicleImage: 'https://images.pexels.com/photos/112460/pexels-photo-112460.jpeg',\n        actualVehicleType: 'four-wheeler',\n        vehicleCategory: 'Sedan',\n        vehicle: {\n          name: 'Honda City',\n          model: 'City',\n          category: 'Sedan',\n          vehicleType: 'four-wheeler',\n          image: 'https://images.pexels.com/photos/112460/pexels-photo-112460.jpeg'\n        },\n        startTime: new Date(Date.now() - 312 * 60 * 60 * 1000)?.toISOString(),\n        endTime: new Date(Date.now() - 309 * 60 * 60 * 1000)?.toISOString(),\n        duration: '3 Hours',\n        totalAmount: 35.00,\n        status: 'completed',\n        rated: true,\n        createdAt: new Date(Date.now() - 336 * 60 * 60 * 1000)?.toISOString(),\n        receiptUrl: '#'\n      },\n      {\n        id: 'BK009',\n        facility: {\n          id: 'fac-009',\n          name: 'Koramangala Mall Parking',\n          address: 'Forum Mall, Koramangala, Bangalore',\n          location: { lat: 12.9352, lng: 77.6245 }\n        },\n        slotLocation: '2nd Floor Mall Parking B12',\n        vehicleType: 'TVS Apache RTR 160',\n        vehicleImage: '/attached_assets/tvs_apache_black.jpg',\n        actualVehicleType: 'two-wheeler',\n        vehicleCategory: 'Sport Bike',\n        vehicle: {\n          name: 'TVS Apache RTR 160',\n          model: 'Apache RTR 160',\n          category: 'Sport Bike',\n          vehicleType: 'two-wheeler',\n          image: '/attached_assets/tvs_apache_black.jpg'\n        },\n        startTime: new Date(Date.now() - 48 * 60 * 60 * 1000)?.toISOString(),\n        endTime: new Date(Date.now() - 44 * 60 * 60 * 1000)?.toISOString(),\n        duration: '4 Hours',\n        totalAmount: 25.60,\n        status: 'completed',\n        rated: false,\n        createdAt: new Date(Date.now() - 60 * 60 * 60 * 1000)?.toISOString(),\n        receiptUrl: '#'\n      },\n      {\n        id: 'BK010',\n        facility: {\n          id: 'fac-010',\n          name: 'Whitefield Tech Park',\n          address: 'ITPL Main Road, Whitefield, Bangalore',\n          location: { lat: 12.9698, lng: 77.7500 }\n        },\n        slotLocation: 'Basement 1 Corporate Zone C25',\n        vehicleType: 'Maruti Baleno',\n        vehicleImage: 'https://images.unsplash.com/photo-1502877338535-766e1452684a?w=800&h=600&fit=crop',\n        actualVehicleType: 'four-wheeler',\n        vehicleCategory: 'Hatchback',\n        vehicle: {\n          name: 'Maruti Baleno',\n          model: 'Baleno',\n          category: 'Hatchback',\n          vehicleType: 'four-wheeler',\n          image: 'https://images.unsplash.com/photo-1502877338535-766e1452684a?w=800&h=600&fit=crop'\n        },\n        startTime: new Date(Date.now() + 24 * 60 * 60 * 1000)?.toISOString(),\n        endTime: new Date(Date.now() + 32 * 60 * 60 * 1000)?.toISOString(),\n        duration: '8 Hours',\n        totalAmount: 95.00,\n        status: 'upcoming',\n        createdAt: new Date(Date.now() - 12 * 60 * 60 * 1000)?.toISOString(),\n        receiptUrl: '#'\n      }\n    ];\n  };\n\n  const [bookings, setBookings] = useState(getBookingsFromStorage());\n  const [filteredBookings, setFilteredBookings] = useState(getBookingsFromStorage());\n\n  // Check for new bookings from localStorage\n  useEffect(() => {\n    const checkForNewBookings = () => {\n      const storedBookings = localStorage.getItem('userBookings');\n      if (storedBookings) {\n        const newBookings = JSON.parse(storedBookings);\n        setBookings(newBookings);\n        setFilteredBookings(newBookings);\n      }\n    };\n\n    // Check immediately\n    checkForNewBookings();\n\n    // Listen for booking updates\n    const handleBookingUpdate = () => {\n      checkForNewBookings();\n    };\n\n    // Set up event listener for real-time updates\n    window.addEventListener('bookingUpdate', handleBookingUpdate);\n    window.addEventListener('storage', handleBookingUpdate);\n\n    // Set up interval to check for new bookings\n    const interval = setInterval(checkForNewBookings, 2000);\n\n    return () => {\n      clearInterval(interval);\n      window.removeEventListener('bookingUpdate', handleBookingUpdate);\n      window.removeEventListener('storage', handleBookingUpdate);\n    };\n  }, []);\n\n  // Handle initial tab and new booking highlighting\n  useEffect(() => {\n    if (location?.state?.newBookingId) {\n      // Highlight the new booking only when first visiting the page\n      const isFirstVisit = sessionStorage.getItem(`highlighted-${location.state.newBookingId}`) !== 'true';\n      if (isFirstVisit) {\n        setTimeout(() => {\n          const bookingElement = document.getElementById(`booking-${location.state.newBookingId}`);\n          if (bookingElement) {\n            bookingElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n            bookingElement.style.backgroundColor = 'rgba(59, 130, 246, 0.1)';\n            sessionStorage.setItem(`highlighted-${location.state.newBookingId}`, 'true');\n            setTimeout(() => {\n              bookingElement.style.backgroundColor = '';\n            }, 3000);\n          }\n        }, 500);\n      }\n    }\n  }, [location?.state?.newBookingId]);\n\n  // Filter bookings based on active tab\n  const getBookingsByStatus = (status) => {\n    // First apply status filter to all bookings\n    let statusFilteredBookings;\n    if (status === 'all') {\n      statusFilteredBookings = bookings;\n    } else {\n      statusFilteredBookings = bookings?.filter(booking => booking?.status === status) || [];\n    }\n\n    // Then apply search and other filters to status-filtered bookings\n    let finalBookings = [...statusFilteredBookings];\n\n    // Apply search filter\n    if (searchQuery) {\n      finalBookings = finalBookings?.filter(booking =>\n        booking?.facility?.name?.toLowerCase()?.includes(searchQuery?.toLowerCase()) ||\n        booking?.id?.toLowerCase()?.includes(searchQuery?.toLowerCase()) ||\n        booking?.slotLocation?.toLowerCase()?.includes(searchQuery?.toLowerCase())\n      );\n    }\n\n    // Apply facility filter (IMPORTANT: was missing in previous version)\n    if (filters?.facility) {\n      finalBookings = finalBookings?.filter(booking =>\n        booking?.facility?.id === filters?.facility\n      );\n    }\n\n    // Apply location filter\n    if (filters?.location) {\n      finalBookings = finalBookings?.filter(booking => {\n        const facilityAddress = booking?.facility?.address?.toLowerCase() || '';\n        const facilityName = booking?.facility?.name?.toLowerCase() || '';\n        const locationFilter = filters?.location?.toLowerCase();\n        \n        if (locationFilter === 'hyderabad') {\n          return facilityAddress.includes('hyderabad') || facilityName.includes('hyderabad') ||\n                 facilityAddress.includes('hitech') || facilityAddress.includes('gachibowli') ||\n                 facilityAddress.includes('jubilee') || facilityAddress.includes('banjara') ||\n                 facilityAddress.includes('secunderabad') || facilityAddress.includes('begumpet') ||\n                 facilityAddress.includes('kukatpally') || facilityAddress.includes('kondapur') ||\n                 facilityAddress.includes('miyapur') || facilityAddress.includes('ameerpet') ||\n                 facilityAddress.includes('madhapur') || facilityAddress.includes('financial district') ||\n                 facilityName.includes('hitech') || facilityName.includes('gachibowli');\n        } else if (locationFilter === 'bangalore') {\n          return facilityAddress.includes('bangalore') || facilityName.includes('bangalore') ||\n                 facilityAddress.includes('bengaluru') || facilityName.includes('bengaluru') ||\n                 facilityAddress.includes('koramangala') || facilityAddress.includes('whitefield') ||\n                 facilityAddress.includes('electronic city') || facilityAddress.includes('indiranagar') ||\n                 facilityAddress.includes('btm') || facilityAddress.includes('jayanagar') ||\n                 facilityAddress.includes('marathahalli') || facilityAddress.includes('sarjapur') ||\n                 facilityAddress.includes('itpl') || facilityName.includes('koramangala') ||\n                 facilityName.includes('whitefield');\n        } else if (locationFilter === 'delhi') {\n          return facilityAddress.includes('delhi') || facilityName.includes('delhi') ||\n                 facilityAddress.includes('new delhi') || facilityAddress.includes('connaught') ||\n                 facilityAddress.includes('karol bagh') || facilityAddress.includes('lajpat') ||\n                 facilityAddress.includes('chandni chowk') || facilityAddress.includes('india gate');\n        } else if (locationFilter === 'mumbai') {\n          return facilityAddress.includes('mumbai') || facilityName.includes('mumbai') ||\n                 facilityAddress.includes('bandra') || facilityAddress.includes('andheri') ||\n                 facilityAddress.includes('powai') || facilityAddress.includes('colaba') ||\n                 facilityAddress.includes('worli');\n        }\n        return false;\n      });\n    }\n\n    // Apply vehicle type filter\n    if (filters?.vehicleType) {\n      finalBookings = finalBookings?.filter(booking =>\n        booking?.actualVehicleType?.toLowerCase() === filters?.vehicleType?.toLowerCase() ||\n        booking?.vehicleType?.toLowerCase().includes(filters?.vehicleType?.toLowerCase())\n      );\n    }\n\n    // Apply date range filter\n    if (filters?.dateRange) {\n      const now = new Date();\n      finalBookings = finalBookings?.filter(booking => {\n        const bookingDate = new Date(booking.startTime);\n        switch (filters?.dateRange) {\n          case 'today':\n            return bookingDate?.toDateString() === now?.toDateString();\n          case 'week':\n            const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n            return bookingDate >= weekAgo;\n          case 'month':\n            const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n            return bookingDate >= monthAgo;\n          case 'quarter':\n            const quarterAgo = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);\n            return bookingDate >= quarterAgo;\n          default:\n            return true;\n        }\n      });\n    }\n\n    return finalBookings;\n  };\n\n  // Get booking counts for tabs (use all bookings, not filtered)\n  const bookingCounts = {\n    active: bookings?.filter(b => b?.status === 'active')?.length || 0,\n    upcoming: bookings?.filter(b => b?.status === 'upcoming')?.length || 0,\n    completed: bookings?.filter(b => b?.status === 'completed')?.length || 0\n  };\n\n  // Get booking counts for tabs (use all bookings, not filtered)\n  console.log('All bookings:', bookings?.length);\n  console.log('Booking counts:', bookingCounts);\n  console.log('Active tab:', activeTab);\n\n  // Handle search\n  const handleSearch = (query) => {\n    setSearchQuery(query);\n    filterBookings(query, filters);\n  };\n\n  // Handle filters\n  const handleFilter = (newFilters) => {\n    setFilters(newFilters);\n    filterBookings(searchQuery, newFilters);\n  };\n\n  // Filter bookings function\n  const filterBookings = (query, filterOptions) => {\n    let filtered = [...bookings];\n\n    // Search filter\n    if (query) {\n      filtered = filtered?.filter(booking =>\n        booking?.facility?.name?.toLowerCase()?.includes(query?.toLowerCase()) ||\n        booking?.id?.toLowerCase()?.includes(query?.toLowerCase()) ||\n        booking?.slotLocation?.toLowerCase()?.includes(query?.toLowerCase())\n      );\n    }\n\n    // Facility filter\n    if (filterOptions?.facility) {\n      filtered = filtered?.filter(booking =>\n        booking?.facility?.id === filterOptions?.facility\n      );\n    }\n\n    // Date range filter\n    if (filterOptions?.dateRange) {\n      const now = new Date();\n      filtered = filtered?.filter(booking => {\n        const bookingDate = new Date(booking.startTime);\n        switch (filterOptions?.dateRange) {\n          case 'today':\n            return bookingDate?.toDateString() === now?.toDateString();\n          case 'week':\n            const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n            return bookingDate >= weekAgo;\n          case 'month':\n            const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n            return bookingDate >= monthAgo;\n          case 'quarter':\n            const quarterAgo = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);\n            return bookingDate >= quarterAgo;\n          default:\n            return true;\n        }\n      });\n    }\n\n    // Vehicle type filter\n    if (filterOptions?.vehicleType) {\n      filtered = filtered?.filter(booking =>\n        booking?.actualVehicleType?.toLowerCase() === filterOptions?.vehicleType?.toLowerCase() ||\n        booking?.vehicleType?.toLowerCase().includes(filterOptions?.vehicleType?.toLowerCase())\n      );\n    }\n\n    // Location filter - Only show bookings from the selected location\n    if (filterOptions?.location) {\n      filtered = filtered?.filter(booking => {\n        const facilityAddress = booking?.facility?.address?.toLowerCase() || '';\n        const facilityName = booking?.facility?.name?.toLowerCase() || '';\n        const locationFilter = filterOptions?.location?.toLowerCase();\n        \n        // Check if the booking location matches the selected filter\n        if (locationFilter === 'hyderabad') {\n          return facilityAddress.includes('hyderabad') || facilityName.includes('hyderabad') ||\n                 facilityAddress.includes('hitech') || facilityAddress.includes('gachibowli') ||\n                 facilityAddress.includes('jubilee') || facilityAddress.includes('banjara') ||\n                 facilityAddress.includes('secunderabad') || facilityAddress.includes('begumpet') ||\n                 facilityAddress.includes('kukatpally') || facilityAddress.includes('kondapur') ||\n                 facilityAddress.includes('miyapur') || facilityAddress.includes('ameerpet') ||\n                 facilityAddress.includes('madhapur') || facilityAddress.includes('financial district') ||\n                 facilityName.includes('hitech') || facilityName.includes('gachibowli');\n        } else if (locationFilter === 'bangalore') {\n          return facilityAddress.includes('bangalore') || facilityName.includes('bangalore') ||\n                 facilityAddress.includes('bengaluru') || facilityName.includes('bengaluru') ||\n                 facilityAddress.includes('koramangala') || facilityAddress.includes('whitefield') ||\n                 facilityAddress.includes('electronic city') || facilityAddress.includes('indiranagar') ||\n                 facilityAddress.includes('btm') || facilityAddress.includes('jayanagar') ||\n                 facilityAddress.includes('marathahalli') || facilityAddress.includes('sarjapur') ||\n                 facilityAddress.includes('itpl') || facilityName.includes('koramangala') ||\n                 facilityName.includes('whitefield');\n        } else if (locationFilter === 'delhi') {\n          return facilityAddress.includes('delhi') || facilityName.includes('delhi') ||\n                 facilityAddress.includes('new delhi') || facilityAddress.includes('connaught') ||\n                 facilityAddress.includes('karol bagh') || facilityAddress.includes('lajpat') ||\n                 facilityAddress.includes('chandni chowk') || facilityAddress.includes('india gate');\n        } else if (locationFilter === 'mumbai') {\n          return facilityAddress.includes('mumbai') || facilityName.includes('mumbai') ||\n                 facilityAddress.includes('bandra') || facilityAddress.includes('andheri') ||\n                 facilityAddress.includes('powai') || facilityAddress.includes('colaba') ||\n                 facilityAddress.includes('worli');\n        }\n        // For any other location filter value, return false to show no bookings\n        return false;\n      });\n    }\n\n    console.log('Filtered bookings:', filtered.length, filtered);\n    setFilteredBookings(filtered);\n  };\n\n  // Clear filters\n  const handleClearFilters = () => {\n    setSearchQuery('');\n    setFilters({});\n    setFilteredBookings(bookings);\n  };\n\n  // Pull to refresh\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    setIsRefreshing(false);\n  };\n\n  // Booking actions\n  const handleExtendBooking = (bookingId) => {\n    const booking = bookings.find(b => b.id === bookingId);\n    if (booking) {\n      // Store current scroll position\n      sessionStorage.setItem('bookingScrollPosition', window.scrollY.toString());\n      setSelectedBookingForExtend(booking);\n      setExtendModalOpen(true);\n    }\n  };\n\n  const handleSaveExtension = async (updatedBooking) => {\n    try {\n      // Update the booking in state\n      const updatedBookings = bookings.map(booking =>\n        booking.id === updatedBooking.id ? updatedBooking : booking\n      );\n      \n      setBookings(updatedBookings);\n      setFilteredBookings(updatedBookings);\n      \n      // Update localStorage\n      localStorage.setItem('userBookings', JSON.stringify(updatedBookings));\n      \n      // Trigger storage event for real-time updates\n      window.dispatchEvent(new Event('bookingUpdate'));\n      \n      // Close modal and restore scroll position\n      setExtendModalOpen(false);\n      setSelectedBookingForExtend(null);\n      \n      // Restore scroll position\n      setTimeout(() => {\n        const scrollPosition = sessionStorage.getItem('bookingScrollPosition');\n        if (scrollPosition) {\n          window.scrollTo(0, parseInt(scrollPosition));\n          sessionStorage.removeItem('bookingScrollPosition');\n        }\n      }, 100);\n      \n      // Show success message\n      alert('Booking extended successfully!');\n    } catch (error) {\n      console.error('Error saving extension:', error);\n      throw error;\n    }\n  };\n\n  const handleCancelBooking = (bookingId) => {\n    const booking = bookings.find(b => b.id === bookingId);\n    if (!booking) return;\n    \n    setSelectedBookingForCancel(booking);\n    setShowCancellationModal(true);\n  };\n\n  const confirmCancellation = async () => {\n    if (!selectedBookingForCancel) return;\n    \n    setIsCancelling(true);\n    \n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Remove the booking from the list (delete it completely)\n    const updatedBookings = bookings.filter(booking => booking.id !== selectedBookingForCancel.id);\n    \n    // Update state\n    setBookings(updatedBookings);\n    setFilteredBookings(updatedBookings.filter(booking => {\n      // Re-apply current filters to the updated bookings\n      let matches = true;\n      \n      // Apply tab filter\n      if (activeTab !== 'all') {\n        matches = matches && booking.status === activeTab;\n      }\n      \n      // Apply search filter\n      if (searchQuery) {\n        matches = matches && (\n          booking?.facility?.name?.toLowerCase()?.includes(searchQuery?.toLowerCase()) ||\n          booking?.id?.toLowerCase()?.includes(searchQuery?.toLowerCase()) ||\n          booking?.slotLocation?.toLowerCase()?.includes(searchQuery?.toLowerCase())\n        );\n      }\n      \n      return matches;\n    }));\n    \n    // Update localStorage\n    localStorage.setItem('userBookings', JSON.stringify(updatedBookings));\n    \n    // Trigger storage event for real-time updates\n    window.dispatchEvent(new Event('bookingUpdate'));\n    \n    // Close modal and reset state\n    setIsCancelling(false);\n    setShowCancellationModal(false);\n    setSelectedBookingForCancel(null);\n  };\n\n  const handleRateBooking = (bookingId) => {\n    alert(`Rating booking ${bookingId}`);\n    setBookings(prev => prev?.map(booking =>\n      booking?.id === bookingId\n        ? { ...booking, rated: true }\n        : booking\n    ));\n  };\n\n  const currentBookings = getBookingsByStatus(activeTab);\n  \n  // Debug tab switching - add forced re-render trigger\n  const [renderKey, setRenderKey] = useState(0);\n  \n  // Enhanced tab change handler\n  const handleTabChange = (newTab) => {\n    console.log('üîÑ TAB CHANGE:', activeTab, '->', newTab);\n    setActiveTab(newTab);\n    setRenderKey(prev => prev + 1); // Force re-render\n    console.log('‚úÖ Tab changed, triggering re-render');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border sticky top-0 z-50\">\n        <div className=\"container-app px-4 sm:px-6\">\n          <div className=\"flex items-center justify-between py-3 sm:py-4\">\n            <div className=\"flex items-center gap-3\">\n              <button\n                onClick={() => navigate('/home')}\n                className=\"p-2 hover:bg-muted rounded-lg transition-colors\"\n                title=\"Back to Home\"\n              >\n                <Icon name=\"ArrowLeft\" size={20} className=\"text-foreground\" />\n              </button>\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center lg:hidden\">\n                <Icon name=\"Calendar\" size={20} color=\"white\" />\n              </div>\n              <div>\n                <h1 className=\"text-lg sm:text-xl lg:text-2xl font-semibold text-foreground\">My Bookings</h1>\n                <p className=\"text-xs sm:text-sm text-muted-foreground hidden sm:block\">Manage your parking reservations</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleRefresh}\n                disabled={isRefreshing}\n                iconName={isRefreshing ? \"Loader2\" : \"RefreshCw\"}\n                className={isRefreshing ? \"animate-spin\" : \"\"}\n              />\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => navigate('/location-search-map')}\n                iconName=\"Plus\"\n                iconPosition=\"left\"\n                className=\"hidden sm:flex\"\n              >\n                New Booking\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n      <div className=\"container-app py-4 sm:py-6 pb-20 lg:pb-6 px-4 sm:px-6\">\n        <div className=\"lg:grid lg:grid-cols-12 lg:gap-6 xl:gap-8\">\n          {/* Main Content */}\n          <div className=\"lg:col-span-8 xl:col-span-9 space-y-4 sm:space-y-6\">\n            {/* Quick Booking Widget */}\n            <QuickBookingWidget />\n\n            {/* Search and Filter */}\n            <SearchAndFilter\n              onSearch={handleSearch}\n              onFilter={handleFilter}\n              onClearFilters={handleClearFilters}\n            />\n\n            {/* Booking Tabs */}\n            <BookingTabs\n              activeTab={activeTab}\n              onTabChange={handleTabChange}\n              bookingCounts={bookingCounts}\n            />\n\n            {/* Bookings List */}\n            <div className=\"space-y-4\" key={renderKey}>\n              <div className=\"text-sm bg-blue-100 p-2 rounded\">\n                DEBUG: activeTab=\"{activeTab}\" | currentBookings.length={currentBookings?.length || 0} | renderKey={renderKey}\n              </div>\n              {currentBookings && currentBookings.length > 0 ? (\n                currentBookings.map((booking) => (\n                  <BookingCard\n                    key={booking?.id}\n                    booking={booking}\n                    onExtend={handleExtendBooking}\n                    onCancel={handleCancelBooking}\n                    onRate={handleRateBooking}\n                  />\n                ))\n              ) : (\n                <div className=\"text-sm bg-red-100 p-2 rounded\">\n                  EMPTY STATE: activeTab=\"{activeTab}\" | Available bookings: {bookings?.length}\n                  <EmptyState type={activeTab} />\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Sidebar - Desktop Only */}\n          <div className=\"hidden lg:block lg:col-span-4 xl:col-span-3 space-y-4 lg:space-y-6\">\n            {/* Emergency Contact */}\n            <EmergencyContact />\n\n            {/* Quick Stats */}\n            <div className=\"bg-card border border-border rounded-lg p-4\">\n              <h3 className=\"font-semibold text-foreground mb-4\">Quick Stats</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">Total Bookings</span>\n                  <span className=\"font-medium text-foreground\">{bookings?.length}</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">This Month</span>\n                  <span className=\"font-medium text-foreground\">\n                    ${bookings?.reduce((sum, b) => sum + b?.totalAmount, 0)?.toFixed(2)}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">Avg. Duration</span>\n                  <span className=\"font-medium text-foreground\">4.5 hours</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Recent Activity */}\n            <div className=\"bg-card border border-border rounded-lg p-4\">\n              <h3 className=\"font-semibold text-foreground mb-4\">Recent Activity</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-2 h-2 bg-success rounded-full mt-2\"></div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm text-foreground\">Booking confirmed</p>\n                    <p className=\"text-xs text-muted-foreground\">Downtown Mall - 2 hours ago</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-2 h-2 bg-warning rounded-full mt-2\"></div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm text-foreground\">Payment processed</p>\n                    <p className=\"text-xs text-muted-foreground\">$25.00 - 3 hours ago</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-2 h-2 bg-primary rounded-full mt-2\"></div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm text-foreground\">Slot reserved</p>\n                    <p className=\"text-xs text-muted-foreground\">Airport Terminal - 1 day ago</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* Bottom Navigation */}\n      <BottomTabNavigation />\n\n      {/* Extend Time Modal */}\n      <ExtendTimeModal\n        isOpen={extendModalOpen}\n        onClose={() => {\n          setExtendModalOpen(false);\n          setSelectedBookingForExtend(null);\n        }}\n        booking={selectedBookingForExtend}\n        onSave={handleSaveExtension}\n      />\n\n      {/* Cancellation Modal */}\n      <CancellationModal\n        isOpen={showCancellationModal}\n        onClose={() => {\n          setShowCancellationModal(false);\n          setSelectedBookingForCancel(null);\n        }}\n        onConfirm={confirmCancellation}\n        booking={selectedBookingForCancel}\n        isProcessing={isCancelling}\n      />\n    </div>\n  );\n};\n\nexport default MyBookingsDashboard;\n","size_bytes":39479},"src/pages/profile/index.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Icon from '../../components/AppIcon';\nimport Button from '../../components/ui/Button';\n\n// ProfileBookingHistory component\nconst ProfileBookingHistory = () => {\n  const navigate = useNavigate();\n  \n  // Get bookings from localStorage\n  const getBookingsFromStorage = () => {\n    const storedBookings = localStorage.getItem('userBookings');\n    if (storedBookings) {\n      return JSON.parse(storedBookings);\n    }\n    return [];\n  };\n\n  const bookings = getBookingsFromStorage();\n\n  if (bookings.length === 0) {\n    return (\n      <div className=\"text-center py-8\">\n        <Icon name=\"Calendar\" size={48} className=\"text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-medium text-foreground mb-2\">No Bookings Yet</h3>\n        <p className=\"text-muted-foreground mb-4\">Start your parking journey by booking your first spot!</p>\n        <Button\n          onClick={() => navigate('/location-search-map')}\n          variant=\"primary\"\n        >\n          Find Parking\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {bookings.map((booking) => (\n        <div key={booking.id} className=\"bg-muted rounded-lg p-4 border border-border\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-3 mb-3\">\n            <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n              <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                <Icon name=\"MapPin\" size={20} className=\"text-primary\" />\n              </div>\n              <div className=\"min-w-0 flex-1\">\n                <h4 className=\"font-medium text-foreground truncate\">{booking.facility.name}</h4>\n                <p className=\"text-sm text-muted-foreground truncate\">{booking.facility.address}</p>\n              </div>\n            </div>\n            <div className={`px-2 py-1 rounded-full text-xs font-medium ${\n              booking.status === 'active' ? 'bg-success/10 text-success' :\n              booking.status === 'upcoming' ? 'bg-warning/10 text-warning' :\n              booking.status === 'completed' ? 'bg-muted text-muted-foreground' :\n              'bg-destructive/10 text-destructive'\n            }`}>\n              {booking.status.charAt(0).toUpperCase() + booking.status.slice(1)}\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <p className=\"text-muted-foreground\">Slot Location</p>\n              <p className=\"font-medium text-foreground\">{booking.slotLocation}</p>\n            </div>\n            <div>\n              <p className=\"text-muted-foreground\">Amount</p>\n              <p className=\"font-medium text-foreground\">${booking.totalAmount}</p>\n            </div>\n            <div>\n              <p className=\"text-muted-foreground\">Vehicle</p>\n              <p className=\"font-medium text-foreground\">\n                {booking?.vehicle?.name || booking?.vehicle?.model || booking.vehicleType}\n              </p>\n              {(booking?.vehicle?.category || booking?.vehicleCategory) && (\n                <p className=\"text-xs text-muted-foreground\">{booking?.vehicle?.category || booking?.vehicleCategory}</p>\n              )}\n            </div>\n            <div>\n              <p className=\"text-muted-foreground\">Duration</p>\n              <p className=\"font-medium text-foreground\">{booking.duration}</p>\n            </div>\n          </div>\n\n          {booking.status === 'active' && (\n            <div className=\"mt-4 flex gap-2\">\n              <Button\n                size=\"sm\"\n                onClick={() => navigate('/my-bookings-dashboard')}\n                className=\"flex-1\"\n              >\n                View Details\n              </Button>\n            </div>\n          )}\n        </div>\n      ))}\n      \n      <div className=\"text-center pt-4\">\n        <Button\n          onClick={() => navigate('/my-bookings-dashboard')}\n          variant=\"outline\"\n        >\n          View All Bookings\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nconst Profile = () => {\n  const navigate = useNavigate();\n  const [user, setUser] = useState(null);\n  const [activeTab, setActiveTab] = useState('profile');\n  const [isEditing, setIsEditing] = useState(false);\n  const [editForm, setEditForm] = useState({\n    name: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  });\n  const [savedCards, setSavedCards] = useState([\n    {\n      id: 1,\n      cardNumber: '**** **** **** 1234',\n      cardHolder: 'John Doe',\n      expiry: '12/25',\n      type: 'Visa'\n    },\n    {\n      id: 2,\n      cardNumber: '**** **** **** 5678',\n      cardHolder: 'John Doe',\n      expiry: '06/26',\n      type: 'Mastercard'\n    }\n  ]);\n  const [showAddCard, setShowAddCard] = useState(false);\n  const [editingCard, setEditingCard] = useState(null);\n  const [newCard, setNewCard] = useState({\n    cardNumber: '',\n    cardHolder: '',\n    expiry: '',\n    cvv: '',\n    type: 'Visa'\n  });\n\n  useEffect(() => {\n    // Get user data from localStorage\n    const userEmail = localStorage.getItem('userEmail');\n    const userName = localStorage.getItem('userName');\n    const userVehicle = localStorage.getItem('userVehicle');\n    \n    if (userEmail) {\n      setUser({\n        email: userEmail,\n        name: userName || 'User',\n        vehicle: userVehicle || 'Not specified'\n      });\n    } else {\n      // Redirect to login if no user data\n      navigate('/user-authentication');\n    }\n  }, [navigate]);\n\n  const handleLogout = () => {\n    // Clear all authentication data\n    localStorage.removeItem('isAuthenticated');\n    localStorage.removeItem('userEmail');\n    localStorage.removeItem('userName');\n    localStorage.removeItem('userVehicle');\n    localStorage.removeItem('tempPassword');\n    \n    // Redirect to login page\n    navigate('/user-authentication');\n  };\n\n  const handleTabChange = (tab) => {\n    setActiveTab(tab);\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Icon name=\"Loader\" size={32} className=\"animate-spin text-primary mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">Loading profile...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border sticky top-0 z-50\">\n        <div className=\"container-app\">\n          <div className=\"flex items-center justify-between py-4\">\n            <div className=\"flex items-center gap-3\">\n              <button\n                onClick={() => navigate('/home')}\n                className=\"p-2 hover:bg-muted rounded-lg transition-colors\"\n                title=\"Back to Home\"\n              >\n                <Icon name=\"ArrowLeft\" size={20} className=\"text-foreground\" />\n              </button>\n              <h1 className=\"text-lg font-semibold text-foreground\">Profile</h1>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"container-app py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Profile Header */}\n          <div className=\"bg-card rounded-2xl shadow-lg border border-border p-4 sm:p-6 lg:p-8 mb-8\">\n            <div className=\"flex flex-col sm:flex-row items-center gap-4 sm:gap-6\">\n              <div className=\"w-16 h-16 sm:w-20 sm:h-20 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0\">\n                <Icon name=\"User\" size={32} className=\"sm:w-10 sm:h-10 text-primary\" />\n              </div>\n              <div className=\"flex-1 text-center sm:text-left min-w-0\">\n                <h2 className=\"text-xl sm:text-2xl font-bold text-foreground mb-2 truncate\">{user.name}</h2>\n                <p className=\"text-muted-foreground mb-1 text-sm sm:text-base truncate\">{user.email}</p>\n                <p className=\"text-xs sm:text-sm text-muted-foreground truncate\">Vehicle: {user.vehicle}</p>\n              </div>\n              <div className=\"flex gap-2 w-full sm:w-auto\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setIsEditing(!isEditing);\n                    setEditForm({\n                      name: user.name,\n                      email: user.email,\n                      password: '',\n                      confirmPassword: ''\n                    });\n                  }}\n                  className=\"flex-1 sm:flex-none text-sm\"\n                  size=\"sm\"\n                >\n                  <Icon name={isEditing ? \"X\" : \"Edit\"} size={14} className=\"mr-1 sm:mr-2\" />\n                  <span className=\"hidden sm:inline\">{isEditing ? \"Cancel\" : \"Edit Profile\"}</span>\n                  <span className=\"sm:hidden\">{isEditing ? \"Cancel\" : \"Edit\"}</span>\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Tabs */}\n          <div className=\"bg-card rounded-2xl shadow-lg border border-border overflow-hidden\">\n            <div className=\"border-b border-border\">\n              <div className=\"flex overflow-x-auto scrollbar-hide\">\n                <button\n                  onClick={() => handleTabChange('profile')}\n                  className={`flex-1 min-w-0 px-3 sm:px-6 py-3 sm:py-4 text-xs sm:text-sm font-medium transition-colors whitespace-nowrap ${\n                    activeTab === 'profile'\n                      ? 'text-primary border-b-2 border-primary'\n                      : 'text-muted-foreground hover:text-foreground'\n                  }`}\n                >\n                  <span className=\"hidden sm:inline\">Personal Details</span>\n                  <span className=\"sm:hidden\">Profile</span>\n                </button>\n                <button\n                  onClick={() => handleTabChange('bookings')}\n                  className={`flex-1 min-w-0 px-3 sm:px-6 py-3 sm:py-4 text-xs sm:text-sm font-medium transition-colors whitespace-nowrap ${\n                    activeTab === 'bookings'\n                      ? 'text-primary border-b-2 border-primary'\n                      : 'text-muted-foreground hover:text-foreground'\n                  }`}\n                >\n                  <span className=\"hidden sm:inline\">Booking History</span>\n                  <span className=\"sm:hidden\">Bookings</span>\n                </button>\n                <button\n                  onClick={() => handleTabChange('cards')}\n                  className={`flex-1 min-w-0 px-3 sm:px-6 py-3 sm:py-4 text-xs sm:text-sm font-medium transition-colors whitespace-nowrap ${\n                    activeTab === 'cards'\n                      ? 'text-primary border-b-2 border-primary'\n                      : 'text-muted-foreground hover:text-foreground'\n                  }`}\n                >\n                  <span className=\"hidden sm:inline\">Saved Cards</span>\n                  <span className=\"sm:hidden\">Cards</span>\n                </button>\n                <button\n                  onClick={() => handleTabChange('settings')}\n                  className={`flex-1 min-w-0 px-3 sm:px-6 py-3 sm:py-4 text-xs sm:text-sm font-medium transition-colors whitespace-nowrap ${\n                    activeTab === 'settings'\n                      ? 'text-primary border-b-2 border-primary'\n                      : 'text-muted-foreground hover:text-foreground'\n                  }`}\n                >\n                  Settings\n                </button>\n              </div>\n            </div>\n\n            {/* Tab Content */}\n            <div className=\"p-4 sm:p-6\">\n                             {activeTab === 'profile' && (\n                 <div className=\"space-y-6\">\n                   {isEditing ? (\n                     <div className=\"space-y-4\">\n                       <div className=\"grid md:grid-cols-2 gap-4\">\n                         <div>\n                           <label className=\"block text-sm font-medium text-foreground mb-2\">Full Name</label>\n                           <input\n                             type=\"text\"\n                             value={editForm.name}\n                             onChange={(e) => setEditForm({...editForm, name: e.target.value})}\n                             className=\"w-full p-3 bg-muted rounded-lg border border-border focus:outline-none focus:ring-2 focus:ring-primary\"\n                           />\n                         </div>\n                         <div>\n                           <label className=\"block text-sm font-medium text-foreground mb-2\">Email Address</label>\n                           <input\n                             type=\"email\"\n                             value={editForm.email}\n                             onChange={(e) => setEditForm({...editForm, email: e.target.value})}\n                             className=\"w-full p-3 bg-muted rounded-lg border border-border focus:outline-none focus:ring-2 focus:ring-primary\"\n                           />\n                         </div>\n                         <div>\n                           <label className=\"block text-sm font-medium text-foreground mb-2\">New Password</label>\n                           <input\n                             type=\"password\"\n                             value={editForm.password}\n                             onChange={(e) => setEditForm({...editForm, password: e.target.value})}\n                             placeholder=\"Leave blank to keep current\"\n                             className=\"w-full p-3 bg-muted rounded-lg border border-border focus:outline-none focus:ring-2 focus:ring-primary\"\n                           />\n                         </div>\n                         <div>\n                           <label className=\"block text-sm font-medium text-foreground mb-2\">Confirm Password</label>\n                           <input\n                             type=\"password\"\n                             value={editForm.confirmPassword}\n                             onChange={(e) => setEditForm({...editForm, confirmPassword: e.target.value})}\n                             placeholder=\"Confirm new password\"\n                             className=\"w-full p-3 bg-muted rounded-lg border border-border focus:outline-none focus:ring-2 focus:ring-primary\"\n                           />\n                         </div>\n                       </div>\n                       <div className=\"flex gap-3 pt-4\">\n                         <Button\n                           onClick={() => {\n                             // Save changes logic here\n                             localStorage.setItem('userName', editForm.name);\n                             localStorage.setItem('userEmail', editForm.email);\n                             setUser({...user, name: editForm.name, email: editForm.email});\n                             setIsEditing(false);\n                           }}\n                           className=\"flex-1\"\n                         >\n                           Save Changes\n                         </Button>\n                         <Button\n                           variant=\"outline\"\n                           onClick={() => setIsEditing(false)}\n                           className=\"flex-1\"\n                         >\n                           Cancel\n                         </Button>\n                       </div>\n                     </div>\n                   ) : (\n                     <div className=\"grid md:grid-cols-2 gap-6\">\n                       <div>\n                         <label className=\"block text-sm font-medium text-foreground mb-2\">Full Name</label>\n                         <div className=\"p-3 bg-muted rounded-lg border border-border\">\n                           {user.name}\n                         </div>\n                       </div>\n                       <div>\n                         <label className=\"block text-sm font-medium text-foreground mb-2\">Email Address</label>\n                         <div className=\"p-3 bg-muted rounded-lg border border-border\">\n                           {user.email}\n                         </div>\n                       </div>\n                       <div>\n                         <label className=\"block text-sm font-medium text-foreground mb-2\">Vehicle Type</label>\n                         <div className=\"p-3 bg-muted rounded-lg border border-border\">\n                           {user.vehicle}\n                         </div>\n                       </div>\n                       <div>\n                         <label className=\"block text-sm font-medium text-foreground mb-2\">Member Since</label>\n                         <div className=\"p-3 bg-muted rounded-lg border border-border\">\n                           {new Date().toLocaleDateString()}\n                         </div>\n                       </div>\n                     </div>\n                   )}\n                 </div>\n               )}\n\n              {activeTab === 'bookings' && (\n                <ProfileBookingHistory />\n              )}\n\n                             {activeTab === 'cards' && (\n                 <div className=\"space-y-6\">\n                   <div className=\"flex items-center justify-between\">\n                     <h3 className=\"text-lg font-medium text-foreground\">Saved Payment Cards</h3>\n                     <Button\n                       onClick={() => setShowAddCard(true)}\n                       size=\"sm\"\n                     >\n                       <Icon name=\"Plus\" size={16} className=\"mr-2\" />\n                       Add Card\n                     </Button>\n                   </div>\n                   \n                   <div className=\"space-y-4\">\n                     {savedCards.map((card) => (\n                       <div key={card.id} className=\"p-4 bg-muted rounded-lg border border-border overflow-hidden\">\n                         <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-3 mb-3\">\n                           <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n                             <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                               <Icon name=\"CreditCard\" size={20} className=\"text-primary\" />\n                             </div>\n                             <div className=\"min-w-0 flex-1\">\n                               <h4 className=\"font-medium text-foreground truncate\">{card.type}</h4>\n                               <p className=\"text-sm text-muted-foreground truncate\">{card.cardNumber}</p>\n                             </div>\n                           </div>\n                           <div className=\"flex gap-2 flex-shrink-0\">\n                             <Button\n                               variant=\"outline\"\n                               size=\"sm\"\n                               onClick={() => {\n                                 setEditingCard(card);\n                                 setNewCard({\n                                   cardNumber: card.cardNumber,\n                                   cardHolder: card.cardHolder,\n                                   expiry: card.expiry,\n                                   cvv: '',\n                                   type: card.type\n                                 });\n                               }}\n                               className=\"text-xs sm:text-sm\"\n                             >\n                               <Icon name=\"Edit\" size={12} className=\"mr-1\" />\n                               <span className=\"hidden sm:inline\">Edit</span>\n                               <span className=\"sm:hidden\">Edit</span>\n                             </Button>\n                             <Button\n                               variant=\"outline\"\n                               size=\"sm\"\n                               onClick={() => {\n                                 setSavedCards(savedCards.filter(c => c.id !== card.id));\n                               }}\n                               className=\"text-destructive hover:text-destructive text-xs sm:text-sm\"\n                             >\n                               <Icon name=\"Trash\" size={12} className=\"mr-1\" />\n                               <span className=\"hidden sm:inline\">Delete</span>\n                               <span className=\"sm:hidden\">Del</span>\n                             </Button>\n                           </div>\n                         </div>\n                         <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-1 sm:gap-2 text-xs sm:text-sm text-muted-foreground\">\n                           <span className=\"truncate\">Card Holder: {card.cardHolder}</span>\n                           <span className=\"truncate\">Expires: {card.expiry}</span>\n                         </div>\n                       </div>\n                     ))}\n                   </div>\n                 </div>\n               )}\n\n               {activeTab === 'settings' && (\n                <div className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-medium text-foreground\">Account Settings</h3>\n                    \n                    <div className=\"flex items-center justify-between p-4 bg-muted rounded-lg\">\n                      <div>\n                        <h4 className=\"font-medium text-foreground\">Notifications</h4>\n                        <p className=\"text-sm text-muted-foreground\">Receive updates about your bookings</p>\n                      </div>\n                      <div className=\"w-12 h-6 bg-primary rounded-full relative\">\n                        <div className=\"w-5 h-5 bg-white rounded-full absolute right-0.5 top-0.5 transition-transform\"></div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center justify-between p-4 bg-muted rounded-lg\">\n                      <div>\n                        <h4 className=\"font-medium text-foreground\">Location Services</h4>\n                        <p className=\"text-sm text-muted-foreground\">Allow location access for nearby parking</p>\n                      </div>\n                      <div className=\"w-12 h-6 bg-muted-foreground rounded-full relative\">\n                        <div className=\"w-5 h-5 bg-white rounded-full absolute left-0.5 top-0.5 transition-transform\"></div>\n                      </div>\n                    </div>\n\n                    <div className=\"pt-4 border-t border-border\">\n                      <Button\n                        onClick={handleLogout}\n                        variant=\"destructive\"\n                        fullWidth\n                      >\n                        <Icon name=\"LogOut\" size={16} className=\"mr-2\" />\n                        Logout\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n                 </div>\n       </main>\n\n       {/* Add/Edit Card Modal */}\n       {(showAddCard || editingCard) && (\n         <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n           <div className=\"bg-card rounded-2xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-y-auto p-4 sm:p-6\">\n             <div className=\"flex items-center justify-between mb-4\">\n               <h3 className=\"text-xl font-semibold text-foreground\">\n                 {editingCard ? 'Edit Card' : 'Add New Card'}\n               </h3>\n               <button\n                 onClick={() => {\n                   setShowAddCard(false);\n                   setEditingCard(null);\n                   setNewCard({\n                     cardNumber: '',\n                     cardHolder: '',\n                     expiry: '',\n                     cvv: '',\n                     type: 'Visa'\n                   });\n                 }}\n                 className=\"p-2 hover:bg-muted rounded-lg transition-colors\"\n               >\n                 <Icon name=\"X\" size={20} className=\"text-muted-foreground\" />\n               </button>\n             </div>\n             \n             <div className=\"space-y-4 mb-6\">\n               <div>\n                 <label className=\"block text-sm font-medium text-foreground mb-2\">Card Number</label>\n                 <input\n                   type=\"text\"\n                   value={newCard.cardNumber}\n                   onChange={(e) => setNewCard({...newCard, cardNumber: e.target.value})}\n                   placeholder=\"1234 5678 9012 3456\"\n                   className=\"w-full p-3 bg-muted rounded-lg border border-border focus:outline-none focus:ring-2 focus:ring-primary\"\n                 />\n               </div>\n               <div>\n                 <label className=\"block text-sm font-medium text-foreground mb-2\">Card Holder Name</label>\n                 <input\n                   type=\"text\"\n                   value={newCard.cardHolder}\n                   onChange={(e) => setNewCard({...newCard, cardHolder: e.target.value})}\n                   placeholder=\"John Doe\"\n                   className=\"w-full p-3 bg-muted rounded-lg border border-border focus:outline-none focus:ring-2 focus:ring-primary\"\n                 />\n               </div>\n               <div className=\"grid grid-cols-2 gap-4\">\n                 <div>\n                   <label className=\"block text-sm font-medium text-foreground mb-2\">Expiry Date</label>\n                   <input\n                     type=\"text\"\n                     value={newCard.expiry}\n                     onChange={(e) => setNewCard({...newCard, expiry: e.target.value})}\n                     placeholder=\"MM/YY\"\n                     className=\"w-full p-3 bg-muted rounded-lg border border-border focus:outline-none focus:ring-2 focus:ring-primary\"\n                   />\n                 </div>\n                 <div>\n                   <label className=\"block text-sm font-medium text-foreground mb-2\">CVV</label>\n                   <input\n                     type=\"text\"\n                     value={newCard.cvv}\n                     onChange={(e) => setNewCard({...newCard, cvv: e.target.value})}\n                     placeholder=\"123\"\n                     className=\"w-full p-3 bg-muted rounded-lg border border-border focus:outline-none focus:ring-2 focus:ring-primary\"\n                   />\n                 </div>\n               </div>\n               <div>\n                 <label className=\"block text-sm font-medium text-foreground mb-2\">Card Type</label>\n                 <select\n                   value={newCard.type}\n                   onChange={(e) => setNewCard({...newCard, type: e.target.value})}\n                   className=\"w-full p-3 bg-muted rounded-lg border border-border focus:outline-none focus:ring-2 focus:ring-primary\"\n                 >\n                   <option value=\"Visa\">Visa</option>\n                   <option value=\"Mastercard\">Mastercard</option>\n                   <option value=\"American Express\">American Express</option>\n                   <option value=\"Discover\">Discover</option>\n                 </select>\n               </div>\n             </div>\n\n             <div className=\"flex gap-3\">\n               <Button\n                 variant=\"outline\"\n                 onClick={() => {\n                   setShowAddCard(false);\n                   setEditingCard(null);\n                 }}\n                 className=\"flex-1\"\n               >\n                 Cancel\n               </Button>\n               <Button\n                 onClick={() => {\n                   if (editingCard) {\n                     // Update existing card\n                     setSavedCards(savedCards.map(card => \n                       card.id === editingCard.id \n                         ? { ...card, ...newCard, cardNumber: `**** **** **** ${newCard.cardNumber.slice(-4)}` }\n                         : card\n                     ));\n                     setEditingCard(null);\n                   } else {\n                     // Add new card\n                     const newCardData = {\n                       id: Date.now(),\n                       ...newCard,\n                       cardNumber: `**** **** **** ${newCard.cardNumber.slice(-4)}`\n                     };\n                     setSavedCards([...savedCards, newCardData]);\n                     setShowAddCard(false);\n                   }\n                   setNewCard({\n                     cardNumber: '',\n                     cardHolder: '',\n                     expiry: '',\n                     cvv: '',\n                     type: 'Visa'\n                   });\n                 }}\n                 className=\"flex-1\"\n               >\n                 {editingCard ? 'Update Card' : 'Add Card'}\n               </Button>\n             </div>\n           </div>\n         </div>\n       )}\n     </div>\n   );\n };\n\nexport default Profile;\n","size_bytes":28985},"src/pages/slot-selection-booking/index.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport Icon from '../../components/AppIcon';\nimport BookingProgressHeader from '../../components/ui/BookingProgressHeader';\nimport BottomTabNavigation from '../../components/ui/BottomTabNavigation';\nimport BookingFloatingActions from '../../components/ui/BookingFloatingActions';\n\n// Import all components\nimport FloorLayoutVisualization from './components/FloorLayoutVisualization';\nimport VehicleSelector from './components/VehicleSelector';\nimport DateTimeSelector from './components/DateTimeSelector';\nimport PricingCalculator from './components/PricingCalculator';\nimport SlotDetailsPanel from './components/SlotDetailsPanel';\nimport AlternativeSlotSuggestions from './components/AlternativeSlotSuggestions';\n\nconst SlotSelectionBooking = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // State management\n  const [selectedFloor, setSelectedFloor] = useState(1);\n  const [selectedSlot, setSelectedSlot] = useState(null);\n  const [selectedVehicle, setSelectedVehicle] = useState(null);\n  \n  // Debug logging for state changes\n  useEffect(() => {\n    console.log('SlotSelection - Selected vehicle state changed:', selectedVehicle);\n  }, [selectedVehicle]);\n  const [selectedDateTime, setSelectedDateTime] = useState({\n    date: new Date()?.toISOString()?.split('T')?.[0],\n    time: '09:00',\n    duration: 2\n  });\n  const [duration, setDuration] = useState(2);\n  const [pricingInfo, setPricingInfo] = useState(null);\n  const [isQuickBooking, setIsQuickBooking] = useState(false);\n  const [showAlternatives, setShowAlternatives] = useState(false);\n\n  // State for the complete booking data\n  const [bookingData, setBookingData] = useState({});\n\n  // 30 Hyderabad locations\n  const hyderabadLocations = [\n    { id: 1, name: 'Hitech City Hub', address: 'Financial District, Hitech City, Hyderabad', lat: 17.4435, lng: 78.3772 },\n    { id: 2, name: 'Gachibowli Arena', address: 'IT Hub, Gachibowli, Hyderabad', lat: 17.4400, lng: 78.3482 },\n    { id: 3, name: 'Madhapur Center', address: 'HITEC City, Madhapur, Hyderabad', lat: 17.4481, lng: 78.3915 },\n    { id: 4, name: 'Jubilee Hills Plaza', address: 'Jubilee Hills Road No.36, Hyderabad', lat: 17.4305, lng: 78.4059 },\n    { id: 5, name: 'Banjara Hills Parking', address: 'Road No.12, Banjara Hills, Hyderabad', lat: 17.4123, lng: 78.4439 },\n    { id: 6, name: 'Secunderabad Plaza', address: 'SP Road, Secunderabad, Hyderabad', lat: 17.5040, lng: 78.5440 },\n    { id: 7, name: 'Begumpet Parking', address: 'Airport Road, Begumpet, Hyderabad', lat: 17.4520, lng: 78.4636 },\n    { id: 8, name: 'Kukatpally Center', address: 'JNTU, Kukatpally, Hyderabad', lat: 17.4840, lng: 78.4071 },\n    { id: 9, name: 'Kondapur Hub', address: 'Botanical Garden, Kondapur, Hyderabad', lat: 17.4615, lng: 78.3436 },\n    { id: 10, name: 'Miyapur Complex', address: 'Metro Station, Miyapur, Hyderabad', lat: 17.5108, lng: 78.3409 },\n    { id: 11, name: 'Ameerpet', address: 'Ameerpet, Hyderabad', lat: 17.4374, lng: 78.4482 },\n    { id: 12, name: 'SR Nagar', address: 'SR Nagar, Hyderabad', lat: 17.4431, lng: 78.4482 },\n    { id: 13, name: 'Punjagutta', address: 'Punjagutta, Hyderabad', lat: 17.4274, lng: 78.4594 },\n    { id: 14, name: 'Somajiguda', address: 'Somajiguda, Hyderabad', lat: 17.4239, lng: 78.4738 },\n    { id: 15, name: 'Abids', address: 'Abids, Hyderabad', lat: 17.3616, lng: 78.4747 },\n    { id: 16, name: 'Koti', address: 'Koti, Hyderabad', lat: 17.3679, lng: 78.4719 },\n    { id: 17, name: 'Charminar', address: 'Charminar, Hyderabad', lat: 17.3616, lng: 78.4747 },\n    { id: 18, name: 'Dilsukhnagar', address: 'Dilsukhnagar, Hyderabad', lat: 17.3687, lng: 78.5240 },\n    { id: 19, name: 'LB Nagar', address: 'LB Nagar, Hyderabad', lat: 17.3525, lng: 78.5520 },\n    { id: 20, name: 'Uppal', address: 'Uppal, Hyderabad', lat: 17.4065, lng: 78.5691 },\n    { id: 21, name: 'Kompally', address: 'Kompally, Hyderabad', lat: 17.5431, lng: 78.4897 },\n    { id: 22, name: 'Nizampet', address: 'Nizampet, Hyderabad', lat: 17.5079, lng: 78.3898 },\n    { id: 23, name: 'Manikonda', address: 'Manikonda, Hyderabad', lat: 17.4022, lng: 78.3400 },\n    { id: 24, name: 'Tolichowki', address: 'Tolichowki, Hyderabad', lat: 17.3914, lng: 78.4081 },\n    { id: 25, name: 'Mehdipatnam', address: 'Mehdipatnam, Hyderabad', lat: 17.3971, lng: 78.4398 },\n    { id: 26, name: 'Lakdikapool', address: 'Lakdikapool, Hyderabad', lat: 17.3953, lng: 78.4636 },\n    { id: 27, name: 'Nampally', address: 'Nampally, Hyderabad', lat: 17.3753, lng: 78.4744 },\n    { id: 28, name: 'Paradise Circle', address: 'Paradise Circle, Hyderabad', lat: 17.4398, lng: 78.4983 },\n    { id: 29, name: 'Tarnaka', address: 'Tarnaka, Hyderabad', lat: 17.4284, lng: 78.5204 },\n    { id: 30, name: 'Nacharam', address: 'Nacharam, Hyderabad', lat: 17.4284, lng: 78.5647 }\n  ];\n\n  const [selectedLocation, setSelectedLocation] = useState(null);\n  const [showParkingSlots, setShowParkingSlots] = useState(false);\n\n  // Handle URL parameters and state for direct navigation\n  useEffect(() => {\n    console.log('Slot selection page loaded with state:', location?.state); // Debug log\n\n    const urlParams = new URLSearchParams(window.location.search);\n    const locationName = urlParams.get('location');\n    const cityName = urlParams.get('city');\n\n    // Check if facility info is passed from state (highest priority)\n    if (location?.state?.facilityInfo) {\n      console.log('Using facility info from state:', location.state.facilityInfo); // Debug log\n      const facilityInfo = location.state.facilityInfo;\n      const newLocation = {\n        id: facilityInfo.id || Date.now(),\n        name: facilityInfo.name,\n        address: facilityInfo.address,\n        lat: facilityInfo.lat || facilityInfo.location?.lat || 17.3850,\n        lng: facilityInfo.lng || facilityInfo.location?.lng || 78.4867\n      };\n      setSelectedLocation(newLocation);\n      setShowParkingSlots(true);\n    } \n    // Handle direct navigation from home page\n    else {\n      console.log('Creating new location from URL params or fallback'); // Debug log\n      // Always set a selected location to show parking slots\n      const placeName = locationName || 'Hitech City'; // Default fallback\n      const foundLocation = hyderabadLocations.find(loc => \n        loc.name.toLowerCase().includes(placeName.toLowerCase())\n      );\n\n      if (foundLocation) {\n        setSelectedLocation(foundLocation);\n      } else {\n        // Create a location based on the place name\n        const newLocation = {\n          id: Date.now(),\n          name: placeName,\n          address: `${placeName}, ${cityName === 'bangalore' ? 'Bangalore' : 'Hyderabad'}`,\n          lat: cityName === 'bangalore' ? 12.9716 + (Math.random() - 0.5) * 0.1 : 17.3850 + (Math.random() - 0.5) * 0.1,\n          lng: cityName === 'bangalore' ? 77.5946 + (Math.random() - 0.5) * 0.1 : 78.4867 + (Math.random() - 0.5) * 0.1\n        };\n        setSelectedLocation(newLocation);\n      }\n\n      // Always show parking slots when coming from home page\n      setShowParkingSlots(true);\n    }\n  }, [location?.state]);\n\n  // Get facility info from previous page or selected location\n  const facilityInfo = selectedLocation ? {\n    id: selectedLocation.id,\n    name: selectedLocation.name,\n    address: selectedLocation.address,\n    lat: selectedLocation.lat,\n    lng: selectedLocation.lng,\n    location: { lat: selectedLocation.lat, lng: selectedLocation.lng }\n  } : location?.state?.facilityInfo || {\n    name: 'Select Location',\n    address: 'Choose a location in Hyderabad'\n  };\n\n  // Handle slot selection - Enhanced logging\n  const handleSlotSelect = (slot) => {\n    console.log('SlotSelection - handleSlotSelect called with:', slot);\n    \n    if (!slot) {\n      console.warn('SlotSelection - No slot data provided');\n      return;\n    }\n    \n    // Ensure slot has all required fields\n    const completeSlot = {\n      ...slot,\n      id: slot.id || slot.slotNumber || `slot-${Date.now()}`,\n      slotNumber: slot.slotNumber || slot.id || '1',\n      location: slot.location || `${slot.floorId === 1 ? '1st' : slot.floorId === 2 ? '2nd' : '3rd'} Floor ${slot.row || 'A'} Row ${slot.slotNumber || slot.id || '1'}th Parking Slot`,\n      status: slot.status || 'available',\n      walkingDistance: slot.walkingDistance || Math.floor(Math.random() * 100) + 50,\n      floorId: slot.floorId || selectedFloor\n    };\n    \n    console.log('SlotSelection - Setting complete slot data:', completeSlot);\n    setSelectedSlot(completeSlot);\n    setShowAlternatives(false);\n    console.log('SlotSelection - Selected slot updated successfully');\n  };\n\n  // Handle vehicle change - Enhanced with better state management\n  const handleVehicleChange = (vehicle) => {\n    console.log('SlotSelection - Received vehicle data:', vehicle); // Debug log\n    \n    // Only proceed if we have valid vehicle data\n    if (!vehicle || !vehicle.type) {\n      console.log('SlotSelection - Invalid vehicle data received'); \n      return;\n    }\n    \n    setSelectedVehicle(vehicle);\n    \n    // Reset slot selection when vehicle type changes\n    if (selectedSlot && selectedSlot?.vehicleType !== vehicle?.vehicleType) {\n      setSelectedSlot(null);\n    }\n    \n    // Store complete vehicle data for booking\n    setBookingData(prev => ({\n      ...prev,\n      vehicle: vehicle\n    }));\n    \n    console.log('SlotSelection - Vehicle updated, current vehicle:', vehicle);\n  };\n\n  // Handle date/time change\n  const handleDateTimeChange = (dateTime) => {\n    setSelectedDateTime(dateTime);\n  };\n\n  // Handle pricing update\n  const handlePriceChange = (pricing) => {\n    setPricingInfo(pricing);\n  };\n\n  // Handle location selection\n  const handleLocationSelect = (locationId) => {\n    const location = hyderabadLocations.find(loc => loc.id === parseInt(locationId));\n    setSelectedLocation(location);\n    setShowParkingSlots(!!location);\n    setSelectedSlot(null); // Reset slot when location changes\n  };\n\n  // Handle booking toggle\n  const handleBookingToggle = () => {\n    setIsQuickBooking(!isQuickBooking);\n  };\n\n  // Handle proceed to payment - Enhanced validation and data handling\n  const handleProceedToPayment = () => {\n    console.log('=== PROCEED TO PAYMENT CLICKED ===');\n    console.log('Selected Location:', selectedLocation);\n    console.log('Facility Info:', facilityInfo);\n    console.log('Selected Slot:', selectedSlot);\n    console.log('Pricing Info:', pricingInfo);\n    console.log('Selected Vehicle:', selectedVehicle);\n    console.log('Selected DateTime:', selectedDateTime);\n    console.log('Current URL:', window.location.href);\n    console.log('Navigate function available:', typeof navigate === 'function');\n\n    // Enhanced validation with more specific error messages\n    if (!selectedVehicle || !selectedVehicle.type) {\n      console.error('Validation failed: No vehicle selected');\n      alert('Please select a vehicle type before proceeding.');\n      return;\n    }\n\n    if (!selectedSlot) {\n      console.error('Validation failed: No slot selected');\n      alert('Please select a parking slot before proceeding.');\n      return;\n    }\n\n    // Ensure we have proper facility info - prioritize selectedLocation over facilityInfo\n    const actualFacilityInfo = selectedLocation || facilityInfo;\n    \n    if (!actualFacilityInfo || actualFacilityInfo.name === 'Select Location') {\n      console.error('Validation failed: No location selected');\n      alert('Please select a location before proceeding.');\n      return;\n    }\n\n    console.log('All validations passed, proceeding with navigation...');\n\n    // Create proper slot data with better fallbacks\n    const slotData = {\n      location: selectedSlot?.location || `${selectedFloor === 1 ? '1st' : selectedFloor === 2 ? '2nd' : '3rd'} Floor A Row 1st Parking Slot`,\n      floor: selectedFloor === 1 ? '1st Floor' : selectedFloor === 2 ? '2nd Floor' : '3rd Floor',\n      row: 'A Row',\n      number: selectedSlot?.slotNumber || selectedSlot?.id || '1',\n      type: selectedSlot?.status === 'available' ? 'Standard' : 'Premium'\n    };\n\n    // Use actual pricing or fallback\n    const actualPricing = pricingInfo || {\n      totalCost: 50,\n      baseRate: 45,\n      serviceFee: 2.50,\n      tax: 2.50\n    };\n\n    // Create complete booking data with all required fields\n    const completeBookingData = {\n      facility: {\n        id: actualFacilityInfo?.id || Date.now(),\n        name: actualFacilityInfo?.name || 'Hitech City Hub',\n        address: actualFacilityInfo?.address || 'Financial District, Hitech City, Hyderabad',\n        location: { \n          lat: actualFacilityInfo?.lat || 17.3850, \n          lng: actualFacilityInfo?.lng || 78.4867 \n        },\n        rating: actualFacilityInfo?.rating || 4.8,\n        reviews: actualFacilityInfo?.reviews || 324\n      },\n      slot: slotData,\n      vehicle: {\n        type: selectedVehicle.type || selectedVehicle.name || 'Four Wheeler',\n        vehicleType: selectedVehicle.vehicleType || 'four-wheeler',\n        model: selectedVehicle.model || selectedVehicle.name || selectedVehicle.type || 'Vehicle Model',\n        name: selectedVehicle.name || selectedVehicle.model || selectedVehicle.type || 'Vehicle',\n        label: selectedVehicle.label || selectedVehicle.name || selectedVehicle.type || 'Vehicle',\n        image: selectedVehicle.image || 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop',\n        category: selectedVehicle.category || selectedVehicle.type || 'Vehicle'\n      },\n      checkIn: {\n        date: selectedDateTime?.date || new Date().toISOString().split('T')[0],\n        time: selectedDateTime?.time || '09:00'\n      },\n      checkOut: {\n        date: selectedDateTime?.date || new Date().toISOString().split('T')[0],\n        time: (() => {\n          const currentDate = selectedDateTime?.date || new Date().toISOString().split('T')[0];\n          const currentTime = selectedDateTime?.time || '09:00';\n          const currentDuration = selectedDateTime?.duration || duration;\n          const startTime = new Date(`${currentDate}T${currentTime}`);\n          const endTime = new Date(startTime.getTime() + currentDuration * 60 * 60 * 1000);\n          return endTime.toTimeString().slice(0, 5);\n        })()\n      },\n      duration: `${selectedDateTime?.duration || duration} hours`,\n      pricing: actualPricing,\n      isQuickBooking: isQuickBooking || false\n    };\n\n    // Debug log to verify all data\n    console.log('Complete booking data being passed:', completeBookingData);\n    console.log('Facility data valid:', !!completeBookingData.facility.name);\n    console.log('Vehicle data valid:', !!completeBookingData.vehicle.type);\n    console.log('Slot data valid:', !!completeBookingData.slot.location);\n\n    // Store booking data in localStorage as backup\n    try {\n      localStorage.setItem('pendingBookingData', JSON.stringify(completeBookingData));\n      console.log('Booking data stored in localStorage successfully');\n    } catch (error) {\n      console.error('Failed to store booking data in localStorage:', error);\n    }\n\n    // Navigate with proper error handling\n    try {\n      console.log('=== NAVIGATING TO PAYMENT PAGE ===');\n      console.log('Using React Router navigate with state:', completeBookingData);\n      \n      navigate('/booking-confirmation-payment', {\n        state: { bookingData: completeBookingData },\n        replace: false\n      });\n      \n      console.log('Navigation call completed successfully');\n    } catch (error) {\n      console.error('Navigation failed:', error);\n      alert('Navigation failed: ' + error.message);\n    }\n  };\n\n  // Show alternatives when slot becomes unavailable\n  useEffect(() => {\n    if (selectedSlot && selectedSlot?.status === 'reserved') {\n      setShowAlternatives(true);\n    }\n  }, [selectedSlot]);\n\n  // WebSocket simulation for real-time updates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // Simulate real-time slot status updates\n      if (selectedSlot && Math.random() < 0.1) { // 10% chance of status change\n        const newStatus = Math.random() < 0.5 ? 'available' : 'ending-soon';\n        setSelectedSlot(prev => ({\n          ...prev,\n          status: newStatus,\n          endTime: newStatus === 'ending-soon' ? new Date(Date.now() + Math.random() * 3600000) : null\n        }));\n      }\n    }, 10000); // Check every 10 seconds\n\n    return () => clearInterval(interval);\n  }, [selectedSlot]);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <BookingProgressHeader />\n      {/* Main Content */}\n      <div className=\"container-app py-6 pb-24 lg:pb-6\">\n        {/* Facility Info */}\n        <div className=\"mb-6\">\n          <h1 className=\"text-2xl font-semibold text-foreground mb-2\">\n            Select Your Parking Slot\n          </h1>\n          <p className=\"text-muted-foreground\">\n            {facilityInfo?.name} ‚Ä¢ {facilityInfo?.address}\n          </p>\n        </div>\n\n        {/* Responsive Layout - Single FloorLayoutVisualization */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-12 gap-3 lg:gap-6\">\n          {/* Floor Layout - Full width on mobile, 70% on desktop */}\n          <div className=\"lg:col-span-8 order-3 lg:order-1\">\n            <div className=\"space-y-6\">\n              <FloorLayoutVisualization\n                selectedFloor={selectedFloor}\n                onFloorChange={setSelectedFloor}\n                selectedSlot={selectedSlot}\n                onSlotSelect={handleSlotSelect}\n                vehicleType={selectedVehicle?.vehicleType}\n                className=\"overflow-hidden\"\n              />\n\n              {/* Alternative Suggestions */}\n              {showAlternatives && (\n                <AlternativeSlotSuggestions\n                  selectedSlot={selectedSlot}\n                  vehicleType={selectedVehicle?.vehicleType}\n                  dateTime={selectedDateTime}\n                  onSlotSelect={handleSlotSelect}\n                />\n              )}\n            </div>\n          </div>\n\n          {/* Controls Column - Stack on mobile, sidebar on desktop */}\n          <div className=\"lg:col-span-4 order-2 lg:order-2 space-y-3 lg:space-y-6\">\n            {/* Vehicle Selection */}\n            <div className=\"bg-card border border-border rounded-lg overflow-hidden\">\n              <VehicleSelector\n                selectedVehicle={selectedVehicle}\n                onVehicleChange={handleVehicleChange}\n                className=\"lg:p-0\"\n              />\n            </div>\n\n            {/* Date & Time */}\n            <div className=\"bg-card border border-border rounded-lg overflow-hidden\">\n              <div className=\"p-3 lg:p-4\">\n                <DateTimeSelector\n                  selectedDateTime={selectedDateTime}\n                  onDateTimeChange={handleDateTimeChange}\n                  duration={duration}\n                  onDurationChange={setDuration}\n                />\n              </div>\n            </div>\n\n            {/* Pricing - Show when slot selected */}\n            {selectedSlot && (\n              <div className=\"bg-card border border-border rounded-lg overflow-hidden\">\n                <PricingCalculator\n                  selectedSlot={selectedSlot}\n                  vehicleType={selectedVehicle?.vehicleType}\n                  duration={duration}\n                  dateTime={selectedDateTime}\n                  onPriceChange={handlePriceChange}\n                />\n              </div>\n            )}\n\n            {/* Slot Details Panel */}\n            {selectedSlot && (\n              <div className=\"bg-card border border-border rounded-lg overflow-hidden\">\n                <SlotDetailsPanel\n                  selectedSlot={selectedSlot}\n                  vehicleInfo={selectedVehicle}\n                  dateTime={selectedDateTime}\n                  pricingInfo={pricingInfo}\n                  onBookingToggle={handleBookingToggle}\n                  isQuickBooking={isQuickBooking}\n                  onProceedToPayment={handleProceedToPayment}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Mobile-specific sections */}\n        <div className=\"lg:hidden space-y-3 order-1\">\n          {/* Location Selection for Mobile when no location is selected */}\n          {!selectedLocation && (\n            <div className=\"bg-card border border-border rounded-lg p-3\">\n              <h3 className=\"font-semibold text-foreground mb-2 text-sm\">Select Location</h3>\n              <select\n                onChange={(e) => handleLocationSelect(e.target.value)}\n                className=\"w-full bg-background border border-border rounded-lg px-3 py-2 text-foreground text-sm\"\n                defaultValue=\"\"\n              >\n                <option value=\"\" disabled>Choose a location in Hyderabad</option>\n                {hyderabadLocations.map((location) => (\n                  <option key={location.id} value={location.id}>\n                    {location.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n          )}\n\n          {/* Location Info Mobile - Show when location is selected */}\n          {(selectedLocation || facilityInfo?.name !== 'Select Location') && (\n            <div className=\"bg-card border border-border rounded-lg p-3\">\n              <div className=\"flex items-center gap-2 mb-1\">\n                <Icon name=\"MapPin\" size={14} className=\"text-primary flex-shrink-0\" />\n                <h3 className=\"font-medium text-foreground text-sm truncate\">{selectedLocation?.name || facilityInfo?.name}</h3>\n              </div>\n              <p className=\"text-xs text-muted-foreground truncate\">{selectedLocation?.address || facilityInfo?.address}</p>\n            </div>\n          )}\n        </div>\n\n        \n\n\n        {/* Mobile Bottom Action Bar - Enhanced */}\n        <div className=\"lg:hidden fixed bottom-16 left-0 right-0 z-110 bg-card border-t border-border shadow-lg\">\n          <div className=\"p-4\">\n            {selectedSlot && selectedVehicle ? (\n              <>\n                {/* Quick Summary */}\n                <div className=\"mb-3 text-center\">\n                  <div className=\"text-xs text-muted-foreground\">\n                    {selectedSlot.location} ‚Ä¢ {selectedLocation?.name || facilityInfo?.name}\n                  </div>\n                  <div className=\"text-sm font-semibold text-foreground\">\n                    {pricingInfo?.totalCost ? \n                      `‚Çπ${pricingInfo?.totalCost?.toFixed(0)}` \n                      : '‚Çπ50'} for {duration} hours\n                  </div>\n                </div>\n\n                <button\n                  onClick={() => {\n                    console.log('=== MOBILE BOTTOM BUTTON CLICKED ===');\n                    console.log('Selected Slot exists:', !!selectedSlot);\n                    console.log('Selected Vehicle exists:', !!selectedVehicle);\n                    console.log('Pricing Info exists:', !!pricingInfo);\n                    console.log('Location exists:', !!selectedLocation);\n                    \n                    if (selectedSlot && selectedVehicle) {\n                      console.log('All requirements met, calling handleProceedToPayment');\n                      handleProceedToPayment();\n                    } else {\n                      const missingItems = [];\n                      if (!selectedVehicle) missingItems.push('vehicle');\n                      if (!selectedSlot) missingItems.push('parking slot');\n                      \n                      alert(`Please select: ${missingItems.join(' and ')} before proceeding.`);\n                    }\n                  }}\n                  disabled={selectedSlot?.status === 'reserved'}\n                  className=\"w-full bg-primary text-primary-foreground py-4 rounded-xl font-semibold text-base shadow-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-primary/90 transition-colors touch-target\"\n                >\n                  {selectedSlot?.status === 'reserved' ? 'Slot Unavailable' : 'Proceed to Payment'}\n                </button>\n              </>\n            ) : (\n              <div className=\"text-center py-2\">\n                <div className=\"text-sm text-muted-foreground\">\n                  {!selectedLocation ? 'Select a location to continue' :\n                   !selectedVehicle ? 'Select your vehicle type first' :\n                   !selectedSlot ? 'Choose a parking slot' : 'Loading...'}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n      {/* Navigation */}\n      <BottomTabNavigation />\n      <BookingFloatingActions />\n    </div>\n  );\n};\n\nexport default SlotSelectionBooking;\n","size_bytes":24775},"src/pages/user-authentication/index.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Icon from '../../components/AppIcon';\nimport Image from '../../components/AppImage';\nimport AuthTabs from './components/AuthTabs';\nimport LoginForm from './components/LoginForm';\nimport RegisterForm from './components/RegisterForm';\nimport SocialLogin from './components/SocialLogin';\nimport ForgotPasswordModal from './components/ForgotPasswordModal';\nimport TrustSignals from './components/TrustSignals';\nimport { useTheme } from '../../contexts/ThemeContext';\n\nconst UserAuthentication = () => {\n  const navigate = useNavigate();\n  const [activeTab, setActiveTab] = useState('login');\n  const [showForgotPassword, setShowForgotPassword] = useState(false);\n  const [showRegistrationSuccess, setShowRegistrationSuccess] = useState(false);\n  const [showLoginSuccess, setShowLoginSuccess] = useState(false);\n  const { theme, toggleTheme } = useTheme();\n\n  // Check if user just registered\n  useEffect(() => {\n    const registrationSuccess = localStorage.getItem('registrationSuccess');\n    if (registrationSuccess === 'true') {\n      setShowRegistrationSuccess(true);\n      setActiveTab('login');\n      localStorage.removeItem('registrationSuccess');\n      \n      // Auto-hide success message after 3 seconds\n      setTimeout(() => {\n        setShowRegistrationSuccess(false);\n      }, 3000);\n    }\n  }, []);\n\n  // Check if user just logged in\n  useEffect(() => {\n    const isAuthenticated = localStorage.getItem('isAuthenticated');\n    if (isAuthenticated === 'true') {\n      setShowLoginSuccess(true);\n      // Redirect to home page after showing success message\n      setTimeout(() => {\n        setShowLoginSuccess(false);\n        navigate('/home');\n      }, 2000); // Reduced to 2 seconds for faster redirect\n    }\n  }, [navigate]);\n\n  // Commented out automatic redirect for development/testing\n  // useEffect(() => {\n  //   const isAuthenticated = localStorage.getItem('isAuthenticated');\n  //   if (isAuthenticated === 'true') {\n  //     navigate('/location-search-map');\n  //   }\n  // }, [navigate]);\n\n  const handleTabChange = (tab) => {\n    setActiveTab(tab);\n  };\n\n  const handleForgotPassword = () => {\n    setShowForgotPassword(true);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border sticky top-0 z-50\">\n        <div className=\"container-app\">\n          <div className=\"flex items-center justify-between py-4\">\n            {/* Logo */}\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Icon name=\"Car\" size={20} color=\"white\" />\n              </div>\n              <div>\n                <h1 className=\"text-lg font-semibold text-foreground\">ParkSlot Pro</h1>\n                <p className=\"text-xs text-muted-foreground hidden sm:block\">Smart Parking Solutions</p>\n              </div>\n            </div>\n\n            {/* Language Selector and Theme Toggle */}\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <Icon name=\"Globe\" size={16} className=\"text-muted-foreground\" />\n                <select className=\"text-sm bg-transparent border-none text-muted-foreground focus:outline-none\">\n                  <option value=\"en\">English</option>\n                  <option value=\"es\">Espa√±ol</option>\n                  <option value=\"fr\">Fran√ßais</option>\n                </select>\n              </div>\n              \n              {/* Theme Toggle */}\n              <button \n                onClick={toggleTheme}\n                className=\"relative p-2 hover:bg-muted rounded-lg transition-colors group\"\n                title={theme === 'light' ? 'Switch to dark theme' : 'Switch to light theme'}\n              >\n                <Icon \n                  name={theme === 'light' ? 'Sun' : 'Moon'} \n                  size={16} \n                  className=\"text-muted-foreground group-hover:text-foreground transition-colors\" \n                />\n              </button>\n            </div>\n            \n            {/* Development Helper - Clear Auth State */}\n            {process.env.NODE_ENV === 'development' && (\n              <button\n                onClick={() => {\n                  localStorage.removeItem('isAuthenticated');\n                  localStorage.removeItem('user');\n                  window.location.reload();\n                }}\n                className=\"text-xs text-muted-foreground hover:text-foreground px-2 py-1 rounded border border-border hover:border-foreground transition-colors\"\n                title=\"Clear authentication state (dev only)\"\n              >\n                Clear Auth\n              </button>\n            )}\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"container-app py-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            {/* Left Side - Hero Content (Desktop Only) */}\n            <div className=\"hidden lg:block\">\n              <div className=\"relative\">\n                <Image\n                  src=\"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80\"\n                  alt=\"Modern parking facility with smart technology\"\n                  className=\"rounded-2xl shadow-2xl w-full h-96 object-cover\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 to-transparent rounded-2xl\" />\n                <div className=\"absolute bottom-6 left-6 text-white\">\n                  <h2 className=\"text-2xl font-bold mb-2\">Smart Parking Made Simple</h2>\n                  <p className=\"text-white/90 max-w-md\">\n                    Find, reserve, and pay for parking spots in seconds. Join thousands of satisfied users.\n                  </p>\n                </div>\n              </div>\n\n              {/* Features */}\n              <div className=\"grid grid-cols-2 gap-4 mt-8\">\n                <div className=\"flex items-center gap-3 p-4 bg-card rounded-lg border border-border\">\n                  <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                    <Icon name=\"MapPin\" size={20} className=\"text-primary\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-medium text-foreground\">Real-time Availability</h3>\n                    <p className=\"text-xs text-muted-foreground\">Live parking updates</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3 p-4 bg-card rounded-lg border border-border\">\n                  <div className=\"w-10 h-10 bg-success/10 rounded-lg flex items-center justify-center\">\n                    <Icon name=\"CreditCard\" size={20} className=\"text-success\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-medium text-foreground\">Secure Payments</h3>\n                    <p className=\"text-xs text-muted-foreground\">Multiple payment options</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3 p-4 bg-card rounded-lg border border-border\">\n                  <div className=\"w-10 h-10 bg-warning/10 rounded-lg flex items-center justify-center\">\n                    <Icon name=\"Clock\" size={20} className=\"text-warning\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-medium text-foreground\">Instant Booking</h3>\n                    <p className=\"text-xs text-muted-foreground\">Reserve in seconds</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3 p-4 bg-card rounded-lg border border-border\">\n                  <div className=\"w-10 h-10 bg-accent/10 rounded-lg flex items-center justify-center\">\n                    <Icon name=\"Smartphone\" size={20} className=\"text-accent\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-medium text-foreground\">Mobile Friendly</h3>\n                    <p className=\"text-xs text-muted-foreground\">Works on all devices</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Right Side - Authentication Form */}\n            <div className=\"w-full max-w-md mx-auto lg:mx-0\">\n              <div className=\"bg-card rounded-2xl shadow-xl border border-border p-8\">\n                {/* Mobile Hero */}\n                <div className=\"lg:hidden text-center mb-8\">\n                  <div className=\"w-16 h-16 bg-primary/10 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                    <Icon name=\"Car\" size={32} className=\"text-primary\" />\n                  </div>\n                  <h2 className=\"text-xl font-bold text-foreground mb-2\">Welcome to ParkSlot Pro</h2>\n                  <p className=\"text-muted-foreground text-sm\">\n                    Your smart parking solution starts here\n                  </p>\n                </div>\n\n                {/* Development Notice */}\n                {process.env.NODE_ENV === 'development' && (\n                  <div className=\"mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                    <p className=\"text-xs text-blue-800 text-center\">\n                      üöß Development Mode: Login/Signup page always shows for testing\n                    </p>\n                  </div>\n                )}\n\n                {/* Registration Success Message */}\n                {showRegistrationSuccess && (\n                  <div className=\"mb-4 p-4 bg-green-50 border border-green-200 rounded-lg animate-pulse\">\n                    <div className=\"flex items-center justify-center gap-2\">\n                      <div className=\"w-5 h-5 bg-green-500 rounded-full flex items-center justify-center\">\n                        <Icon name=\"Check\" size={12} color=\"white\" />\n                      </div>\n                      <p className=\"text-sm font-medium text-green-800\">\n                        üéâ Registration successful! Please sign in with your credentials.\n                      </p>\n                    </div>\n                  </div>\n                )}\n\n                {/* Login Success Message */}\n                {showLoginSuccess && (\n                  <div className=\"mb-4 p-4 bg-green-50 border border-green-200 rounded-lg animate-pulse\">\n                    <div className=\"flex items-center justify-center gap-2\">\n                      <div className=\"w-5 h-5 bg-green-500 rounded-full flex items-center justify-center\">\n                        <Icon name=\"Check\" size={12} color=\"white\" />\n                      </div>\n                      <p className=\"text-sm font-medium text-green-800\">\n                        ‚úÖ Login successful! Redirecting to home page...\n                      </p>\n                    </div>\n                  </div>\n                )}\n\n                {/* Auth Tabs */}\n                <AuthTabs activeTab={activeTab} onTabChange={handleTabChange} />\n\n                {/* Auth Forms */}\n                {activeTab === 'login' ? (\n                  <LoginForm onForgotPassword={handleForgotPassword} />\n                ) : (\n                  <RegisterForm />\n                )}\n\n                {/* Social Login */}\n                <div className=\"mt-6\">\n                  <SocialLogin />\n                </div>\n\n                {/* Trust Signals */}\n                <TrustSignals />\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      {/* Forgot Password Modal */}\n      <ForgotPasswordModal\n        isOpen={showForgotPassword}\n        onClose={() => setShowForgotPassword(false)}\n      />\n    </div>\n  );\n};\n\nexport default UserAuthentication;","size_bytes":11962},"src/pages/booking-confirmation-payment/components/BookingConfirmationButton.jsx":{"content":"import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst BookingConfirmationButton = ({ \n  isValid, \n  totalAmount, \n  onConfirmBooking,\n  isProcessing = false, // This prop is now handled differently in the edited snippet\n  disabled = false \n}) => {\n  const navigate = useNavigate();\n  const [isLocalProcessing, setIsLocalProcessing] = useState(false); // Renamed state for clarity\n  const [isSuccess, setIsSuccess] = useState(false);\n\n  const handleConfirmBooking = async () => {\n    // Added checks for isProcessing and isLocalProcessing\n    if (!isValid || disabled || isProcessing || isLocalProcessing) return;\n\n    setIsLocalProcessing(true);\n\n    try {\n      // Removed the simulated payment processing as it was likely causing issues.\n      // Call parent confirmation handler\n      if (onConfirmBooking) {\n        await onConfirmBooking();\n      }\n\n      setIsLocalProcessing(false);\n      setIsSuccess(true);\n\n      // Show success state briefly then navigate\n      setTimeout(() => {\n        navigate('/my-bookings-dashboard', { \n          state: { \n            bookingConfirmed: true,\n            showSuccessMessage: true \n          } \n        });\n      }, 2000);\n\n    } catch (error) {\n      setIsLocalProcessing(false);\n      console.error('Booking confirmation failed:', error);\n      // Added an alert for user feedback on payment failure\n      alert('Payment failed. Please try again.');\n    }\n  };\n\n  const getButtonContent = () => {\n    if (isSuccess) {\n      return (\n        <>\n          <Icon name=\"CheckCircle\" size={20} className=\"text-white\" />\n          Booking Confirmed!\n        </>\n      );\n    }\n\n    // Updated to check both isProcessing and isLocalProcessing\n    if (isProcessing || isLocalProcessing) {\n      return (\n        <>\n          <div className=\"animate-spin\">\n            <Icon name=\"Loader\" size={20} /> {/* Changed Icon name from Loader2 to Loader */}\n          </div>\n          Processing Payment...\n        </>\n      );\n    }\n\n    return (\n      <>\n        <Icon name=\"CreditCard\" size={20} />\n        Confirm Booking - ‚Çπ{totalAmount?.toFixed(2) || '43.20'} {/* Added fallback for totalAmount */}\n      </>\n    );\n  };\n\n  const getButtonVariant = () => {\n    if (isSuccess) return 'primary'; // Changed variant from 'success' to 'primary' for consistency\n    // Updated to check both isProcessing and isLocalProcessing\n    if (isProcessing || isLocalProcessing) return 'secondary';\n    return 'primary';\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Security Reminder */}\n      <div className=\"bg-muted/50 rounded-lg p-4\">\n        <div className=\"flex items-start gap-3\">\n          <Icon name=\"Shield\" size={20} className=\"text-green-600 mt-0.5\" /> {/* Changed text-success to text-green-600 */}\n          <div className=\"flex-1\">\n            <h4 className=\"text-sm font-medium text-foreground mb-1\">Secure Payment Processing</h4>\n            <p className=\"text-xs text-muted-foreground\">\n              Your payment information is encrypted and processed securely. \n              You will receive a confirmation email with your booking details and QR code.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Confirmation Button */}\n      <Button\n        onClick={handleConfirmBooking}\n        // Updated disabled condition\n        disabled={!isValid || disabled || isProcessing || isLocalProcessing}\n        variant={getButtonVariant()}\n        size=\"lg\"\n        // Added className for full width, centering, and gap\n        className=\"w-full h-14 text-lg font-semibold flex items-center justify-center gap-3 transition-all duration-200\"\n      >\n        {getButtonContent()}\n      </Button>\n\n      {/* Terms Reminder */}\n      {/* Simplified the terms reminder */}\n      <p className=\"text-xs text-muted-foreground text-center\">\n        By confirming this booking, you agree to our terms and conditions.\n      </p>\n\n      {/* Success Animation Overlay */}\n      {isSuccess && (\n        <div className=\"fixed inset-0 bg-background/80 backdrop-blur-sm flex items-center justify-center z-50\"> {/* Changed z-index */}\n          <div className=\"bg-card border border-border rounded-lg p-8 text-center space-y-4 animate-fade-in\">\n            <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto\"> {/* Changed bg-success/10 to bg-green-100 */}\n              <Icon name=\"CheckCircle\" size={32} className=\"text-green-600\" /> {/* Changed text-success to text-green-600 */}\n            </div>\n            <div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">Booking Confirmed!</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Redirecting to your bookings dashboard...\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BookingConfirmationButton;","size_bytes":5018},"src/pages/booking-confirmation-payment/components/BookingSummaryCard.jsx":{"content":"\nimport React from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst BookingSummaryCard = ({ bookingData }) => {\n  // Handle null/undefined bookingData with fallbacks\n  const facility = bookingData?.facility || {\n    name: 'Selected Location',\n    address: 'Selected Address',\n    rating: 4.8,\n    reviews: 324\n  };\n\n  const slot = bookingData?.slot || {\n    location: '1st Floor A Row 1st Parking Slot',\n    floor: '1st Floor',\n    row: 'A Row',\n    number: '1',\n    type: 'Standard'\n  };\n\n  const vehicle = bookingData?.vehicle || {\n    name: 'Selected Vehicle',\n    model: 'Vehicle Model',\n    type: 'Vehicle',\n    image: 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop'\n  };\n\n  const checkIn = bookingData?.checkIn || {\n    date: new Date().toISOString().split('T')[0],\n    time: '09:00'\n  };\n\n  const checkOut = bookingData?.checkOut || {\n    date: new Date().toISOString().split('T')[0],\n    time: '11:00'\n  };\n\n  const duration = bookingData?.duration || '2 hours';\n\n  // Format dates safely\n  const formatDate = (dateStr, timeStr) => {\n    try {\n      if (!dateStr || !timeStr) return 'Not specified';\n      const date = new Date(`${dateStr}T${timeStr}`);\n      return date.toLocaleDateString('en-US', {\n        weekday: 'short',\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      });\n    } catch (error) {\n      return 'Invalid date';\n    }\n  };\n\n  const formatTime = (timeStr) => {\n    try {\n      if (!timeStr) return 'Not specified';\n      const [hours, minutes] = timeStr.split(':');\n      const date = new Date();\n      date.setHours(parseInt(hours), parseInt(minutes));\n      return date.toLocaleTimeString('en-US', {\n        hour: 'numeric',\n        minute: '2-digit',\n        hour12: true\n      });\n    } catch (error) {\n      return timeStr || 'Invalid time';\n    }\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-xl overflow-hidden\">\n      {/* Header */}\n      <div className=\"bg-primary/5 border-b border-border p-4\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-1\">Booking Summary</h3>\n        <p className=\"text-sm text-muted-foreground\">Review your parking details</p>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-4 space-y-6\">\n        {/* Facility Information */}\n        <div>\n          <h4 className=\"font-medium text-foreground mb-3 flex items-center gap-2\">\n            <Icon name=\"MapPin\" size={16} className=\"text-primary\" />\n            Parking Facility\n          </h4>\n          <div className=\"bg-muted/20 rounded-lg p-3 space-y-2\">\n            <div>\n              <p className=\"font-medium text-foreground\">{facility.name}</p>\n              <p className=\"text-sm text-muted-foreground\">{facility.address}</p>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm\">\n              <div className=\"flex items-center gap-1\">\n                <Icon name=\"Star\" size={14} className=\"text-yellow-500 fill-current\" />\n                <span className=\"font-medium\">{facility.rating}</span>\n              </div>\n              <span className=\"text-muted-foreground\">({facility.reviews} reviews)</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Slot Information */}\n        <div>\n          <h4 className=\"font-medium text-foreground mb-3 flex items-center gap-2\">\n            <Icon name=\"Car\" size={16} className=\"text-primary\" />\n            Parking Slot\n          </h4>\n          <div className=\"bg-muted/20 rounded-lg p-3 space-y-2\">\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <p className=\"text-muted-foreground\">Location</p>\n                <p className=\"font-medium text-foreground\">{slot.location}</p>\n              </div>\n              <div>\n                <p className=\"text-muted-foreground\">Type</p>\n                <p className=\"font-medium text-foreground\">{slot.type}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Vehicle Information */}\n        <div>\n          <h4 className=\"font-medium text-foreground mb-3 flex items-center gap-2\">\n            <Icon name=\"Truck\" size={16} className=\"text-primary\" />\n            Vehicle Details\n          </h4>\n          <div className=\"bg-muted/20 rounded-lg p-3\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-12 h-12 rounded-lg overflow-hidden bg-muted\">\n                <img\n                  src={vehicle.image}\n                  alt={vehicle.name || vehicle.model || 'Vehicle'}\n                  className=\"w-full h-full object-cover\"\n                  onError={(e) => {\n                    e.target.src = 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop';\n                  }}\n                />\n              </div>\n              <div>\n                <p className=\"font-medium text-foreground\">{vehicle.name || vehicle.model || 'Selected Vehicle'}</p>\n                <p className=\"text-sm text-muted-foreground\">{vehicle.type || 'Vehicle Type'}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Date & Time Information */}\n        <div>\n          <h4 className=\"font-medium text-foreground mb-3 flex items-center gap-2\">\n            <Icon name=\"Clock\" size={16} className=\"text-primary\" />\n            Date & Time\n          </h4>\n          <div className=\"bg-muted/20 rounded-lg p-3 space-y-3\">\n            {/* Current Time Display */}\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 mb-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-blue-700 text-sm font-medium\">Current Time</span>\n                <span className=\"text-blue-900 font-semibold\">\n                  {new Date().toLocaleTimeString('en-US', {\n                    hour: 'numeric',\n                    minute: '2-digit',\n                    hour12: true,\n                    timeZoneName: 'short'\n                  })}\n                </span>\n              </div>\n              <div className=\"text-xs text-blue-600 mt-1\">\n                {new Date().toLocaleDateString('en-US', {\n                  weekday: 'long',\n                  year: 'numeric',\n                  month: 'long',\n                  day: 'numeric'\n                })}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <p className=\"text-muted-foreground\">Check-in</p>\n                <p className=\"font-medium text-foreground\">{formatDate(checkIn.date, checkIn.time)}</p>\n                <p className=\"text-sm text-muted-foreground\">{formatTime(checkIn.time)}</p>\n              </div>\n              <div>\n                <p className=\"text-muted-foreground\">Check-out</p>\n                <p className=\"font-medium text-foreground\">{formatDate(checkOut.date, checkOut.time)}</p>\n                <p className=\"text-sm text-muted-foreground\">{formatTime(checkOut.time)}</p>\n              </div>\n            </div>\n            \n            {/* Full Time Range Display */}\n            <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-3\">\n              <div className=\"text-center\">\n                <p className=\"text-sm text-muted-foreground mb-1\">Booking Time Range</p>\n                <p className=\"font-semibold text-foreground text-base\">\n                  {formatTime(checkIn.time)} - {formatTime(checkOut.time)}\n                </p>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  on {formatDate(checkIn.date, checkIn.time)}\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"pt-2 border-t border-border\">\n              <div className=\"flex justify-between items-center text-sm\">\n                <span className=\"text-muted-foreground\">Duration</span>\n                <span className=\"font-medium text-foreground\">{duration}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BookingSummaryCard;\n","size_bytes":8156},"src/pages/booking-confirmation-payment/components/BookingTermsSection.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\nimport { Checkbox } from '../../../components/ui/Checkbox';\n\nconst BookingTermsSection = ({ onTermsAcceptance, termsAccepted }) => {\n  const handleTermsChange = (checked) => {\n    onTermsAcceptance(checked);\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-xl p-6\">\n      <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center gap-2\">\n        <Icon name=\"FileText\" size={20} className=\"text-primary\" />\n        Terms & Conditions\n      </h3>\n\n      <div className=\"space-y-4\">\n        {/* Terms List */}\n        <div className=\"bg-muted/20 rounded-lg p-4 space-y-3 text-sm\">\n          <div className=\"flex items-start gap-2\">\n            <Icon name=\"Clock\" size={16} className=\"text-muted-foreground mt-0.5\" />\n            <p className=\"text-muted-foreground\">\n              <span className=\"font-medium text-foreground\">Cancellation Policy:</span>\n              Free cancellation up to 2 hours before your booking time.\n            </p>\n          </div>\n\n          <div className=\"flex items-start gap-2\">\n            <Icon name=\"Car\" size={16} className=\"text-muted-foreground mt-0.5\" />\n            <p className=\"text-muted-foreground\">\n              <span className=\"font-medium text-foreground\">Vehicle Policy:</span>\n              Only the registered vehicle type is allowed in the reserved slot.\n            </p>\n          </div>\n\n          <div className=\"flex items-start gap-2\">\n            <Icon name=\"CreditCard\" size={16} className=\"text-muted-foreground mt-0.5\" />\n            <p className=\"text-muted-foreground\">\n              <span className=\"font-medium text-foreground\">Payment:</span>\n              Full payment is required to confirm your booking.\n            </p>\n          </div>\n\n          <div className=\"flex items-start gap-2\">\n            <Icon name=\"Shield\" size={16} className=\"text-muted-foreground mt-0.5\" />\n            <p className=\"text-muted-foreground\">\n              <span className=\"font-medium text-foreground\">Liability:</span>\n              You are responsible for any damage to the facility or other vehicles.\n            </p>\n          </div>\n        </div>\n\n        {/* Terms Acceptance Checkbox */}\n        <div className=\"flex items-start gap-3 p-4 bg-primary/5 rounded-lg border border-primary/20\">\n          <Checkbox\n            id=\"terms-acceptance\"\n            checked={termsAccepted}\n            onChange={(e) => handleTermsChange(e.target.checked)}\n            className=\"mt-0.5\"\n          />\n          <label htmlFor=\"terms-acceptance\" className=\"text-sm text-foreground leading-relaxed cursor-pointer\">\n            I agree to the{' '}\n            <button className=\"text-primary hover:underline font-medium\">\n              Terms & Conditions\n            </button>\n            {' '}and{' '}\n            <button className=\"text-primary hover:underline font-medium\">\n              Privacy Policy\n            </button>\n            . I understand the cancellation policy and my responsibilities.\n          </label>\n        </div>\n\n        {/* Additional Info */}\n        <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n          <Icon name=\"Info\" size={14} />\n          <p>\n            By proceeding, you'll receive booking confirmation via email and SMS.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BookingTermsSection;\n","size_bytes":3451},"src/pages/booking-confirmation-payment/components/PaymentMethodSection.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst PaymentMethodSection = ({ onPaymentMethodChange, selectedMethod }) => {\n  const paymentMethods = [\n    {\n      id: 'card_1',\n      type: 'card',\n      name: 'Credit/Debit Card',\n      details: '**** **** **** 1234',\n      icon: 'CreditCard',\n      preferred: true\n    },\n    {\n      id: 'paypal',\n      type: 'paypal',\n      name: 'PayPal',\n      details: 'user@example.com',\n      icon: 'Wallet'\n    },\n    {\n      id: 'apple_pay',\n      type: 'apple_pay',\n      name: 'Apple Pay',\n      details: 'Touch ID or Face ID',\n      icon: 'Smartphone'\n    },\n    {\n      id: 'google_pay',\n      type: 'google_pay',\n      name: 'Google Pay',\n      details: 'Quick & Secure',\n      icon: 'Smartphone'\n    }\n  ];\n\n  const handleMethodSelect = (methodId) => {\n    onPaymentMethodChange(methodId);\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-xl p-6\">\n      <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center gap-2\">\n        <Icon name=\"CreditCard\" size={20} className=\"text-primary\" />\n        Payment Method\n      </h3>\n\n      <div className=\"space-y-3\">\n        {paymentMethods.map((method) => (\n          <div\n            key={method.id}\n            onClick={() => handleMethodSelect(method.id)}\n            className={`relative flex items-center gap-4 p-4 rounded-lg border-2 cursor-pointer transition-all duration-200 ${\n              selectedMethod === method.id\n                ? 'border-primary bg-primary/5'\n                : 'border-border bg-muted/20 hover:border-muted-foreground/30'\n            }`}\n          >\n            {/* Method Icon */}\n            <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${\n              selectedMethod === method.id ? 'bg-primary text-primary-foreground' : 'bg-muted'\n            }`}>\n              <Icon name={method.icon} size={20} />\n            </div>\n\n            {/* Method Details */}\n            <div className=\"flex-1\">\n              <div className=\"flex items-center gap-2\">\n                <h4 className=\"font-medium text-foreground\">{method.name}</h4>\n                {method.preferred && (\n                  <span className=\"px-2 py-1 text-xs font-medium bg-green-100 text-green-700 rounded-full\">\n                    Preferred\n                  </span>\n                )}\n              </div>\n              <p className=\"text-sm text-muted-foreground\">{method.details}</p>\n            </div>\n\n            {/* Selection Indicator */}\n            <div className={`w-5 h-5 rounded-full border-2 flex items-center justify-center ${\n              selectedMethod === method.id\n                ? 'border-primary bg-primary'\n                : 'border-muted-foreground/30'\n            }`}>\n              {selectedMethod === method.id && (\n                <div className=\"w-2 h-2 rounded-full bg-primary-foreground\" />\n              )}\n            </div>\n          </div>\n        ))}\n\n        {/* Add New Payment Method */}\n        <button className=\"w-full flex items-center justify-center gap-2 p-4 border-2 border-dashed border-muted-foreground/30 rounded-lg text-muted-foreground hover:border-primary hover:text-primary transition-colors\">\n          <Icon name=\"Plus\" size={20} />\n          <span className=\"font-medium\">Add New Payment Method</span>\n        </button>\n      </div>\n\n      {/* Security Note */}\n      <div className=\"mt-4 flex items-start gap-2 p-3 bg-green-50 border border-green-200 rounded-lg\">\n        <Icon name=\"Shield\" size={16} className=\"text-green-600 mt-0.5\" />\n        <div className=\"text-sm\">\n          <p className=\"font-medium text-green-800\">Secure Payment</p>\n          <p className=\"text-green-700\">Your payment information is encrypted and secure.</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PaymentMethodSection;\n","size_bytes":3876},"src/pages/booking-confirmation-payment/components/PricingBreakdown.jsx":{"content":"\nimport React from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst PricingBreakdown = ({ pricingData }) => {\n  const {\n    baseRate = 45.00,\n    timeAdjustment = 5.00,\n    vehicleFee = 0.00,\n    discounts = [],\n    subtotal = 37.50,\n    serviceFee = 2.50,\n    tax = 3.20,\n    taxRate = 8.5,\n    total = 43.20,\n    totalSavings = 12.50,\n    duration = \"2 hours\"\n  } = pricingData || {};\n\n  return (\n    <div className=\"bg-card border border-border rounded-xl overflow-hidden\">\n      {/* Header */}\n      <div className=\"bg-primary/5 border-b border-border p-4\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-1\">Pricing Breakdown</h3>\n        <p className=\"text-sm text-muted-foreground\">Detailed cost calculation for {duration}</p>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-4 space-y-4\">\n        {/* Base Pricing */}\n        <div className=\"space-y-3\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm text-muted-foreground\">Base rate ({duration})</span>\n            <span className=\"font-medium text-foreground\">‚Çπ{baseRate.toFixed(2)}</span>\n          </div>\n          \n          {timeAdjustment > 0 && (\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-muted-foreground\">Time adjustment</span>\n              <span className=\"font-medium text-foreground\">+‚Çπ{timeAdjustment.toFixed(2)}</span>\n            </div>\n          )}\n          \n          {vehicleFee > 0 && (\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-muted-foreground\">Vehicle fee</span>\n              <span className=\"font-medium text-foreground\">+‚Çπ{vehicleFee.toFixed(2)}</span>\n            </div>\n          )}\n        </div>\n\n        {/* Discounts */}\n        {discounts && discounts.length > 0 && (\n          <div className=\"space-y-3 border-t border-border pt-4\">\n            <h4 className=\"text-sm font-medium text-foreground flex items-center gap-2\">\n              <Icon name=\"Tag\" size={14} className=\"text-green-600\" />\n              Applied Discounts\n            </h4>\n            {discounts.map((discount, index) => (\n              <div key={index} className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-green-600\">{discount.name}</span>\n                <span className=\"font-medium text-green-600\">-‚Çπ{discount.amount.toFixed(2)}</span>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Subtotal */}\n        <div className=\"border-t border-border pt-4\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"font-medium text-foreground\">Subtotal</span>\n            <span className=\"font-medium text-foreground\">‚Çπ{subtotal.toFixed(2)}</span>\n          </div>\n        </div>\n\n        {/* Fees and Taxes */}\n        <div className=\"space-y-3\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm text-muted-foreground\">Service fee</span>\n            <span className=\"font-medium text-foreground\">‚Çπ{serviceFee.toFixed(2)}</span>\n          </div>\n          \n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm text-muted-foreground\">Tax ({taxRate}%)</span>\n            <span className=\"font-medium text-foreground\">‚Çπ{tax.toFixed(2)}</span>\n          </div>\n        </div>\n\n        {/* Total */}\n        <div className=\"border-t-2 border-primary/20 pt-4\">\n          <div className=\"flex justify-between items-center mb-2\">\n            <span className=\"text-lg font-bold text-foreground\">Total Amount</span>\n            <span className=\"text-lg font-bold text-primary\">‚Çπ{total.toFixed(2)}</span>\n          </div>\n          \n          {totalSavings > 0 && (\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-green-600\">You saved</span>\n              <span className=\"text-sm font-medium text-green-600\">‚Çπ{totalSavings.toFixed(2)}</span>\n            </div>\n          )}\n        </div>\n\n        {/* Payment Info */}\n        <div className=\"bg-muted/20 rounded-lg p-3 mt-4\">\n          <div className=\"flex items-start gap-2\">\n            <Icon name=\"Info\" size={16} className=\"text-primary mt-0.5\" />\n            <div className=\"text-xs text-muted-foreground\">\n              <p className=\"font-medium text-foreground mb-1\">Payment Information</p>\n              <p>‚Ä¢ Full payment is required to confirm booking</p>\n              <p>‚Ä¢ Refunds processed within 3-5 business days</p>\n              <p>‚Ä¢ Receipt will be sent via email</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PricingBreakdown;\n","size_bytes":4814},"src/pages/facility-details-floor-selection/components/AmenitiesTab.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst AmenitiesTab = ({ facility }) => {\n  const securityFeatures = [\n    { icon: 'Shield', label: '24/7 Security Guards', available: true },\n    { icon: 'Camera', label: 'CCTV Surveillance', available: true },\n    { icon: 'Lock', label: 'Secure Entry/Exit', available: true },\n    { icon: 'AlertTriangle', label: 'Emergency Assistance', available: true },\n    { icon: 'Eye', label: 'Motion Sensors', available: facility?.hasMotionSensors },\n    { icon: 'Bell', label: 'Alarm System', available: facility?.hasAlarmSystem }\n  ];\n\n  const paymentOptions = [\n    { icon: 'CreditCard', label: 'Credit/Debit Cards', available: true },\n    { icon: 'Smartphone', label: 'Mobile Payments', available: true },\n    { icon: 'QrCode', label: 'QR Code Payments', available: true },\n    { icon: 'DollarSign', label: 'Cash Payments', available: true },\n    { icon: 'Wallet', label: 'Digital Wallets', available: true },\n    { icon: 'Coins', label: 'Contactless Payments', available: true }\n  ];\n\n  const accessibilityFeatures = [\n    { icon: 'Accessibility', label: 'Wheelchair Accessible', available: facility?.isWheelchairAccessible },\n    { icon: 'Car', label: 'Disabled Parking Spots', available: facility?.hasDisabledSpots },\n    { icon: 'Elevator', label: 'Elevator Access', available: facility?.hasElevator },\n    { icon: 'Users', label: 'Wide Parking Spaces', available: facility?.hasWideSpaces },\n    { icon: 'Volume2', label: 'Audio Assistance', available: facility?.hasAudioAssistance },\n    { icon: 'Eye', label: 'Visual Indicators', available: facility?.hasVisualIndicators }\n  ];\n\n  const additionalServices = [\n    { icon: 'Zap', label: 'EV Charging Stations', available: facility?.hasEVCharging, description: '4 fast charging ports available' },\n    { icon: 'Car', label: 'Valet Parking', available: facility?.hasValet, description: 'Professional valet service' },\n    { icon: 'Wrench', label: 'Car Wash Service', available: facility?.hasCarWash, description: 'On-site car cleaning' },\n    { icon: 'Coffee', label: 'Waiting Area', available: facility?.hasWaitingArea, description: 'Comfortable seating with refreshments' },\n    { icon: 'Wifi', label: 'Free WiFi', available: facility?.hasWifi, description: 'High-speed internet access' },\n    { icon: 'ShoppingBag', label: 'Nearby Shopping', available: true, description: 'Mall and shops within walking distance' }\n  ];\n\n  const FeatureGrid = ({ title, features, showDescription = false }) => (\n    <div>\n      <h3 className=\"text-lg font-semibold text-foreground mb-4\">{title}</h3>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {features?.map((feature, index) => (\n          <div\n            key={index}\n            className={`flex items-start gap-3 p-4 rounded-lg border ${\n              feature?.available\n                ? 'border-success/20 bg-success/5' :'border-border bg-muted'\n            }`}\n          >\n            <Icon\n              name={feature?.icon}\n              size={20}\n              className={feature?.available ? 'text-success' : 'text-muted-foreground'}\n            />\n            <div className=\"flex-1\">\n              <div className={`font-medium ${\n                feature?.available ? 'text-foreground' : 'text-muted-foreground'\n              }`}>\n                {feature?.label}\n              </div>\n              {showDescription && feature?.description && (\n                <div className=\"text-sm text-muted-foreground mt-1\">\n                  {feature?.description}\n                </div>\n              )}\n            </div>\n            {feature?.available && (\n              <Icon name=\"Check\" size={16} className=\"text-success\" />\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-8\">\n      <FeatureGrid title=\"Security Features\" features={securityFeatures} />\n      <FeatureGrid title=\"Payment Options\" features={paymentOptions} />\n      <FeatureGrid title=\"Accessibility\" features={accessibilityFeatures} />\n      <FeatureGrid title=\"Additional Services\" features={additionalServices} showDescription={true} />\n\n      {/* Facility Certifications */}\n      <div>\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Certifications & Compliance</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"bg-card border border-border p-4 rounded-lg text-center\">\n            <Icon name=\"Award\" size={32} className=\"text-primary mx-auto mb-2\" />\n            <div className=\"font-medium text-foreground\">ISO 9001</div>\n            <div className=\"text-sm text-muted-foreground\">Quality Management</div>\n          </div>\n          <div className=\"bg-card border border-border p-4 rounded-lg text-center\">\n            <Icon name=\"Shield\" size={32} className=\"text-success mx-auto mb-2\" />\n            <div className=\"font-medium text-foreground\">Security Certified</div>\n            <div className=\"text-sm text-muted-foreground\">Advanced Security Standards</div>\n          </div>\n          <div className=\"bg-card border border-border p-4 rounded-lg text-center\">\n            <Icon name=\"Leaf\" size={32} className=\"text-accent mx-auto mb-2\" />\n            <div className=\"font-medium text-foreground\">Green Building</div>\n            <div className=\"text-sm text-muted-foreground\">Eco-Friendly Certified</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Operating Standards */}\n      <div>\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Operating Standards</h3>\n        <div className=\"bg-muted p-6 rounded-lg\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"font-medium text-foreground mb-3\">Safety Protocols</h4>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li className=\"flex items-center gap-2\">\n                  <Icon name=\"Check\" size={16} className=\"text-success\" />\n                  Regular safety inspections\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <Icon name=\"Check\" size={16} className=\"text-success\" />\n                  Fire safety compliance\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <Icon name=\"Check\" size={16} className=\"text-success\" />\n                  Emergency evacuation plans\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <Icon name=\"Check\" size={16} className=\"text-success\" />\n                  First aid facilities\n                </li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-medium text-foreground mb-3\">Service Standards</h4>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li className=\"flex items-center gap-2\">\n                  <Icon name=\"Check\" size={16} className=\"text-success\" />\n                  24/7 customer support\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <Icon name=\"Check\" size={16} className=\"text-success\" />\n                  Regular maintenance schedule\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <Icon name=\"Check\" size={16} className=\"text-success\" />\n                  Clean and well-lit environment\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <Icon name=\"Check\" size={16} className=\"text-success\" />\n                  Professional staff training\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AmenitiesTab;","size_bytes":7812},"src/pages/facility-details-floor-selection/components/BreadcrumbNavigation.jsx":{"content":"import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst BreadcrumbNavigation = ({ facility, className = '' }) => {\n  const navigate = useNavigate();\n\n  const breadcrumbs = [\n    { label: 'Search', path: '/location-search-map' },\n    { label: facility?.name, path: null, current: true }\n  ];\n\n  const handleNavigate = (path) => {\n    if (path) {\n      navigate(path);\n    }\n  };\n\n  return (\n    <nav className={`bg-muted/50 border-b border-border ${className}`}>\n      <div className=\"container-app py-3\">\n        <div className=\"flex items-center gap-2 text-sm\">\n          {breadcrumbs?.map((breadcrumb, index) => (\n            <React.Fragment key={index}>\n              {index > 0 && (\n                <Icon name=\"ChevronRight\" size={16} className=\"text-muted-foreground\" />\n              )}\n              {breadcrumb?.current ? (\n                <span className=\"text-foreground font-medium truncate\">\n                  {breadcrumb?.label}\n                </span>\n              ) : (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => handleNavigate(breadcrumb?.path)}\n                  className=\"text-muted-foreground hover:text-foreground p-0 h-auto font-normal\"\n                >\n                  {breadcrumb?.label}\n                </Button>\n              )}\n            </React.Fragment>\n          ))}\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default BreadcrumbNavigation;","size_bytes":1589},"src/pages/facility-details-floor-selection/components/FacilityHero.jsx":{"content":"import React, { useState } from 'react';\nimport Image from '../../../components/AppImage';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst FacilityHero = ({ facility, onBookNow }) => {\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n\n  const nextImage = () => {\n    setCurrentImageIndex((prev) => \n      prev === facility?.images?.length - 1 ? 0 : prev + 1\n    );\n  };\n\n  const prevImage = () => {\n    setCurrentImageIndex((prev) => \n      prev === 0 ? facility?.images?.length - 1 : prev - 1\n    );\n  };\n\n  const getRatingStars = (rating) => {\n    const stars = [];\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 !== 0;\n\n    for (let i = 0; i < fullStars; i++) {\n      stars?.push(<Icon key={i} name=\"Star\" size={16} className=\"text-warning fill-current\" />);\n    }\n\n    if (hasHalfStar) {\n      stars?.push(<Icon key=\"half\" name=\"StarHalf\" size={16} className=\"text-warning fill-current\" />);\n    }\n\n    const remainingStars = 5 - Math.ceil(rating);\n    for (let i = 0; i < remainingStars; i++) {\n      stars?.push(<Icon key={`empty-${i}`} name=\"Star\" size={16} className=\"text-muted-foreground\" />);\n    }\n\n    return stars;\n  };\n\n  return (\n    <div className=\"bg-card\">\n      {/* Image Carousel */}\n      <div className=\"relative h-64 md:h-80 overflow-hidden\">\n        <Image\n          src={facility?.images?.[currentImageIndex]}\n          alt={`${facility?.name} - Image ${currentImageIndex + 1}`}\n          className=\"w-full h-full object-cover\"\n        />\n        \n        {/* Navigation Arrows */}\n        {facility?.images?.length > 1 && (\n          <>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={prevImage}\n              className=\"absolute left-2 top-1/2 transform -translate-y-1/2 bg-black/50 text-white hover:bg-black/70 w-10 h-10\"\n            >\n              <Icon name=\"ChevronLeft\" size={20} />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={nextImage}\n              className=\"absolute right-2 top-1/2 transform -translate-y-1/2 bg-black/50 text-white hover:bg-black/70 w-10 h-10\"\n            >\n              <Icon name=\"ChevronRight\" size={20} />\n            </Button>\n          </>\n        )}\n\n        {/* Image Indicators */}\n        {facility?.images?.length > 1 && (\n          <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 flex gap-2\">\n            {facility?.images?.map((_, index) => (\n              <button\n                key={index}\n                onClick={() => setCurrentImageIndex(index)}\n                className={`w-2 h-2 rounded-full transition-colors ${\n                  index === currentImageIndex ? 'bg-white' : 'bg-white/50'\n                }`}\n              />\n            ))}\n          </div>\n        )}\n\n        {/* Status Badge */}\n        <div className=\"absolute top-4 left-4\">\n          <div className={`px-3 py-1 rounded-full text-sm font-medium ${\n            facility?.isOpen ? 'bg-success text-success-foreground' : 'bg-destructive text-destructive-foreground'\n          }`}>\n            {facility?.isOpen ? 'Open Now' : 'Closed'}\n          </div>\n        </div>\n      </div>\n      {/* Facility Information */}\n      <div className=\"p-6\">\n        <div className=\"flex flex-col lg:flex-row lg:items-start lg:justify-between gap-4\">\n          <div className=\"flex-1\">\n            <h1 className=\"text-2xl font-bold text-foreground mb-2\">{facility?.name}</h1>\n            \n            <div className=\"flex items-center gap-2 text-muted-foreground mb-3\">\n              <Icon name=\"MapPin\" size={16} />\n              <span className=\"text-sm\">{facility?.address}</span>\n            </div>\n\n            <div className=\"flex items-center gap-4 mb-4\">\n              <div className=\"flex items-center gap-1\">\n                {getRatingStars(facility?.rating)}\n                <span className=\"text-sm font-medium ml-1\">{facility?.rating}</span>\n                <span className=\"text-sm text-muted-foreground\">({facility?.reviewCount} reviews)</span>\n              </div>\n              \n              <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                <Icon name=\"Clock\" size={16} />\n                <span>{facility?.distance}</span>\n              </div>\n            </div>\n\n            {/* Key Metrics */}\n            <div className=\"grid grid-cols-3 gap-4 mb-6\">\n              <div className=\"text-center p-3 bg-muted rounded-lg\">\n                <div className=\"text-2xl font-bold text-foreground\">{facility?.totalSlots}</div>\n                <div className=\"text-sm text-muted-foreground\">Total Slots</div>\n              </div>\n              <div className=\"text-center p-3 bg-muted rounded-lg\">\n                <div className=\"text-2xl font-bold text-success\">{facility?.availableSlots}</div>\n                <div className=\"text-sm text-muted-foreground\">Available</div>\n              </div>\n              <div className=\"text-center p-3 bg-muted rounded-lg\">\n                <div className=\"text-2xl font-bold text-primary\">‚Çπ{facility?.hourlyRate}</div>\n                <div className=\"text-sm text-muted-foreground\">Per Hour</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"lg:w-64\">\n            <div className=\"bg-muted p-4 rounded-lg\">\n              <div className=\"text-sm text-muted-foreground mb-2\">Starting from</div>\n              <div className=\"text-2xl font-bold text-foreground mb-1\">‚Çπ{facility?.hourlyRate}/hour</div>\n              <div className=\"text-sm text-success mb-4\">Save up to 20% with advance booking</div>\n              \n              <Button\n                variant=\"primary\"\n                fullWidth\n                onClick={onBookNow}\n                iconName=\"Calendar\"\n                iconPosition=\"left\"\n              >\n                Book Now\n              </Button>\n              \n              <div className=\"flex gap-2 mt-3\">\n                <Button variant=\"outline\" size=\"sm\" fullWidth iconName=\"Heart\">\n                  Save\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" fullWidth iconName=\"Share\">\n                  Share\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FacilityHero;","size_bytes":6475},"src/pages/facility-details-floor-selection/components/FacilityTabs.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\n\n\nconst FacilityTabs = ({ facility, activeTab, onTabChange, children }) => {\n  const tabs = [\n    { id: 'overview', label: 'Overview', icon: 'Info' },\n    { id: 'floors', label: 'Floors', icon: 'Building' },\n    { id: 'amenities', label: 'Amenities', icon: 'Star' },\n    { id: 'reviews', label: 'Reviews', icon: 'MessageSquare' }\n  ];\n\n  return (\n    <div className=\"bg-card\">\n      {/* Tab Navigation */}\n      <div className=\"border-b border-border\">\n        <div className=\"container-app\">\n          <div className=\"flex overflow-x-auto scrollbar-hide\">\n            {tabs?.map((tab) => (\n              <button\n                key={tab?.id}\n                onClick={() => onTabChange(tab?.id)}\n                className={`flex items-center gap-2 px-4 py-3 text-sm font-medium whitespace-nowrap border-b-2 transition-colors ${\n                  activeTab === tab?.id\n                    ? 'border-primary text-primary' :'border-transparent text-muted-foreground hover:text-foreground'\n                }`}\n              >\n                <Icon name={tab?.icon} size={16} />\n                {tab?.label}\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n      {/* Tab Content */}\n      <div className=\"container-app py-6\">\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default FacilityTabs;","size_bytes":1426},"src/pages/facility-details-floor-selection/components/FloorsTab.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Select from '../../../components/ui/Select';\n\nconst FloorsTab = ({ facility, onFloorSelect, onBookSlot }) => {\n  const [selectedFloor, setSelectedFloor] = useState(facility?.floors?.[0]);\n  const [selectedVehicleType, setSelectedVehicleType] = useState('car');\n  const [showTimeProjection, setShowTimeProjection] = useState(false);\n\n  const vehicleTypeOptions = [\n    { value: 'car', label: 'Car (4-Wheeler)' },\n    { value: 'bike', label: 'Bike (2-Wheeler)' }\n  ];\n\n  const getSlotStatusColor = (status) => {\n    switch (status) {\n      case 'available':\n        return 'bg-success';\n      case 'reserved':\n        return 'bg-destructive';\n      case 'maintenance':\n        return 'bg-warning';\n      default:\n        return 'bg-muted';\n    }\n  };\n\n  const getSlotStatusText = (status) => {\n    switch (status) {\n      case 'available':\n        return 'Available';\n      case 'reserved':\n        return 'Reserved';\n      case 'maintenance':\n        return 'Maintenance';\n      default:\n        return 'Unknown';\n    }\n  };\n\n  const handleFloorChange = (floor) => {\n    setSelectedFloor(floor);\n    onFloorSelect(floor);\n  };\n\n  const filteredSlots = selectedFloor?.slots?.filter(slot => \n    slot?.vehicleType === selectedVehicleType || slot?.vehicleType === 'both'\n  );\n\n  const availableCount = filteredSlots?.filter(slot => slot?.status === 'available')?.length;\n  const reservedCount = filteredSlots?.filter(slot => slot?.status === 'reserved')?.length;\n  const maintenanceCount = filteredSlots?.filter(slot => slot?.status === 'maintenance')?.length;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Vehicle Type Selector */}\n      <div className=\"bg-muted p-4 rounded-lg\">\n        <Select\n          label=\"Vehicle Type\"\n          options={vehicleTypeOptions}\n          value={selectedVehicleType}\n          onChange={setSelectedVehicleType}\n          className=\"max-w-xs\"\n        />\n      </div>\n      {/* Floor Selector */}\n      <div>\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-foreground\">Select Floor</h3>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setShowTimeProjection(!showTimeProjection)}\n            iconName=\"Clock\"\n            iconPosition=\"left\"\n          >\n            {showTimeProjection ? 'Current' : 'Projection'}\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n          {facility?.floors?.map((floor) => (\n            <button\n              key={floor?.id}\n              onClick={() => handleFloorChange(floor)}\n              className={`p-4 rounded-lg border-2 transition-colors ${\n                selectedFloor?.id === floor?.id\n                  ? 'border-primary bg-primary/10' :'border-border bg-card hover:border-primary/50'\n              }`}\n            >\n              <div className=\"text-center\">\n                <div className=\"text-lg font-bold text-foreground\">{floor?.name}</div>\n                <div className=\"text-sm text-muted-foreground mb-2\">{floor?.totalSlots} slots</div>\n                <div className=\"flex justify-center gap-1\">\n                  <div className=\"w-3 h-3 bg-success rounded-full\"></div>\n                  <span className=\"text-xs text-success\">{floor?.availableSlots}</span>\n                </div>\n              </div>\n            </button>\n          ))}\n        </div>\n      </div>\n      {/* Floor Layout */}\n      <div>\n        <div className=\"flex items-center justify-between mb-4\">\n          <h4 className=\"text-md font-semibold text-foreground\">\n            {selectedFloor?.name} Layout\n          </h4>\n          <div className=\"text-sm text-muted-foreground\">\n            {availableCount} available of {filteredSlots?.length} slots\n          </div>\n        </div>\n\n        {/* Status Legend */}\n        <div className=\"flex flex-wrap gap-4 mb-6 p-4 bg-muted rounded-lg\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-4 bg-success rounded\"></div>\n            <span className=\"text-sm text-foreground\">Available ({availableCount})</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-4 bg-destructive rounded\"></div>\n            <span className=\"text-sm text-foreground\">Reserved ({reservedCount})</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-4 bg-warning rounded\"></div>\n            <span className=\"text-sm text-foreground\">Maintenance ({maintenanceCount})</span>\n          </div>\n        </div>\n\n        {/* Slot Grid */}\n        <div className=\"bg-card border border-border rounded-lg p-6\">\n          <div className=\"grid grid-cols-8 md:grid-cols-12 gap-2\">\n            {filteredSlots?.map((slot) => (\n              <button\n                key={slot?.id}\n                onClick={() => slot?.status === 'available' && onBookSlot(slot)}\n                disabled={slot?.status !== 'available'}\n                className={`aspect-square rounded-lg border-2 transition-all relative ${\n                  slot?.status === 'available' ?'border-success bg-success/20 hover:bg-success/40 cursor-pointer'\n                    : slot?.status === 'reserved' ?'border-destructive bg-destructive/20 cursor-not-allowed' :'border-warning bg-warning/20 cursor-not-allowed'\n                }`}\n                title={`${slot?.row}${slot?.number} - ${getSlotStatusText(slot?.status)}`}\n              >\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <span className=\"text-xs font-medium\">\n                    {slot?.row}{slot?.number}\n                  </span>\n                </div>\n                {slot?.status === 'available' && (\n                  <Icon \n                    name=\"Car\" \n                    size={12} \n                    className=\"absolute top-0.5 right-0.5 text-success\"\n                  />\n                )}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Row Breakdown */}\n        <div className=\"mt-6\">\n          <h5 className=\"text-sm font-semibold text-foreground mb-3\">Row-wise Availability</h5>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {selectedFloor?.rows?.map((row) => (\n              <div key={row?.id} className=\"bg-muted p-3 rounded-lg\">\n                <div className=\"text-sm font-medium text-foreground\">Row {row?.name}</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  {row?.available}/{row?.total} available\n                </div>\n                <div className=\"w-full bg-border rounded-full h-2 mt-2\">\n                  <div\n                    className=\"bg-success h-2 rounded-full transition-all\"\n                    style={{ width: `${(row?.available / row?.total) * 100}%` }}\n                  ></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Time-based Availability */}\n        {showTimeProjection && (\n          <div className=\"mt-6 bg-muted p-4 rounded-lg\">\n            <h5 className=\"text-sm font-semibold text-foreground mb-3\">Projected Availability Today</h5>\n            <div className=\"grid grid-cols-6 gap-2\">\n              {selectedFloor?.hourlyProjection?.map((hour) => (\n                <div key={hour?.time} className=\"text-center\">\n                  <div className=\"text-xs text-muted-foreground\">{hour?.time}</div>\n                  <div className={`text-sm font-medium ${\n                    hour?.availability > 70 ? 'text-success' :\n                    hour?.availability > 30 ? 'text-warning' : 'text-destructive'\n                  }`}>\n                    {hour?.availability}%\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default FloorsTab;","size_bytes":8103},"src/pages/facility-details-floor-selection/components/OverviewTab.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst OverviewTab = ({ facility }) => {\n  const features = [\n    { icon: 'Shield', label: '24/7 Security', available: true },\n    { icon: 'Camera', label: 'CCTV Monitoring', available: true },\n    { icon: 'Zap', label: 'EV Charging', available: facility?.hasEVCharging },\n    { icon: 'Wifi', label: 'Free WiFi', available: facility?.hasWifi },\n    { icon: 'Car', label: 'Valet Service', available: facility?.hasValet },\n    { icon: 'Umbrella', label: 'Covered Parking', available: facility?.isCovered }\n  ];\n\n  const paymentMethods = [\n    { icon: 'CreditCard', label: 'Credit/Debit Cards' },\n    { icon: 'Smartphone', label: 'Mobile Payments' },\n    { icon: 'DollarSign', label: 'Cash' },\n    { icon: 'Wallet', label: 'Digital Wallets' }\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Pricing Structure */}\n      <div>\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Pricing</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          <div className=\"bg-muted p-4 rounded-lg\">\n            <div className=\"text-sm text-muted-foreground\">Hourly Rate</div>\n            <div className=\"text-xl font-bold text-foreground\">‚Çπ{facility?.hourlyRate}</div>\n            <div className=\"text-sm text-success\">First hour</div>\n          </div>\n          <div className=\"bg-muted p-4 rounded-lg\">\n            <div className=\"text-sm text-muted-foreground\">Daily Rate</div>\n            <div className=\"text-xl font-bold text-foreground\">‚Çπ{facility?.dailyRate}</div>\n            <div className=\"text-sm text-success\">Up to 24 hours</div>\n          </div>\n          <div className=\"bg-muted p-4 rounded-lg\">\n            <div className=\"text-sm text-muted-foreground\">Monthly Pass</div>\n            <div className=\"text-xl font-bold text-foreground\">‚Çπ{facility?.monthlyRate}</div>\n            <div className=\"text-sm text-success\">Unlimited access</div>\n          </div>\n        </div>\n      </div>\n      {/* Operating Hours */}\n      <div>\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Operating Hours</h3>\n        <div className=\"bg-muted p-4 rounded-lg\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <div className=\"text-sm font-medium text-foreground mb-2\">Weekdays</div>\n              <div className=\"text-sm text-muted-foreground\">{facility?.weekdayHours}</div>\n            </div>\n            <div>\n              <div className=\"text-sm font-medium text-foreground mb-2\">Weekends</div>\n              <div className=\"text-sm text-muted-foreground\">{facility?.weekendHours}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* Features */}\n      <div>\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Features & Services</h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n          {features?.map((feature, index) => (\n            <div\n              key={index}\n              className={`flex items-center gap-3 p-3 rounded-lg ${\n                feature?.available ? 'bg-success/10 text-success' : 'bg-muted text-muted-foreground'\n              }`}\n            >\n              <Icon name={feature?.icon} size={20} />\n              <span className=\"text-sm font-medium\">{feature?.label}</span>\n              {feature?.available && <Icon name=\"Check\" size={16} className=\"ml-auto\" />}\n            </div>\n          ))}\n        </div>\n      </div>\n      {/* Payment Methods */}\n      <div>\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Payment Methods</h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          {paymentMethods?.map((method, index) => (\n            <div key={index} className=\"flex items-center gap-3 p-3 bg-muted rounded-lg\">\n              <Icon name={method?.icon} size={20} className=\"text-primary\" />\n              <span className=\"text-sm font-medium text-foreground\">{method?.label}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n      {/* Contact Information */}\n      <div>\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Contact Information</h3>\n        <div className=\"bg-muted p-4 rounded-lg space-y-3\">\n          <div className=\"flex items-center gap-3\">\n            <Icon name=\"Phone\" size={20} className=\"text-primary\" />\n            <span className=\"text-sm text-foreground\">{facility?.phone}</span>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <Icon name=\"Mail\" size={20} className=\"text-primary\" />\n            <span className=\"text-sm text-foreground\">{facility?.email}</span>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <Icon name=\"Globe\" size={20} className=\"text-primary\" />\n            <span className=\"text-sm text-foreground\">{facility?.website}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OverviewTab;","size_bytes":5006},"src/pages/facility-details-floor-selection/components/ReviewsTab.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Image from '../../../components/AppImage';\n\nconst ReviewsTab = ({ facility }) => {\n  const [selectedRating, setSelectedRating] = useState('all');\n  const [showAllReviews, setShowAllReviews] = useState(false);\n\n  const ratingFilters = [\n    { value: 'all', label: 'All Reviews' },\n    { value: '5', label: '5 Stars' },\n    { value: '4', label: '4 Stars' },\n    { value: '3', label: '3 Stars' },\n    { value: '2', label: '2 Stars' },\n    { value: '1', label: '1 Star' }\n  ];\n\n  const reviews = [\n    {\n      id: 1,\n      user: \"Sarah Johnson\",\n      avatar: \"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150\",\n      rating: 5,\n      date: \"2025-01-15\",\n      comment: \"Excellent parking facility! Very clean, well-lit, and secure. The staff is friendly and helpful. The location is perfect for downtown shopping.\",\n      helpful: 12,\n      images: [\n        \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=300\",\n        \"https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=300\"\n      ]\n    },\n    {\n      id: 2,\n      user: \"Michael Chen\",\n      avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150\",\n      rating: 4,\n      date: \"2025-01-12\",\n      comment: \"Good parking facility with reasonable rates. The only downside is that it can get quite busy during peak hours. Overall, I'd recommend it.\",\n      helpful: 8,\n      images: []\n    },\n    {\n      id: 3,\n      user: \"Emily Rodriguez\",\n      avatar: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150\",\n      rating: 5,\n      date: \"2025-01-10\",\n      comment: \"Love this place! Easy booking through the app, great security, and the EV charging stations are a huge plus. Will definitely use again.\",\n      helpful: 15,\n      images: [\n        \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=300\"\n      ]\n    },\n    {\n      id: 4,\n      user: \"David Thompson\",\n      avatar: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150\",\n      rating: 3,\n      date: \"2025-01-08\",\n      comment: \"Decent parking facility but could use better signage. Took me a while to find my reserved spot. The price is fair though.\",\n      helpful: 5,\n      images: []\n    },\n    {\n      id: 5,\n      user: \"Lisa Wang\",\n      avatar: \"https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=150\",\n      rating: 5,\n      date: \"2025-01-05\",\n      comment: \"Fantastic experience! The facility is modern, clean, and very secure. The valet service is excellent and saves so much time. Highly recommended!\",\n      helpful: 20,\n      images: [\n        \"https://images.unsplash.com/photo-1590674899484-d5640e854abe?w=300\",\n        \"https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=300\"\n      ]\n    }\n  ];\n\n  const getRatingStars = (rating) => {\n    const stars = [];\n    for (let i = 1; i <= 5; i++) {\n      stars?.push(\n        <Icon\n          key={i}\n          name=\"Star\"\n          size={16}\n          className={i <= rating ? 'text-warning fill-current' : 'text-muted-foreground'}\n        />\n      );\n    }\n    return stars;\n  };\n\n  const getRatingDistribution = () => {\n    const distribution = { 5: 45, 4: 25, 3: 15, 2: 8, 1: 7 };\n    const total = Object.values(distribution)?.reduce((sum, count) => sum + count, 0);\n    \n    return Object.entries(distribution)?.reverse()?.map(([rating, count]) => ({\n      rating: parseInt(rating),\n      count,\n      percentage: (count / total) * 100\n    }));\n  };\n\n  const filteredReviews = selectedRating === 'all' \n    ? reviews \n    : reviews?.filter(review => review?.rating === parseInt(selectedRating));\n\n  const displayedReviews = showAllReviews ? filteredReviews : filteredReviews?.slice(0, 3);\n\n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    return date?.toLocaleDateString('en-US', { \n      year: 'numeric', \n      month: 'short', \n      day: 'numeric' \n    });\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Rating Overview */}\n      <div className=\"bg-muted p-6 rounded-lg\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n          <div className=\"text-center\">\n            <div className=\"text-4xl font-bold text-foreground mb-2\">{facility?.rating}</div>\n            <div className=\"flex justify-center gap-1 mb-2\">\n              {getRatingStars(Math.floor(facility?.rating))}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">\n              Based on {facility?.reviewCount} reviews\n            </div>\n          </div>\n          \n          <div className=\"space-y-2\">\n            {getRatingDistribution()?.map(({ rating, count, percentage }) => (\n              <div key={rating} className=\"flex items-center gap-3\">\n                <div className=\"flex items-center gap-1 w-16\">\n                  <span className=\"text-sm text-foreground\">{rating}</span>\n                  <Icon name=\"Star\" size={14} className=\"text-warning fill-current\" />\n                </div>\n                <div className=\"flex-1 bg-border rounded-full h-2\">\n                  <div\n                    className=\"bg-warning h-2 rounded-full transition-all\"\n                    style={{ width: `${percentage}%` }}\n                  ></div>\n                </div>\n                <div className=\"text-sm text-muted-foreground w-8\">{count}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      {/* Rating Filters */}\n      <div>\n        <div className=\"flex flex-wrap gap-2\">\n          {ratingFilters?.map((filter) => (\n            <Button\n              key={filter?.value}\n              variant={selectedRating === filter?.value ? 'primary' : 'outline'}\n              size=\"sm\"\n              onClick={() => setSelectedRating(filter?.value)}\n            >\n              {filter?.label}\n            </Button>\n          ))}\n        </div>\n      </div>\n      {/* Reviews List */}\n      <div className=\"space-y-6\">\n        {displayedReviews?.map((review) => (\n          <div key={review?.id} className=\"bg-card border border-border p-6 rounded-lg\">\n            <div className=\"flex items-start gap-4\">\n              <Image\n                src={review?.avatar}\n                alt={review?.user}\n                className=\"w-12 h-12 rounded-full object-cover\"\n              />\n              \n              <div className=\"flex-1\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div>\n                    <div className=\"font-medium text-foreground\">{review?.user}</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {formatDate(review?.date)}\n                    </div>\n                  </div>\n                  <div className=\"flex gap-1\">\n                    {getRatingStars(review?.rating)}\n                  </div>\n                </div>\n                \n                <p className=\"text-foreground mb-4\">{review?.comment}</p>\n                \n                {/* Review Images */}\n                {review?.images?.length > 0 && (\n                  <div className=\"flex gap-2 mb-4\">\n                    {review?.images?.map((image, index) => (\n                      <Image\n                        key={index}\n                        src={image}\n                        alt={`Review image ${index + 1}`}\n                        className=\"w-20 h-20 rounded-lg object-cover cursor-pointer hover:opacity-80 transition-opacity\"\n                      />\n                    ))}\n                  </div>\n                )}\n                \n                <div className=\"flex items-center gap-4\">\n                  <Button variant=\"ghost\" size=\"sm\" iconName=\"ThumbsUp\" iconPosition=\"left\">\n                    Helpful ({review?.helpful})\n                  </Button>\n                  <Button variant=\"ghost\" size=\"sm\" iconName=\"MessageSquare\" iconPosition=\"left\">\n                    Reply\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n      {/* Load More Button */}\n      {filteredReviews?.length > 3 && (\n        <div className=\"text-center\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setShowAllReviews(!showAllReviews)}\n          >\n            {showAllReviews ? 'Show Less' : `Show All ${filteredReviews?.length} Reviews`}\n          </Button>\n        </div>\n      )}\n      {/* Write Review Section */}\n      <div className=\"bg-muted p-6 rounded-lg\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Share Your Experience</h3>\n        <p className=\"text-muted-foreground mb-4\">\n          Help other users by sharing your experience with this parking facility.\n        </p>\n        <Button variant=\"primary\" iconName=\"Edit\" iconPosition=\"left\">\n          Write a Review\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default ReviewsTab;","size_bytes":9033},"src/pages/location-search-map/components/FacilityCard.jsx":{"content":"import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Image from '../../../components/AppImage';\n\nconst FacilityCard = ({ facility, className = '' }) => {\n  const navigate = useNavigate();\n\n  const handleViewDetails = () => {\n    navigate('/facility-details-floor-selection', {\n      state: { facility }\n    });\n  };\n\n  const handleQuickBook = () => {\n    // Navigate directly to slot selection with facility details\n    navigate(`/slot-selection-booking?location=${encodeURIComponent(facility.name)}&city=${encodeURIComponent(facility.address.split(',').pop().trim())}`, {\n      state: { \n        facilityInfo: {\n          id: facility.id,\n          name: facility.name,\n          address: facility.address,\n          location: facility.coordinates || { lat: facility.lat, lng: facility.lng }\n        }\n      }\n    });\n  };\n\n  const handleCardClick = () => {\n    // Navigate directly to slot selection with facility details\n    navigate(`/slot-selection-booking?location=${encodeURIComponent(facility.name)}&city=${encodeURIComponent(facility.address.split(',').pop().trim())}`, {\n      state: { \n        facilityInfo: {\n          id: facility.id,\n          name: facility.name,\n          address: facility.address,\n          location: facility.coordinates || { lat: facility.lat, lng: facility.lng }\n        }\n      }\n    });\n  };\n\n  const getAvailabilityStatus = () => {\n    const ratio = facility?.availableSlots / facility?.totalSlots;\n    if (ratio > 0.6) return { color: 'text-success', text: 'Good availability' };\n    if (ratio > 0.3) return { color: 'text-warning', text: 'Limited spots' };\n    return { color: 'text-destructive', text: 'Almost full' };\n  };\n\n  const getDistanceText = (distance) => {\n    if (distance < 1) return `${Math.round(distance * 1000)}m away`;\n    return `${distance?.toFixed(1)} miles away`;\n  };\n\n  const renderStars = (rating) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Icon\n        key={i}\n        name={i < Math.floor(rating) ? \"Star\" : \"Star\"}\n        size={12}\n        className={i < Math.floor(rating) ? \"text-warning fill-current\" : \"text-muted-foreground\"}\n      />\n    ));\n  };\n\n  const availabilityStatus = getAvailabilityStatus();\n\n  return (\n    <div \n      onClick={handleCardClick}\n      className={`facility-card-mobile bg-card border border-border rounded-lg p-3 hover:shadow-md transition-all cursor-pointer active:scale-[0.98] ${className}`}\n    >\n      <div className=\"flex gap-3\">\n        {/* Facility Image */}\n        <div className=\"flex-shrink-0\">\n          <div className=\"facility-image w-16 h-16 sm:w-20 sm:h-20 rounded-lg overflow-hidden bg-muted\">\n            <Image\n              src={facility?.image}\n              alt={facility?.name}\n              className=\"w-full h-full object-cover\"\n            />\n          </div>\n        </div>\n\n        {/* Facility Info */}\n        <div className=\"facility-content flex-1 min-w-0\">\n          <div className=\"flex items-start justify-between mb-2\">\n            <div className=\"flex-1 min-w-0 pr-2\">\n              <h3 className=\"facility-title text-sm sm:text-base font-semibold text-foreground truncate\">{facility?.name}</h3>\n              <p className=\"facility-subtitle text-xs sm:text-sm text-muted-foreground truncate\">{facility?.address}</p>\n            </div>\n            <div className=\"flex-shrink-0\">\n              <div className=\"text-right\">\n                <div className=\"text-sm sm:text-base font-semibold text-foreground\">‚Çπ{facility?.hourlyRate}/hr</div>\n                {facility?.originalRate && facility?.originalRate > facility?.hourlyRate && (\n                  <div className=\"text-xs text-muted-foreground line-through\">\n                    ‚Çπ{facility?.originalRate}/hr\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Distance and Rating */}\n          <div className=\"flex items-center gap-3 mb-2\">\n            <div className=\"flex items-center gap-1 text-xs sm:text-sm text-muted-foreground\">\n              <Icon name=\"MapPin\" size={12} />\n              <span>{getDistanceText(facility?.distance)}</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <div className=\"flex\">{renderStars(facility?.rating)}</div>\n              <span className=\"text-xs sm:text-sm text-muted-foreground\">\n                {facility?.rating} ({facility?.reviewCount})\n              </span>\n            </div>\n          </div>\n\n          {/* Availability */}\n          <div className=\"flex items-center justify-between mb-2\">\n            <div className=\"flex items-center gap-2\">\n              <div className={`text-xs sm:text-sm font-medium ${availabilityStatus?.color}`}>\n                {facility?.availableSlots}/{facility?.totalSlots} available\n              </div>\n              <span className=\"text-xs text-muted-foreground hidden sm:inline\">\n                ‚Ä¢ {availabilityStatus?.text}\n              </span>\n            </div>\n          </div>\n\n          {/* Amenities */}\n          {facility?.amenities && facility?.amenities?.length > 0 && (\n            <div className=\"flex flex-wrap gap-1 mb-3\">\n              {facility?.amenities?.slice(0, 2)?.map((amenity, index) => (\n                <span\n                  key={index}\n                  className=\"inline-flex items-center gap-1 px-2 py-1 bg-muted text-muted-foreground text-xs rounded-md\"\n                >\n                  {amenity === 'covered' && <Icon name=\"Umbrella\" size={10} />}\n                  {amenity === 'security' && <Icon name=\"Shield\" size={10} />}\n                  {amenity === 'ev_charging' && <Icon name=\"Zap\" size={10} />}\n                  {amenity === 'valet' && <Icon name=\"User\" size={10} />}\n                  {amenity === 'handicap' && <Icon name=\"Accessibility\" size={10} />}\n                  <span className=\"capitalize\">{amenity?.replace('_', ' ')}</span>\n                </span>\n              ))}\n              {facility?.amenities?.length > 2 && (\n                <span className=\"text-xs text-muted-foreground\">\n                  +{facility?.amenities?.length - 2} more\n                </span>\n              )}\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"facility-actions flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={(e) => {\n                e.stopPropagation();\n                handleViewDetails();\n              }}\n              className=\"flex-1 text-xs sm:text-sm py-2.5 sm:py-2\"\n            >\n              View Details\n            </Button>\n            {facility?.availableSlots > 0 && (\n              <Button\n                variant=\"default\"\n                size=\"sm\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleQuickBook();\n                }}\n                className=\"flex-1 text-xs sm:text-sm py-2.5 sm:py-2 font-medium\"\n              >\n                Quick Book\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n      {/* Special Offers */}\n      {facility?.discount && (\n        <div className=\"mt-3 pt-3 border-t border-border\">\n          <div className=\"flex items-center gap-2 text-sm\">\n            <Icon name=\"Tag\" size={14} className=\"text-success\" />\n            <span className=\"text-success font-medium\">\n              {facility?.discount}% off for bookings over 2 hours\n            </span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FacilityCard;","size_bytes":7682},"src/pages/location-search-map/components/FacilityList.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Select from '../../../components/ui/Select';\nimport FacilityCard from './FacilityCard';\n\nconst FacilityList = ({\n  facilities,\n  loading,\n  onRefresh,\n  onSortChange,\n  selectedCity,\n  selectedPlace,\n  onPlaceChange,\n  className = ''\n}) => {\n  const [sortBy, setSortBy] = useState('distance');\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  \n\n  const sortOptions = [\n    { value: 'distance', label: 'Distance' },\n    { value: 'price', label: 'Price (Low to High)' },\n    { value: 'price_desc', label: 'Price (High to Low)' },\n    { value: 'rating', label: 'Rating' },\n    { value: 'availability', label: 'Availability' }\n  ];\n\n  const handleSortChange = (value) => {\n    setSortBy(value);\n    onSortChange(value);\n  };\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    await onRefresh();\n    setTimeout(() => setIsRefreshing(false), 1000);\n  };\n\n  const getSortedFacilities = () => {\n    const sorted = [...facilities];\n\n    switch (sortBy) {\n      case 'price':\n        return sorted?.sort((a, b) => a?.hourlyRate - b?.hourlyRate);\n      case 'price_desc':\n        return sorted?.sort((a, b) => b?.hourlyRate - a?.hourlyRate);\n      case 'rating':\n        return sorted?.sort((a, b) => b?.rating - a?.rating);\n      case 'availability':\n        return sorted?.sort((a, b) => b?.availableSlots - a?.availableSlots);\n      case 'distance':\n      default:\n        return sorted?.sort((a, b) => a?.distance - b?.distance);\n    }\n  };\n\n  const sortedFacilities = getSortedFacilities();\n\n  return (\n    <div className={`h-full flex flex-col bg-background ${className}`}>\n      {/* Header Controls */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border bg-card flex-shrink-0\">\n        <div className=\"flex items-center gap-3\">\n          <h2 className=\"text-lg font-semibold text-foreground\">\n            Parking Results ({facilities?.length})\n          </h2>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleRefresh}\n            disabled={isRefreshing}\n            className=\"p-2\"\n            title=\"Refresh results\"\n          >\n            <Icon\n              name=\"RefreshCw\"\n              size={16}\n              className={isRefreshing ? 'animate-spin' : ''}\n            />\n          </Button>\n        </div>\n\n        <div className=\"w-40\">\n          <Select\n            options={sortOptions}\n            value={sortBy}\n            onChange={handleSortChange}\n            placeholder=\"Sort by\"\n          />\n        </div>\n      </div>\n\n      \n      {/* Loading State */}\n      {loading && (\n        <div className=\"p-8 text-center\">\n          <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Finding parking spots...</p>\n        </div>\n      )}\n      \n      {/* Empty State */}\n      {!loading && facilities?.length === 0 && (\n        <div className=\"p-8 text-center\">\n          <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Icon name=\"MapPin\" size={24} className=\"text-muted-foreground\" />\n          </div>\n          <h3 className=\"text-lg font-semibold text-foreground mb-2\">No parking found</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Try adjusting your search area or filters to find more options.\n          </p>\n          <Button variant=\"outline\" onClick={handleRefresh}>\n            <Icon name=\"RefreshCw\" size={16} className=\"mr-2\" />\n            Refresh Search\n          </Button>\n        </div>\n      )}\n      \n      {/* Facility Cards - Scrollable */}\n      {!loading && sortedFacilities?.length > 0 && (\n        <div className=\"flex-1 overflow-y-auto mobile-scroll-list touch-scroll\" style={{WebkitOverflowScrolling: \"touch\"}}>\n          <div className=\"p-3 sm:p-4 space-y-3 sm:space-y-4 pb-6\">\n            {sortedFacilities?.map((facility) => (\n              <FacilityCard\n                key={facility?.id}\n                facility={{\n                  ...facility,\n                  location: { lat: facility?.lat, lng: facility?.lng }\n                }}\n                className=\"shadow-sm hover:shadow-md transition-shadow border-l-4 border-l-primary/20 hover:border-l-primary\"\n              />\n            ))}\n          </div>\n        </div>\n      )}\n      {/* Pull to Refresh Indicator */}\n      {isRefreshing && (\n        <div className=\"absolute top-0 left-0 right-0 bg-primary/10 p-2 text-center\">\n          <div className=\"flex items-center justify-center gap-2 text-primary\">\n            <Icon name=\"RefreshCw\" size={16} className=\"animate-spin\" />\n            <span className=\"text-sm font-medium\">Updating results...</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FacilityList;","size_bytes":5002},"src/pages/location-search-map/components/MapResizeHandle.jsx":{"content":"import React, { useState, useRef, useEffect } from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst MapResizeHandle = ({ \n  onResize, \n  currentHeight = 60,\n  className = '' \n}) => {\n  const [isDragging, setIsDragging] = useState(false);\n  const [mapHeight, setMapHeight] = useState(currentHeight);\n  const handleRef = useRef(null);\n  const startY = useRef(0);\n  const startHeight = useRef(currentHeight);\n\n  // Update internal state when currentHeight prop changes\n  useEffect(() => {\n    setMapHeight(currentHeight);\n  }, [currentHeight]);\n\n  useEffect(() => {\n    const handleMouseMove = (e) => {\n      if (!isDragging) return;\n      \n      const deltaY = e?.clientY - startY?.current;\n      const containerHeight = window.innerHeight - 200; // Account for headers\n      const newHeight = Math.max(30, Math.min(80, startHeight?.current - (deltaY / containerHeight) * 100));\n      \n      setMapHeight(newHeight);\n      onResize(newHeight);\n    };\n\n    const handleMouseUp = () => {\n      setIsDragging(false);\n      document.body.style.cursor = '';\n      document.body.style.userSelect = '';\n    };\n\n    const handleTouchMove = (e) => {\n      if (!isDragging) return;\n      \n      const touch = e?.touches?.[0];\n      const deltaY = touch?.clientY - startY?.current;\n      const containerHeight = window.innerHeight - 200;\n      const newHeight = Math.max(30, Math.min(80, startHeight?.current - (deltaY / containerHeight) * 100));\n      \n      setMapHeight(newHeight);\n      onResize(newHeight);\n    };\n\n    const handleTouchEnd = () => {\n      setIsDragging(false);\n    };\n\n    if (isDragging) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      document.addEventListener('touchmove', handleTouchMove);\n      document.addEventListener('touchend', handleTouchEnd);\n      \n      document.body.style.cursor = 'ns-resize';\n      document.body.style.userSelect = 'none';\n    }\n\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n      document.removeEventListener('touchmove', handleTouchMove);\n      document.removeEventListener('touchend', handleTouchEnd);\n    };\n  }, [isDragging, onResize]);\n\n  const handleMouseDown = (e) => {\n    setIsDragging(true);\n    startY.current = e?.clientY;\n    startHeight.current = mapHeight;\n  };\n\n  const handleTouchStart = (e) => {\n    setIsDragging(true);\n    startY.current = e?.touches?.[0]?.clientY;\n    startHeight.current = mapHeight;\n  };\n\n  return (\n    <div\n      ref={handleRef}\n      className={`relative bg-border hover:bg-border/80 transition-colors cursor-ns-resize ${className}`}\n      style={{ height: '8px' }}\n      onMouseDown={handleMouseDown}\n      onTouchStart={handleTouchStart}\n    >\n      {/* Visual Handle */}\n      <div className=\"absolute inset-0 flex items-center justify-center\">\n        <div className={`w-12 h-1 bg-muted-foreground/40 rounded-full transition-all ${\n          isDragging ? 'bg-primary scale-110' : 'hover:bg-muted-foreground/60'\n        }`} />\n      </div>\n\n      {/* Drag Indicator */}\n      <div className=\"absolute left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2 opacity-0 hover:opacity-100 transition-opacity\">\n        <div className=\"flex flex-col items-center gap-0.5\">\n          <Icon name=\"ChevronUp\" size={12} className=\"text-muted-foreground\" />\n          <Icon name=\"ChevronDown\" size={12} className=\"text-muted-foreground\" />\n        </div>\n      </div>\n\n      {/* Touch Target for Mobile */}\n      <div className=\"absolute inset-x-0 -inset-y-2 md:hidden\" />\n    </div>\n  );\n};\n\nexport default MapResizeHandle;","size_bytes":3707},"src/pages/location-search-map/components/MapView.jsx":{"content":"import React, { useState, useEffect, useRef } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst MapView = ({ \n  facilities, \n  selectedFacility, \n  onFacilitySelect, \n  userLocation, \n  searchRadius,\n  selectedCity,\n  className = '' \n}) => {\n  const mapRef = useRef(null);\n  const [mapLoaded, setMapLoaded] = useState(false);\n  const [zoomLevel, setZoomLevel] = useState(14);\n\n  // Mock map center based on user location, selected city, or default\n  const mapCenter = userLocation || selectedCity?.coordinates || { lat: 17.3850, lng: 78.4867 };\n\n  useEffect(() => {\n    // Simulate map loading\n    const timer = setTimeout(() => setMapLoaded(true), 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleMarkerClick = (facility) => {\n    onFacilitySelect(facility);\n  };\n\n  const handleZoomIn = () => {\n    setZoomLevel(prev => Math.min(prev + 1, 20));\n  };\n\n  const handleZoomOut = () => {\n    setZoomLevel(prev => Math.max(prev - 1, 1));\n  };\n\n  const getAvailabilityColor = (availableSlots, totalSlots) => {\n    const ratio = availableSlots / totalSlots;\n    if (ratio > 0.6) return 'bg-success';\n    if (ratio > 0.3) return 'bg-warning';\n    return 'bg-destructive';\n  };\n\n  return (\n    <div className={`relative bg-muted rounded-lg overflow-hidden ${className}`}>\n      {/* Map Container */}\n      <div ref={mapRef} className=\"w-full h-full relative\">\n        {!mapLoaded ? (\n          <div className=\"absolute inset-0 flex items-center justify-center bg-muted\">\n            <div className=\"text-center space-y-2\">\n              <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto\"></div>\n              <p className=\"text-sm text-muted-foreground\">Loading map...</p>\n            </div>\n          </div>\n        ) : (\n          <>\n            {/* Google Maps Iframe */}\n            <iframe\n              width=\"100%\"\n              height=\"100%\"\n              loading=\"lazy\"\n              title=\"Parking Locations Map\"\n              referrerPolicy=\"no-referrer-when-downgrade\"\n              src={`https://www.google.com/maps?q=${mapCenter?.lat},${mapCenter?.lng}&z=${zoomLevel}&output=embed`}\n              className=\"absolute inset-0\"\n            />\n\n            {/* Simple Markers Overlay - No icons for clean map */}\n            <div className=\"absolute inset-0 pointer-events-none\">\n              {facilities?.map((facility, index) => {\n                // Calculate marker position (mock positioning)\n                const offsetX = (index % 3) * 80 + 100;\n                const offsetY = Math.floor(index / 3) * 60 + 80;\n                \n                return (\n                  <div\n                    key={facility?.id}\n                    className=\"absolute pointer-events-auto cursor-pointer transform -translate-x-1/2 -translate-y-1/2\"\n                    style={{\n                      left: `${offsetX}px`,\n                      top: `${offsetY}px`\n                    }}\n                    onClick={() => handleMarkerClick(facility)}\n                  >\n                    {/* Simple Marker - No icons */}\n                    <div className={`relative ${selectedFacility?.id === facility?.id ? 'scale-110' : ''} transition-transform`}>\n                      <div className={`w-6 h-6 rounded-full border-2 border-white shadow-lg ${getAvailabilityColor(facility?.availableSlots, facility?.totalSlots)}`}>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            {/* User Location Marker */}\n            {userLocation && (\n              <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 pointer-events-none\">\n                <div className=\"w-4 h-4 bg-primary rounded-full border-2 border-white shadow-lg animate-pulse\"></div>\n                <div className=\"absolute inset-0 w-8 h-8 bg-primary/20 rounded-full -translate-x-1/2 -translate-y-1/2 animate-ping\"></div>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      {/* Map Controls */}\n      <div className=\"absolute top-4 right-4 flex flex-col gap-2\">\n        <Button\n          variant=\"secondary\"\n          size=\"sm\"\n          onClick={handleZoomIn}\n          className=\"w-10 h-10 p-0 shadow-lg\"\n        >\n          <Icon name=\"Plus\" size={16} />\n        </Button>\n        <Button\n          variant=\"secondary\"\n          size=\"sm\"\n          onClick={handleZoomOut}\n          className=\"w-10 h-10 p-0 shadow-lg\"\n        >\n          <Icon name=\"Minus\" size={16} />\n        </Button>\n      </div>\n      {/* Current Location Button */}\n      <div className=\"absolute bottom-4 right-4\">\n        <Button\n          variant=\"secondary\"\n          size=\"sm\"\n          onClick={() => {\n            if (navigator.geolocation) {\n              navigator.geolocation?.getCurrentPosition(\n                (position) => {\n                  // Handle location update\n                  console.log('Location updated:', position?.coords);\n                },\n                (error) => console.error('Location error:', error)\n              );\n            }\n          }}\n          className=\"w-10 h-10 p-0 shadow-lg\"\n          title=\"Center on current location\"\n        >\n          <Icon name=\"Navigation\" size={16} />\n        </Button>\n      </div>\n      {/* Search Radius Indicator */}\n      {searchRadius && (\n        <div className=\"absolute bottom-4 left-4 bg-card border border-border rounded px-3 py-2 shadow-md\">\n          <span className=\"text-xs text-muted-foreground\">\n            Within {searchRadius} miles\n          </span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MapView;","size_bytes":5752},"src/pages/location-search-map/components/SearchFilters.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\n\nconst SearchFilters = ({ \n  filters, \n  onFiltersChange, \n  onLocationSearch,\n  className = '' \n}) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);\n\n  const vehicleTypes = [\n    { value: 'all', label: 'All Vehicles' },\n    { value: 'car', label: 'Car' },\n    { value: 'bike', label: 'Motorcycle' },\n    { value: 'suv', label: 'SUV' },\n    { value: 'truck', label: 'Truck' }\n  ];\n\n  const priceRanges = [\n    { value: 'all', label: 'Any Price' },\n    { value: '0-5', label: '$0 - $5/hr' },\n    { value: '5-10', label: '$5 - $10/hr' },\n    { value: '10-15', label: '$10 - $15/hr' },\n    { value: '15+', label: '$15+/hr' }\n  ];\n\n  const distanceOptions = [\n    { value: '1', label: 'Within 1 mile' },\n    { value: '3', label: 'Within 3 miles' },\n    { value: '5', label: 'Within 5 miles' },\n    { value: '10', label: 'Within 10 miles' }\n  ];\n\n  const amenityOptions = [\n    { value: 'covered', label: 'Covered Parking' },\n    { value: 'security', label: '24/7 Security' },\n    { value: 'ev_charging', label: 'EV Charging' },\n    { value: 'valet', label: 'Valet Service' },\n    { value: 'handicap', label: 'Handicap Accessible' }\n  ];\n\n  const handleSearch = (e) => {\n    e?.preventDefault();\n    if (searchQuery?.trim()) {\n      onLocationSearch(searchQuery?.trim());\n    }\n  };\n\n  const handleFilterChange = (key, value) => {\n    onFiltersChange({\n      ...filters,\n      [key]: value\n    });\n  };\n\n  const handleAmenityToggle = (amenity) => {\n    const currentAmenities = filters?.amenities || [];\n    const newAmenities = currentAmenities?.includes(amenity)\n      ? currentAmenities?.filter(a => a !== amenity)\n      : [...currentAmenities, amenity];\n\n    handleFilterChange('amenities', newAmenities);\n  };\n\n  const clearAllFilters = () => {\n    onFiltersChange({\n      vehicleType: 'all',\n      priceRange: 'all',\n      distance: '5',\n      amenities: []\n    });\n  };\n\n  const getActiveFilterCount = () => {\n    let count = 0;\n    if (filters?.vehicleType && filters?.vehicleType !== 'all') count++;\n    if (filters?.priceRange && filters?.priceRange !== 'all') count++;\n    if (filters?.distance && filters?.distance !== '5') count++;\n    if (filters?.amenities && filters?.amenities?.length > 0) count++;\n    return count;\n  };\n\n  // Handler for current location search\n  const handleGetCurrentLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation?.getCurrentPosition(\n        (position) => {\n          onLocationSearch({\n            lat: position?.coords?.latitude,\n            lng: position?.coords?.longitude\n          });\n        },\n        (error) => console.error('Location error:', error)\n      );\n    }\n  };\n\n  return (\n    <div className={`bg-card filters-compact ${className}`}>\n      <div className=\"container-app py-2 sm:py-4\">\n        <div className=\"space-y-3 sm:space-y-4\">\n          {/* Search Bar */}\n          <div className=\"flex gap-2 sm:gap-3\">\n            <div className=\"flex-1 relative\">\n              <Icon \n                name=\"Search\" \n                size={16} \n                className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground sm:w-5 sm:h-5\"\n              />\n              <Input\n                type=\"text\"\n                placeholder=\"Search by address, landmark, or area\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n                className=\"pl-8 sm:pl-10 pr-4 h-9 sm:h-10 text-sm\"\n              />\n            </div>\n            <Button onClick={handleGetCurrentLocation} variant=\"outline\" size=\"icon\" className=\"h-9 w-9 sm:h-10 sm:w-10\">\n              <Icon name=\"MapPin\" size={16} className=\"sm:w-5 sm:h-5\" />\n            </Button>\n          </div>\n\n          {/* Search Button - Visible on Mobile */}\n          <div className=\"sm:hidden\">\n            <Button\n              type=\"submit\"\n              variant=\"default\"\n              className=\"w-full h-10 text-sm\"\n              iconName=\"Search\"\n              iconPosition=\"left\"\n            >\n              Search Parking\n            </Button>\n          </div>\n        </div>\n      </div>\n      {/* Quick Filters - Hidden on Mobile */}\n      <div className=\"hidden sm:block px-6 pb-4\">\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3\">\n          <Select\n            label=\"Vehicle Type\"\n            options={vehicleTypes}\n            value={filters?.vehicleType || 'all'}\n            onChange={(value) => handleFilterChange('vehicleType', value)}\n            className=\"text-sm\"\n            labelClassName=\"text-xs text-muted-foreground mb-1\"\n          />\n\n          <Select\n            label=\"Price Range\"\n            options={priceRanges}\n            value={filters?.priceRange || 'all'}\n            onChange={(value) => handleFilterChange('priceRange', value)}\n            className=\"text-sm\"\n            labelClassName=\"text-xs text-muted-foreground mb-1\"\n          />\n\n          <Select\n            label=\"Distance\"\n            options={distanceOptions}\n            value={filters?.distance || '5'}\n            onChange={(value) => handleFilterChange('distance', value)}\n            className=\"text-sm\"\n            labelClassName=\"text-xs text-muted-foreground mb-1\"\n          />\n\n          <div className=\"flex items-end\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}\n              iconName={showAdvancedFilters ? \"ChevronUp\" : \"ChevronDown\"}\n              iconPosition=\"right\"\n              className=\"w-full h-10 text-sm\"\n            >\n              Filters {getActiveFilterCount() > 0 && `(${getActiveFilterCount()})`}\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile Only - Filters Button */}\n      <div className=\"sm:hidden px-6 pb-4\">\n        <Button\n          variant=\"outline\"\n          onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}\n          iconName={showAdvancedFilters ? \"ChevronUp\" : \"ChevronDown\"}\n          iconPosition=\"right\"\n          className=\"w-full h-10 text-sm\"\n        >\n          Filters {getActiveFilterCount() > 0 && `(${getActiveFilterCount()})`}\n        </Button>\n      </div>\n      \n      {/* Advanced Filters */}\n      {showAdvancedFilters && (\n        <div className=\"border-t border-border pt-4 px-6 pb-6 space-y-4\">\n          <div>\n            <h4 className=\"text-sm font-medium text-foreground mb-3\">Amenities</h4>\n            <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-2\">\n              {amenityOptions?.map((amenity) => (\n                <Button\n                  key={amenity?.value}\n                  variant={filters?.amenities?.includes(amenity?.value) ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => handleAmenityToggle(amenity?.value)}\n                  className=\"justify-start text-xs h-8\"\n                >\n                  {amenity?.label}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex justify-between items-center pt-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={clearAllFilters}\n              className=\"text-muted-foreground\"\n            >\n              Clear All\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setShowAdvancedFilters(false)}\n            >\n              Done\n            </Button>\n          </div>\n        </div>\n      )}\n      \n      {/* Active Filter Tags */}\n      {getActiveFilterCount() > 0 && (\n        <div className=\"px-6 pb-4 flex flex-wrap gap-2\">\n          {filters?.vehicleType && filters?.vehicleType !== 'all' && (\n            <div className=\"flex items-center gap-1 bg-primary/10 text-primary px-2 py-1 rounded-full text-xs\">\n              <span>{vehicleTypes?.find(v => v?.value === filters?.vehicleType)?.label}</span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => handleFilterChange('vehicleType', 'all')}\n                className=\"w-4 h-4 p-0 hover:bg-primary/20\"\n              >\n                <Icon name=\"X\" size={12} />\n              </Button>\n            </div>\n          )}\n\n          {filters?.priceRange && filters?.priceRange !== 'all' && (\n            <div className=\"flex items-center gap-1 bg-primary/10 text-primary px-2 py-1 rounded-full text-xs\">\n              <span>{priceRanges?.find(p => p?.value === filters?.priceRange)?.label}</span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => handleFilterChange('priceRange', 'all')}\n                className=\"w-4 h-4 p-0 hover:bg-primary/20\"\n              >\n                <Icon name=\"X\" size={12} />\n              </Button>\n            </div>\n          )}\n\n          {filters?.amenities?.map((amenity) => (\n            <div key={amenity} className=\"flex items-center gap-1 bg-primary/10 text-primary px-2 py-1 rounded-full text-xs\">\n              <span>{amenityOptions?.find(a => a?.value === amenity)?.label}</span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => handleAmenityToggle(amenity)}\n                className=\"w-4 h-4 p-0 hover:bg-primary/20\"\n              >\n                <Icon name=\"X\" size={12} />\n              </Button>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SearchFilters;","size_bytes":9898},"src/pages/my-bookings-dashboard/components/BookingCard.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport Image from '../../../components/AppImage';\nimport Button from '../../../components/ui/Button';\nimport Icon from '../../../components/AppIcon';\nimport Modal from '../../../components/ui/Modal';\nimport Typography from '../../../components/ui/Typography';\n\nconst BookingCard = ({ booking, onExtend, onCancel, onRate }) => {\n  const navigate = useNavigate();\n  const [timeRemaining, setTimeRemaining] = useState('');\n  \n  const [isExpanded, setIsExpanded] = useState(false);\n\n  useEffect(() => {\n    if (booking?.status === 'active' && booking?.endTime) {\n      const updateTimer = () => {\n        const now = new Date();\n        const end = new Date(booking.endTime);\n        const diff = end - now;\n\n        if (diff > 0) {\n          const hours = Math.floor(diff / (1000 * 60 * 60));\n          const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n          setTimeRemaining(`${hours}h ${minutes}m`);\n        } else {\n          setTimeRemaining('Expired');\n        }\n      };\n\n      updateTimer();\n      const interval = setInterval(updateTimer, 60000);\n      return () => clearInterval(interval);\n    }\n  }, [booking?.endTime, booking?.status]);\n\n  \n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'active':\n        return 'bg-success text-success-foreground';\n      case 'upcoming':\n        return 'bg-warning text-warning-foreground';\n      case 'completed':\n        return 'bg-muted text-muted-foreground';\n      case 'cancelled':\n        return 'bg-destructive text-destructive-foreground';\n      default:\n        return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const handleGetDirections = () => {\n    const { lat, lng } = booking?.facility?.location;\n    const url = `https://www.google.com/maps/dir/?api=1&destination=${lat},${lng}`;\n    window.open(url, '_blank');\n  };\n\n  const handleViewQR = () => {\n    // In a real app, this would show a QR code modal\n    alert(`QR Code for booking ${booking?.id}`);\n  };\n\n  const handleRebook = () => {\n    navigate('/facility-details-floor-selection', {\n      state: { facilityId: booking?.facility?.id }\n    });\n  };\n\n  const handleCancel = () => {\n    onCancel(booking?.id);\n  };\n\n\n  return (\n    <div\n      id={`booking-${booking?.id}`}\n      className=\"card-container bg-card border border-border rounded-lg overflow-hidden\"\n    >\n      {/* Compact Header - Always Visible */}\n      <div\n        className=\"p-3 sm:p-4 cursor-pointer hover:bg-muted/20 transition-colors\"\n        onClick={() => setIsExpanded(!isExpanded)}\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n            {/* Vehicle Image */}\n            <div className=\"w-12 h-8 sm:w-16 sm:h-10 overflow-hidden rounded-lg flex-shrink-0\">\n              {booking?.vehicleImage ? (\n                <Image\n                  src={booking?.vehicleImage}\n                  alt={booking?.vehicleType}\n                  className=\"w-full h-full object-cover\"\n                />\n              ) : (\n                <div className=\"w-full h-full bg-muted flex items-center justify-center\">\n                  <Icon name={booking?.actualVehicleType === 'two-wheeler' ? 'Bike' : 'Car'} size={16} className=\"text-muted-foreground\" />\n                </div>\n              )}\n            </div>\n\n            {/* Basic Info */}\n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-semibold text-foreground text-sm sm:text-base truncate\">\n                {booking?.vehicle?.name || booking?.vehicle?.model || booking?.vehicle?.label || booking?.vehicleType || 'Vehicle'}\n              </h3>\n              <p className=\"text-xs text-muted-foreground truncate\">\n                {booking?.facility?.name || 'Location'} ‚Ä¢ {booking?.slotLocation || booking?.slot?.location || 'Parking Slot'}\n              </p>\n              <div className=\"space-y-1\">\n                <p className=\"text-xs text-muted-foreground truncate\">\n                  Booked: {new Date(booking.createdAt || booking.startTime)?.toLocaleDateString('en-US', {\n                    weekday: 'short',\n                    month: 'short',\n                    day: 'numeric',\n                    year: 'numeric'\n                  })}\n                </p>\n                <p className=\"text-sm font-medium text-primary truncate\">\n                  {new Date(booking.createdAt || booking.startTime)?.toLocaleTimeString('en-US', {\n                    hour: 'numeric',\n                    minute: '2-digit',\n                    hour12: true\n                  })}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Status and Price */}\n          <div className=\"text-right flex-shrink-0 ml-2\">\n            <div className=\"flex items-center gap-2 justify-end mb-1\">\n              <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(booking?.status)} whitespace-nowrap`}>\n                {booking?.status?.charAt(0)?.toUpperCase() + booking?.status?.slice(1)}\n              </span>\n            </div>\n            <p className=\"text-sm font-semibold text-foreground\">\n              ‚Çπ{booking?.isExtended && booking?.extensionCost ? \n                ((booking?.totalAmount || 0) + (booking?.extensionCost || 0)).toFixed(2) : \n                booking?.totalAmount}\n            </p>\n            {booking?.status === 'active' && timeRemaining && (\n              <p className=\"text-xs text-primary font-medium\">{timeRemaining} left</p>\n            )}\n          </div>\n\n          {/* Expand Icon - Removed as per request to not show arrow button */}\n          {/* <div className=\"ml-2 flex-shrink-0\">\n            <Icon\n              name={isExpanded ? \"ChevronUp\" : \"ChevronDown\"}\n              size={16}\n              className=\"text-muted-foreground\"\n            />\n          </div> */}\n        </div>\n      </div>\n\n      {/* Expanded Details */}\n      {isExpanded && (\n        <div className=\"border-t border-border\">\n          <div className=\"p-3 sm:p-4 space-y-3 sm:space-y-4\">\n            {/* Booking Details */}\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-blue-700 text-sm font-medium flex items-center gap-2\">\n                  <Icon name=\"Calendar\" size={16} className=\"text-blue-600\" />\n                  Booked Time\n                </span>\n                <span className=\"text-blue-900 font-semibold text-base\">\n                  {new Date(booking.createdAt || booking.startTime)?.toLocaleTimeString('en-US', {\n                    hour: 'numeric',\n                    minute: '2-digit',\n                    hour12: true\n                  })}\n                </span>\n              </div>\n              <div className=\"text-xs text-blue-600 mt-1\">\n                {new Date(booking.createdAt || booking.startTime)?.toLocaleDateString('en-US', {\n                  weekday: 'long',\n                  year: 'numeric',\n                  month: 'long',\n                  day: 'numeric'\n                })}\n              </div>\n            </div>\n\n            {/* Facility Details */}\n            <div>\n              <h4 className=\"font-medium text-foreground text-sm mb-2\">Facility</h4>\n              <p className=\"text-sm text-foreground\">{booking?.facility?.name}</p>\n              <p className=\"text-xs text-muted-foreground\">{booking?.facility?.address}</p>\n            </div>\n\n            {/* Pricing Summary */}\n            {booking?.isExtended && booking?.extensionCost && (\n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n                <h4 className=\"font-medium text-green-800 text-sm mb-2 flex items-center gap-2\">\n                  <Icon name=\"DollarSign\" size={16} className=\"text-green-600\" />\n                  Pricing Summary\n                </h4>\n                <div className=\"space-y-1 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-green-700\">Original Amount:</span>\n                    <span className=\"text-green-800\">‚Çπ{(booking?.totalAmount || 0).toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-green-700\">Extension Cost:</span>\n                    <span className=\"text-green-800\">‚Çπ{(booking?.extensionCost || 0).toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between font-semibold pt-1 border-t border-green-300\">\n                    <span className=\"text-green-800\">Total Amount:</span>\n                    <span className=\"text-green-900 text-base\">‚Çπ{((booking?.totalAmount || 0) + (booking?.extensionCost || 0)).toFixed(2)}</span>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Slot Details */}\n            <div className=\"bg-muted rounded-lg p-2 sm:p-3\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4\">\n                <div>\n                  <p className=\"text-xs text-muted-foreground\">Slot Location</p>\n                  <p className=\"text-sm font-medium text-foreground\">{booking?.slotLocation}</p>\n                </div>\n                <div>\n                  <p className=\"text-xs text-muted-foreground\">Duration</p>\n                  <p className=\"text-sm font-medium text-foreground\">{booking?.duration}</p>\n                </div>\n                <div className=\"sm:col-span-2\">\n                  <p className=\"text-xs text-muted-foreground\">Slot Timing</p>\n                  <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 mt-1\">\n                    <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                      <div>\n                        <p className=\"text-blue-700 font-medium\">Start Time</p>\n                        <p className=\"text-blue-900 font-semibold\">\n                          {new Date(booking.startTime)?.toLocaleTimeString('en-US', {\n                            hour: 'numeric',\n                            minute: '2-digit',\n                            hour12: true\n                          })}\n                        </p>\n                        <p className=\"text-xs text-blue-600\">\n                          {new Date(booking.startTime)?.toLocaleDateString('en-US', {\n                            weekday: 'short',\n                            month: 'short',\n                            day: 'numeric'\n                          })}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-blue-700 font-medium\">End Time</p>\n                        <p className=\"text-blue-900 font-semibold\">\n                          {new Date(booking.endTime)?.toLocaleTimeString('en-US', {\n                            hour: 'numeric',\n                            minute: '2-digit',\n                            hour12: true\n                          })}\n                        </p>\n                        <p className=\"text-xs text-blue-600\">\n                          {new Date(booking.endTime)?.toLocaleDateString('en-US', {\n                            weekday: 'short',\n                            month: 'short',\n                            day: 'numeric'\n                          })}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"mt-2 pt-2 border-t border-blue-200\">\n                      <p className=\"text-xs text-blue-600\">\n                        Total Duration: <span className=\"font-medium\">{booking?.duration}</span>\n                      </p>\n                    </div>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-2\">\n                    Booking #{booking?.id} ‚Ä¢ Booked: {new Date(booking.createdAt || booking.startTime)?.toLocaleString('en-US', {\n                      month: 'short',\n                      day: 'numeric',\n                      year: 'numeric',\n                      hour: 'numeric',\n                      minute: '2-digit',\n                      hour12: true\n                    })}\n                  </p>\n                  {booking.isExtended && booking.extensionTime && (\n                    <div className=\"mt-2 p-2 bg-warning/10 border border-warning/20 rounded\">\n                      <p className=\"text-xs text-warning font-medium\">\n                        Extended +{booking.extensionTime}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        Original: {booking.originalDuration} ‚Üí Total: {booking.totalDuration}\n                      </p>\n                      {booking.extensionCost && (\n                        <p className=\"text-xs text-warning font-medium mt-1\">\n                          Extension Cost: ‚Çπ{booking.extensionCost.toFixed(2)}\n                        </p>\n                      )}\n                    </div>\n                  )}\n                </div>\n                {/* Vehicle Details */}\n                <div>\n                  <p className=\"text-xs text-muted-foreground\">Vehicle</p>\n                  <p className=\"text-sm font-medium text-foreground\">\n                    {booking?.vehicle?.name || booking?.vehicle?.model || booking?.vehicleType || 'Vehicle'}\n                  </p>\n                  {(booking?.vehicle?.category || booking?.vehicleCategory) && (\n                    <p className=\"text-xs text-muted-foreground\">{booking?.vehicle?.category || booking?.vehicleCategory}</p>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex flex-col sm:flex-row gap-2 sm:gap-3\">\n              {booking?.status === 'active' && (\n                <>\n                  <Button\n                    variant=\"primary\"\n                    size=\"sm\"\n                    onClick={handleViewQR}\n                    iconName=\"QrCode\"\n                    iconPosition=\"left\"\n                    className=\"w-full sm:flex-1\"\n                  >\n                    QR Code\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => onExtend(booking?.id)}\n                    iconName=\"Clock\"\n                    iconPosition=\"left\"\n                    className=\"w-full sm:flex-1\"\n                  >\n                    Extend\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleGetDirections}\n                    iconName=\"Navigation\"\n                    iconPosition=\"left\"\n                    className=\"w-full sm:flex-1\"\n                  >\n                    Directions\n                  </Button>\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={handleCancel}\n                    iconName=\"X\"\n                    iconPosition=\"left\"\n                    className=\"w-full sm:flex-1\"\n                  >\n                    Cancel\n                  </Button>\n                </>\n              )}\n\n              {booking?.status === 'upcoming' && (\n                <>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => navigate('/slot-selection-booking', { state: { bookingId: booking?.id } })}\n                    iconName=\"Edit\"\n                    iconPosition=\"left\"\n                    className=\"w-full sm:flex-1\"\n                  >\n                    Modify\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleGetDirections}\n                    iconName=\"Navigation\"\n                    iconPosition=\"left\"\n                    className=\"w-full sm:flex-1\"\n                  >\n                    Directions\n                  </Button>\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={handleCancel}\n                    iconName=\"X\"\n                    iconPosition=\"left\"\n                    className=\"w-full sm:flex-1\"\n                  >\n                    Cancel\n                  </Button>\n                </>\n              )}\n\n              {booking?.status === 'completed' && (\n                <>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleRebook}\n                    iconName=\"RotateCcw\"\n                    iconPosition=\"left\"\n                    className=\"w-full sm:flex-1\"\n                  >\n                    Book Again\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => window.open(booking?.receiptUrl, '_blank')}\n                    iconName=\"Download\"\n                    iconPosition=\"left\"\n                    className=\"w-full sm:flex-1\"\n                  >\n                    Receipt\n                  </Button>\n                  {!booking?.rated && (\n                    <Button\n                      variant=\"primary\"\n                      size=\"sm\"\n                      onClick={() => onRate(booking?.id)}\n                      iconName=\"Star\"\n                      iconPosition=\"left\"\n                      className=\"w-full sm:flex-1\"\n                    >\n                      Rate\n                    </Button>\n                  )}\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BookingCard;\n","size_bytes":17998},"src/pages/my-bookings-dashboard/components/BookingTabs.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst BookingTabs = ({ activeTab, onTabChange, bookingCounts }) => {\n  const tabs = [\n    {\n      id: 'active',\n      label: 'Active',\n      icon: 'Play',\n      count: bookingCounts?.active || 0\n    },\n    {\n      id: 'upcoming',\n      label: 'Upcoming',\n      icon: 'Clock',\n      count: bookingCounts?.upcoming || 0\n    },\n    {\n      id: 'completed',\n      label: 'Completed',\n      icon: 'CheckCircle',\n      count: bookingCounts?.completed || 0\n    },\n    {\n      id: 'all',\n      label: 'All',\n      icon: 'List',\n      count: (bookingCounts?.active || 0) + (bookingCounts?.upcoming || 0) + (bookingCounts?.completed || 0)\n    }\n  ];\n\n  return (\n    <div className=\"bg-card rounded-lg p-1 border border-border\">\n      <div className=\"flex\">\n        {tabs.map((tab) => (\n          <button\n            key={tab.id}\n            onClick={() => onTabChange(tab.id)}\n            className={`flex-1 flex flex-col sm:flex-row items-center justify-center gap-1 sm:gap-2 px-2 sm:px-4 py-2 sm:py-3 rounded-md font-medium text-xs sm:text-sm transition-all touch-target ${\n              activeTab === tab.id\n                ? 'bg-primary text-primary-foreground shadow-sm'\n                : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n            }`}\n          >\n            <Icon name={tab.icon} size={16} className=\"flex-shrink-0\" />\n            <span className=\"truncate text-center sm:text-left\">{tab.label}</span>\n            {tab.count > 0 && (\n              <span className={`inline-flex items-center justify-center px-1.5 sm:px-2 py-0.5 text-xs font-medium rounded-full min-w-[18px] sm:min-w-[20px] ${\n                activeTab === tab.id\n                  ? 'bg-primary-foreground/20 text-primary-foreground'\n                  : 'bg-muted text-muted-foreground'\n              }`}>\n                {tab.count}\n              </span>\n            )}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default BookingTabs;","size_bytes":2033},"src/pages/my-bookings-dashboard/components/EmergencyContact.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst EmergencyContact = () => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const emergencyContacts = [\n    {\n      type: 'Security',\n      phone: '+1-800-PARK-911',\n      description: 'For security emergencies and vehicle issues'\n    },\n    {\n      type: 'Support',\n      phone: '+1-800-PARK-HELP',\n      description: 'For booking and payment assistance'\n    },\n    {\n      type: 'Facility',\n      phone: '+1-800-FACILITY',\n      description: 'Direct facility management contact'\n    }\n  ];\n\n  const handleCall = (phone) => {\n    window.open(`tel:${phone}`, '_self');\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-4\">\n      <Button\n        variant=\"outline\"\n        onClick={() => setIsExpanded(!isExpanded)}\n        iconName=\"Phone\"\n        iconPosition=\"left\"\n        className=\"w-full justify-between\"\n      >\n        Emergency Contact\n        <Icon \n          name={isExpanded ? \"ChevronUp\" : \"ChevronDown\"} \n          size={16} \n          className=\"text-muted-foreground\"\n        />\n      </Button>\n      {isExpanded && (\n        <div className=\"mt-4 space-y-3\">\n          {emergencyContacts?.map((contact, index) => (\n            <div key={index} className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n              <div className=\"flex-1\">\n                <h4 className=\"font-medium text-foreground\">{contact?.type}</h4>\n                <p className=\"text-sm text-muted-foreground\">{contact?.description}</p>\n              </div>\n              <Button\n                variant=\"primary\"\n                size=\"sm\"\n                onClick={() => handleCall(contact?.phone)}\n                iconName=\"Phone\"\n                className=\"ml-3\"\n              >\n                Call\n              </Button>\n            </div>\n          ))}\n          \n          <div className=\"text-center pt-2 border-t border-border\">\n            <p className=\"text-xs text-muted-foreground\">\n              Available 24/7 for emergency assistance\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EmergencyContact;","size_bytes":2247},"src/pages/my-bookings-dashboard/components/EmptyState.jsx":{"content":"import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst EmptyState = ({ type }) => {\n  const navigate = useNavigate();\n\n  const getEmptyStateContent = () => {\n    switch (type) {\n      case 'active':\n        return {\n          icon: 'Clock',\n          title: 'No Active Bookings',\n          description: 'You don\\'t have any active parking reservations at the moment.',\n          actionText: 'Book a Slot',\n          actionIcon: 'Plus'\n        };\n      case 'upcoming':\n        return {\n          icon: 'Calendar',\n          title: 'No Upcoming Bookings',\n          description: 'Plan ahead and book your next parking spot to avoid last-minute hassles.',\n          actionText: 'Schedule Booking',\n          actionIcon: 'CalendarPlus'\n        };\n      case 'completed':\n        return {\n          icon: 'CheckCircle',\n          title: 'No Completed Bookings',\n          description: 'Your booking history will appear here once you complete your first reservation.',\n          actionText: 'Start Parking',\n          actionIcon: 'Car'\n        };\n      default:\n        return {\n          icon: 'Search',\n          title: 'No Bookings Found',\n          description: 'Try adjusting your search criteria or create a new booking.',\n          actionText: 'New Booking',\n          actionIcon: 'Plus'\n        };\n    }\n  };\n\n  const content = getEmptyStateContent();\n\n  const handleAction = () => {\n    navigate('/location-search-map');\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center py-12 px-4 text-center\">\n      <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4\">\n        <Icon name={content?.icon} size={32} className=\"text-muted-foreground\" />\n      </div>\n      <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n        {content?.title}\n      </h3>\n      <p className=\"text-muted-foreground mb-6 max-w-sm\">\n        {content?.description}\n      </p>\n      <Button\n        variant=\"primary\"\n        onClick={handleAction}\n        iconName={content?.actionIcon}\n        iconPosition=\"left\"\n      >\n        {content?.actionText}\n      </Button>\n    </div>\n  );\n};\n\nexport default EmptyState;","size_bytes":2286},"src/pages/my-bookings-dashboard/components/QuickBookingWidget.jsx":{"content":"import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\n\nconst QuickBookingWidget = () => {\n  const navigate = useNavigate();\n  const [selectedLocation, setSelectedLocation] = useState('');\n  const [vehicleType, setVehicleType] = useState('');\n  const [duration, setDuration] = useState('');\n\n  const locations = [\n    { value: 'downtown', label: 'Downtown Plaza' },\n    { value: 'metro', label: 'Metro Center' },\n    { value: 'mall', label: 'City Mall' },\n    { value: 'airport', label: 'Airport Express' }\n  ];\n\n  const vehicleTypes = [\n    { value: 'car', label: 'Car' },\n    { value: 'bike', label: 'Motorcycle' },\n    { value: 'suv', label: 'SUV' },\n    { value: 'truck', label: 'Truck' }\n  ];\n\n  const durations = [\n    { value: '1', label: '1 Hour' },\n    { value: '2', label: '2 Hours' },\n    { value: '4', label: '4 Hours' },\n    { value: '8', label: '8 Hours' },\n    { value: 'day', label: 'Full Day' }\n  ];\n\n  const handleQuickBook = () => {\n    if (selectedLocation && vehicleType && duration) {\n      navigate('/slot-selection-booking', {\n        state: {\n          location: selectedLocation,\n          vehicleType,\n          duration\n        }\n      });\n    }\n  };\n\n  return (\n    <div className=\"bg-gradient-to-br from-primary to-primary/80 rounded-xl mobile-card text-white\">\n      <div className=\"flex items-center gap-3 mb-4\">\n        <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-white/20 rounded-lg flex items-center justify-center flex-shrink-0\">\n          <Icon name=\"Zap\" size={16} className=\"sm:w-5 sm:h-5\" color=\"white\" />\n        </div>\n        <div className=\"min-w-0 flex-1\">\n          <h3 className=\"font-semibold text-base sm:text-lg truncate\">Quick Booking</h3>\n          <p className=\"text-white/80 text-xs sm:text-sm truncate\">Book your next parking spot</p>\n        </div>\n      </div>\n\n      <div className=\"space-y-3\">\n        <Select\n          options={locations}\n          value={selectedLocation}\n          onChange={setSelectedLocation}\n          placeholder=\"Select location\"\n          className=\"bg-white/10 border-white/20 text-white placeholder:text-white/60 text-sm sm:text-base\"\n        />\n\n        <Select\n          options={vehicleTypes}\n          value={vehicleType}\n          onChange={setVehicleType}\n          placeholder=\"Vehicle type\"\n          className=\"bg-white/10 border-white/20 text-white placeholder:text-white/60 text-sm sm:text-base\"\n        />\n\n        <Select\n          options={durations}\n          value={duration}\n          onChange={setDuration}\n          placeholder=\"Duration\"\n          className=\"bg-white/10 border-white/20 text-white placeholder:text-white/60 text-sm sm:text-base\"\n        />\n\n        <Button\n          onClick={handleQuickBook}\n          disabled={!selectedLocation || !vehicleType || !duration}\n          className=\"w-full bg-white text-primary hover:bg-white/90 disabled:opacity-50 disabled:cursor-not-allowed text-sm sm:text-base mobile-button touch-target\"\n          iconName=\"Search\"\n          iconPosition=\"left\"\n        >\n          Find Available Slots\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default QuickBookingWidget;","size_bytes":3370},"src/pages/my-bookings-dashboard/components/SearchAndFilter.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\nimport Button from '../../../components/ui/Button';\n\nconst SearchAndFilter = ({ onSearch, onFilter, onClearFilters }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedDateRange, setSelectedDateRange] = useState('');\n  const [selectedVehicleType, setSelectedVehicleType] = useState('');\n  const [selectedLocation, setSelectedLocation] = useState('');\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n\n  const dateRangeOptions = [\n    { value: '', label: 'All Time' },\n    { value: 'today', label: 'Today' },\n    { value: 'week', label: 'This Week' },\n    { value: 'month', label: 'This Month' },\n    { value: 'quarter', label: 'Last 3 Months' }\n  ];\n\n  const vehicleTypeOptions = [\n    { value: '', label: 'All Vehicles' },\n    { value: 'two-wheeler', label: 'Two Wheeler' },\n    { value: 'four-wheeler', label: 'Four Wheeler' },\n    { value: 'commercial-vehicle', label: 'Commercial Vehicle' }\n  ];\n\n  const locationOptions = [\n    { value: '', label: 'All Locations' },\n    { value: 'hyderabad', label: 'Hyderabad' },\n    { value: 'bangalore', label: 'Bangalore' }\n  ];\n\n  const handleSearchChange = (e) => {\n    const value = e?.target?.value;\n    setSearchQuery(value);\n    onSearch(value);\n  };\n\n  const handleFilterChange = (newFilters = {}) => {\n    const filters = {\n      dateRange: newFilters.dateRange !== undefined ? newFilters.dateRange : selectedDateRange,\n      vehicleType: newFilters.vehicleType !== undefined ? newFilters.vehicleType : selectedVehicleType,\n      location: newFilters.location !== undefined ? newFilters.location : selectedLocation\n    };\n    onFilter(filters);\n  };\n\n  const handleClearFilters = () => {\n    setSearchQuery('');\n    setSelectedDateRange('');\n    setSelectedVehicleType('');\n    setSelectedLocation('');\n    setIsFilterExpanded(false);\n    onClearFilters();\n  };\n\n  const hasActiveFilters = selectedDateRange || selectedVehicleType || selectedLocation;\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-4 space-y-4\">\n      {/* Search Bar */}\n      <div className=\"relative\">\n        <Input\n          type=\"search\"\n          placeholder=\"Search bookings by facility name, booking ID...\"\n          value={searchQuery}\n          onChange={handleSearchChange}\n          className=\"pl-10\"\n        />\n        <Icon \n          name=\"Search\" \n          size={20} \n          className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\"\n        />\n      </div>\n\n      {/* Filter Toggle */}\n      <div className=\"flex items-center justify-between\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => setIsFilterExpanded(!isFilterExpanded)}\n          iconName=\"Filter\"\n          iconPosition=\"left\"\n        >\n          Filters\n          {hasActiveFilters && (\n            <span className=\"ml-2 px-2 py-0.5 bg-primary text-primary-foreground rounded-full text-xs\">\n              {(selectedDateRange ? 1 : 0) + (selectedVehicleType ? 1 : 0) + (selectedLocation ? 1 : 0)}\n            </span>\n          )}\n        </Button>\n\n        {hasActiveFilters && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleClearFilters}\n            iconName=\"X\"\n            iconPosition=\"left\"\n            className=\"text-muted-foreground hover:text-foreground\"\n          >\n            Clear\n          </Button>\n        )}\n      </div>\n\n      {/* Expanded Filters */}\n      {isFilterExpanded && (\n        <div className=\"space-y-3 pt-2 border-t border-border\">\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3\">\n            <Select\n              label=\"Location\"\n              options={locationOptions}\n              value={selectedLocation}\n              onChange={(value) => {\n                setSelectedLocation(value);\n                handleFilterChange({ location: value });\n              }}\n            />\n            <Select\n              label=\"Vehicle Type\"\n              options={vehicleTypeOptions}\n              value={selectedVehicleType}\n              onChange={(value) => {\n                setSelectedVehicleType(value);\n                handleFilterChange({ vehicleType: value });\n              }}\n            />\n            <Select\n              label=\"Date Range\"\n              options={dateRangeOptions}\n              value={selectedDateRange}\n              onChange={(value) => {\n                setSelectedDateRange(value);\n                handleFilterChange({ dateRange: value });\n              }}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SearchAndFilter;","size_bytes":4839},"src/pages/slot-selection-booking/components/AlternativeSlotSuggestions.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst AlternativeSlotSuggestions = ({ \n  selectedSlot,\n  vehicleType,\n  dateTime,\n  onSlotSelect,\n  className = '' \n}) => {\n  const [showAllSuggestions, setShowAllSuggestions] = useState(false);\n\n  // Mock alternative slot suggestions\n  const generateAlternativeSlots = () => {\n    const alternatives = [\n      {\n        id: '1-A-14',\n        floorId: 1,\n        row: 'A',\n        slotNumber: 14,\n        location: '1st Floor A Row 14th Parking Slot',\n        status: 'available',\n        walkingDistance: 75,\n        priceDifference: 0,\n        availableNow: true,\n        amenities: ['CCTV', 'Lighting'],\n        checkoutPrediction: null,\n        reason: 'Same floor, closer to entrance'\n      },\n      {\n        id: '1-B-5',\n        floorId: 1,\n        row: 'B',\n        slotNumber: 5,\n        location: '1st Floor B Row 5th Parking Slot',\n        status: 'ending-soon',\n        walkingDistance: 120,\n        priceDifference: -5,\n        availableNow: false,\n        availableIn: new Date(Date.now() + 15 * 60000), // 15 minutes\n        amenities: ['CCTV', 'Lighting', 'EV Charging'],\n        checkoutPrediction: '15 minutes',\n        reason: 'Premium amenities, slight discount'\n      },\n      {\n        id: '2-A-8',\n        floorId: 2,\n        row: 'A',\n        slotNumber: 8,\n        location: '2nd Floor A Row 8th Parking Slot',\n        status: 'available',\n        walkingDistance: 95,\n        priceDifference: 3,\n        availableNow: true,\n        amenities: ['CCTV', 'Lighting'],\n        checkoutPrediction: null,\n        reason: 'One floor up, good availability'\n      },\n      {\n        id: '1-C-22',\n        floorId: 1,\n        row: 'C',\n        slotNumber: 22,\n        location: '1st Floor C Row 22nd Parking Slot',\n        status: 'available',\n        walkingDistance: 140,\n        priceDifference: -2,\n        availableNow: true,\n        amenities: ['CCTV'],\n        checkoutPrediction: null,\n        reason: 'Budget-friendly option'\n      },\n      {\n        id: '3-A-12',\n        floorId: 3,\n        row: 'A',\n        slotNumber: 12,\n        location: '3rd Floor A Row 12th Parking Slot',\n        status: 'available',\n        walkingDistance: 110,\n        priceDifference: -8,\n        availableNow: true,\n        amenities: ['CCTV', 'Lighting', 'EV Charging'],\n        checkoutPrediction: null,\n        reason: 'Best value with premium amenities'\n      }\n    ];\n\n    // Filter based on vehicle compatibility\n    return alternatives?.filter(slot => {\n      if (vehicleType === 'two-wheeler') {\n        return ['E', 'F']?.includes(slot?.row) || Math.random() > 0.5; // Mock compatibility\n      }\n      return ['A', 'B', 'C', 'D']?.includes(slot?.row) || Math.random() > 0.3;\n    });\n  };\n\n  const [alternativeSlots] = useState(generateAlternativeSlots());\n\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0\n    })?.format(Math.abs(amount));\n  };\n\n  const getPriceDifferenceDisplay = (difference) => {\n    if (difference === 0) return 'Same price';\n    if (difference > 0) return `+${formatCurrency(difference)}`;\n    return `-${formatCurrency(difference)}`;\n  };\n\n  const getPriceDifferenceColor = (difference) => {\n    if (difference === 0) return 'text-muted-foreground';\n    if (difference > 0) return 'text-destructive';\n    return 'text-success';\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'available': return 'text-success';\n      case 'ending-soon': return 'text-warning';\n      default: return 'text-muted-foreground';\n    }\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'available': return 'CheckCircle';\n      case 'ending-soon': return 'Clock';\n      default: return 'Circle';\n    }\n  };\n\n  const handleSlotSelect = (slot) => {\n    onSlotSelect({\n      ...slot,\n      vehicleType: vehicleType\n    });\n  };\n\n  const displayedSlots = showAllSuggestions ? alternativeSlots : alternativeSlots?.slice(0, 3);\n\n  if (alternativeSlots?.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={`bg-card rounded-lg border border-border p-6 ${className}`}>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <Icon name=\"Lightbulb\" size={24} className=\"text-primary\" />\n            <div>\n              <h3 className=\"text-lg font-semibold text-foreground\">Alternative Suggestions</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                {alternativeSlots?.length} better options available\n              </p>\n            </div>\n          </div>\n          \n          {alternativeSlots?.length > 3 && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setShowAllSuggestions(!showAllSuggestions)}\n            >\n              {showAllSuggestions ? 'Show Less' : `View All ${alternativeSlots?.length}`}\n            </Button>\n          )}\n        </div>\n\n        {/* Suggestions List */}\n        <div className=\"space-y-3\">\n          {displayedSlots?.map((slot, index) => (\n            <div\n              key={slot?.id}\n              className=\"bg-muted/20 rounded-lg p-4 hover:bg-muted/30 transition-colors cursor-pointer border border-transparent hover:border-primary/20\"\n              onClick={() => handleSlotSelect(slot)}\n            >\n              <div className=\"flex items-start justify-between mb-3\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <h4 className=\"font-medium text-foreground\">{slot?.location}</h4>\n                    <div className={`flex items-center gap-1 ${getStatusColor(slot?.status)}`}>\n                      <Icon name={getStatusIcon(slot?.status)} size={14} />\n                      <span className=\"text-xs font-medium capitalize\">\n                        {slot?.status?.replace('-', ' ')}\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <p className=\"text-sm text-muted-foreground mb-2\">\n                    {slot?.reason}\n                  </p>\n\n                  <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                    <div className=\"flex items-center gap-1\">\n                      <Icon name=\"MapPin\" size={12} />\n                      <span>{slot?.walkingDistance}m walk</span>\n                    </div>\n                    \n                    {slot?.amenities?.length > 0 && (\n                      <div className=\"flex items-center gap-1\">\n                        <Icon name=\"Star\" size={12} />\n                        <span>{slot?.amenities?.length} amenities</span>\n                      </div>\n                    )}\n                    \n                    {slot?.checkoutPrediction && (\n                      <div className=\"flex items-center gap-1 text-warning\">\n                        <Icon name=\"Clock\" size={12} />\n                        <span>Available in {slot?.checkoutPrediction}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"text-right\">\n                  <div className={`font-medium ${getPriceDifferenceColor(slot?.priceDifference)}`}>\n                    {getPriceDifferenceDisplay(slot?.priceDifference)}\n                  </div>\n                  {slot?.priceDifference < 0 && (\n                    <div className=\"text-xs text-success\">Save money</div>\n                  )}\n                </div>\n              </div>\n\n              {/* Amenities */}\n              {slot?.amenities?.length > 0 && (\n                <div className=\"flex flex-wrap gap-1 mb-3\">\n                  {slot?.amenities?.map((amenity, amenityIndex) => (\n                    <span\n                      key={amenityIndex}\n                      className=\"bg-primary/10 text-primary px-2 py-0.5 rounded text-xs\"\n                    >\n                      {amenity}\n                    </span>\n                  ))}\n                </div>\n              )}\n\n              {/* Action Buttons */}\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  {index === 0 && (\n                    <div className=\"bg-success/10 text-success px-2 py-1 rounded text-xs font-medium\">\n                      Recommended\n                    </div>\n                  )}\n                  {slot?.priceDifference < -5 && (\n                    <div className=\"bg-primary/10 text-primary px-2 py-1 rounded text-xs font-medium\">\n                      Best Value\n                    </div>\n                  )}\n                  {slot?.availableNow && (\n                    <div className=\"bg-success/10 text-success px-2 py-1 rounded text-xs font-medium\">\n                      Available Now\n                    </div>\n                  )}\n                </div>\n\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  iconName=\"ArrowRight\"\n                  iconPosition=\"right\"\n                  onClick={(e) => {\n                    e?.stopPropagation();\n                    handleSlotSelect(slot);\n                  }}\n                >\n                  Select\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Quick Filters */}\n        <div className=\"border-t border-border pt-4\">\n          <div className=\"text-sm font-medium text-foreground mb-2\">Quick Filters</div>\n          <div className=\"flex flex-wrap gap-2\">\n            <Button variant=\"outline\" size=\"sm\" iconName=\"DollarSign\">\n              Best Price\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" iconName=\"MapPin\">\n              Closest\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" iconName=\"Zap\">\n              Available Now\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" iconName=\"Star\">\n              Premium\n            </Button>\n          </div>\n        </div>\n\n        {/* Comparison Note */}\n        <div className=\"bg-primary/5 border border-primary/20 rounded-lg p-3\">\n          <div className=\"flex items-start gap-2\">\n            <Icon name=\"Info\" size={16} className=\"text-primary mt-0.5\" />\n            <div className=\"text-sm\">\n              <div className=\"font-medium text-primary mb-1\">Smart Suggestions</div>\n              <div className=\"text-primary/80\">\n                These alternatives are selected based on your vehicle type, preferred timing, and cost optimization. \n                Checkout predictions are based on historical data.\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AlternativeSlotSuggestions;","size_bytes":11093},"src/pages/slot-selection-booking/components/DateTimeSelector.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\nimport Button from '../../../components/ui/Button';\n\nconst DateTimeSelector = ({\n  selectedDateTime,\n  onDateTimeChange,\n  duration,\n  onDurationChange,\n  className = ''\n}) => {\n  const [selectedDate, setSelectedDate] = useState(\n    selectedDateTime?.date || new Date()?.toISOString()?.split('T')?.[0]\n  );\n  const [selectedHour, setSelectedHour] = useState('09');\n  const [selectedMinute, setSelectedMinute] = useState('00');\n  const [selectedPeriod, setSelectedPeriod] = useState('AM');\n  const [selectedEndHour, setSelectedEndHour] = useState('11');\n  const [selectedEndMinute, setSelectedEndMinute] = useState('00');\n  const [selectedEndPeriod, setSelectedEndPeriod] = useState('AM');\n  const [useManualEndTime, setUseManualEndTime] = useState(false);\n  const [selectedDuration, setSelectedDuration] = useState(duration || 2);\n\n  // Convert hour/minute/period to 24-hour format\n  const convertTo24Hour = (hour, minute, period) => {\n    let h = parseInt(hour, 10);\n    if (period === 'PM' && h !== 12) h += 12;\n    if (period === 'AM' && h === 12) h = 0;\n    return `${h.toString().padStart(2, '0')}:${minute}`;\n  };\n\n  // Format time display for better readability\n  const formatDisplayTime = (hour, minute, period) => {\n    return `${hour}:${minute} ${period}`;\n  };\n\n  // Format end time with consistent formatting\n  const formatEndTime = (endDateTime) => {\n    if (!endDateTime) return '';\n    const hour = endDateTime.getHours();\n    const minute = endDateTime.getMinutes().toString().padStart(2, '0');\n    const period = hour >= 12 ? 'PM' : 'AM';\n    const displayHour = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;\n    return `${displayHour.toString().padStart(2, '0')}:${minute} ${period}`;\n  };\n\n  const selectedTime = convertTo24Hour(selectedHour, selectedMinute, selectedPeriod);\n  const selectedEndTime = useManualEndTime\n    ? convertTo24Hour(selectedEndHour, selectedEndMinute, selectedEndPeriod)\n    : null;\n\n  // Generate hour options (1-12)\n  const generateHourOptions = () => {\n    const hours = [];\n    for (let i = 1; i <= 12; i++) {\n      const hourStr = i.toString().padStart(2, '0');\n      hours.push({ value: hourStr, label: hourStr });\n    }\n    return hours;\n  };\n\n  // Generate minute options (00, 15, 30, 45)\n  const generateMinuteOptions = () => {\n    const minutes = [];\n    for (let i = 0; i < 60; i += 15) {\n      const minuteStr = i.toString().padStart(2, '0');\n      minutes.push({ value: minuteStr, label: minuteStr });\n    }\n    return minutes;\n  };\n\n  // Generate time slots (15-minute intervals for more precision)\n  const generateTimeSlots = () => {\n    const slots = [];\n    for (let hour = 6; hour < 24; hour++) {\n      for (let minute = 0; minute < 60; minute += 15) {\n        const timeString = `${hour?.toString()?.padStart(2, '0')}:${minute?.toString()?.padStart(2, '0')}`;\n        const displayTime = new Date(`2000-01-01T${timeString}`)?.toLocaleTimeString('en-US', {\n          hour: 'numeric',\n          minute: '2-digit',\n          hour12: true\n        });\n        slots?.push({\n          value: timeString,\n          label: displayTime\n        });\n      }\n    }\n    return slots;\n  };\n\n  // Duration options with minutes\n  const durationOptions = [\n    { value: 0.25, label: '15 Minutes' },\n    { value: 0.5, label: '30 Minutes' },\n    { value: 0.75, label: '45 Minutes' },\n    { value: 1, label: '1 Hour' },\n    { value: 1.25, label: '1 Hour 15 Minutes' },\n    { value: 1.5, label: '1 Hour 30 Minutes' },\n    { value: 1.75, label: '1 Hour 45 Minutes' },\n    { value: 2, label: '2 Hours' },\n    { value: 2.5, label: '2 Hours 30 Minutes' },\n    { value: 3, label: '3 Hours' },\n    { value: 4, label: '4 Hours' },\n    { value: 6, label: '6 Hours' },\n    { value: 8, label: '8 Hours' },\n    { value: 12, label: '12 Hours' },\n    { value: 24, label: '24 Hours (Full Day)' }\n  ];\n\n  const timeSlots = generateTimeSlots();\n\n  // Calculate end time\n  const calculateEndTime = (startDate, startTime, durationHours) => {\n    const startDateTime = new Date(`${startDate}T${startTime}`);\n    const endDateTime = new Date(startDateTime.getTime() + (durationHours * 60 * 60 * 1000));\n    return endDateTime;\n  };\n\n  const endDateTime = useManualEndTime && selectedEndTime\n    ? new Date(`${selectedDate}T${selectedEndTime}`)\n    : calculateEndTime(selectedDate, selectedTime, selectedDuration);\n\n  // Update parent component when values change\n  useEffect(() => {\n    const startDateTime = new Date(`${selectedDate}T${selectedTime}`);\n\n    // Calculate duration if using manual end time\n    let calculatedDuration = selectedDuration;\n    let durationInMinutes = selectedDuration * 60;\n    \n    if (useManualEndTime && selectedEndTime) {\n      const endDateTime = new Date(`${selectedDate}T${selectedEndTime}`);\n      const durationMs = endDateTime - startDateTime;\n      calculatedDuration = Math.max(0, durationMs / (1000 * 60 * 60)); // Convert to hours\n      durationInMinutes = Math.max(0, durationMs / (1000 * 60)); // Convert to minutes\n    }\n\n    onDateTimeChange({\n      date: selectedDate,\n      time: selectedTime,\n      startDateTime,\n      endDateTime,\n      duration: calculatedDuration,\n      durationInMinutes: Math.round(durationInMinutes),\n      useManualEndTime,\n      manualEndTime: useManualEndTime ? selectedEndTime : null\n    });\n    onDurationChange(calculatedDuration);\n  }, [selectedDate, selectedTime, selectedDuration, useManualEndTime, selectedEndHour, selectedEndMinute, selectedEndPeriod, selectedEndTime]);\n\n  // Quick time selection\n  const quickTimeOptions = [\n    { label: 'Now', time: new Date()?.toTimeString()?.slice(0, 5) },\n    { label: '9:00 AM', time: '09:00' },\n    { label: '12:00 PM', time: '12:00' },\n    { label: '3:00 PM', time: '15:00' },\n    { label: '6:00 PM', time: '18:00' }\n  ];\n\n  const handleQuickTimeSelect = (time) => {\n    setSelectedTime(time);\n  };\n\n  // Get minimum date (today)\n  const today = new Date()?.toISOString()?.split('T')?.[0];\n  const maxDate = new Date();\n  maxDate?.setDate(maxDate?.getDate() + 30); // 30 days from now\n  const maxDateString = maxDate?.toISOString()?.split('T')?.[0];\n\n  // Check if selected time is in the past for today\n  const isTimeInPast = () => {\n    if (selectedDate === today) {\n      const now = new Date();\n      const selectedDateTime = new Date(`${selectedDate}T${selectedTime}`);\n      return selectedDateTime < now;\n    }\n    return false;\n  };\n\n  return (\n    <div className={`bg-card rounded-lg border border-border p-6 ${className}`}>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center gap-3\">\n          <Icon name=\"Calendar\" size={24} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Select Date & Time</h3>\n        </div>\n\n        {/* Date Selection */}\n        <div className=\"space-y-4\">\n          <Input\n            type=\"date\"\n            label=\"Parking Date\"\n            value={selectedDate}\n            onChange={(e) => setSelectedDate(e?.target?.value)}\n            min={today}\n            max={maxDateString}\n            required\n          />\n\n          {/* Manual Time Input */}\n          <div className=\"space-y-3\">\n            <label className=\"text-sm font-medium text-foreground\">Start Time</label>\n\n            {/* Start Time Selectors */}\n            <div className=\"grid grid-cols-3 gap-2\">\n              <div>\n                <input\n                  type=\"text\"\n                  value={selectedHour}\n                  onChange={(e) => {\n                    const input = e.target.value;\n                    \n                    // Allow empty or up to 2 digits\n                    if (input === '' || /^\\d{1,2}$/.test(input)) {\n                      if (input === '') {\n                        setSelectedHour('');\n                      } else {\n                        const numValue = parseInt(input, 10);\n                        if (numValue >= 1 && numValue <= 12) {\n                          setSelectedHour(input);\n                        } else if (input.length === 1) {\n                          // Allow single digit input for typing\n                          setSelectedHour(input);\n                        }\n                      }\n                    }\n                  }}\n                  onBlur={(e) => {\n                    const value = e.target.value;\n                    if (value === '') {\n                      setSelectedHour('01');\n                    } else {\n                      const numValue = parseInt(value, 10);\n                      if (numValue >= 1 && numValue <= 12) {\n                        setSelectedHour(numValue.toString().padStart(2, '0'));\n                      } else {\n                        setSelectedHour('01');\n                      }\n                    }\n                  }}\n                  onKeyDown={(e) => {\n                    // Allow backspace, delete, tab, escape, enter\n                    if ([8, 9, 27, 13, 46].indexOf(e.keyCode) !== -1 ||\n                        // Allow Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X\n                        (e.keyCode === 65 && e.ctrlKey === true) ||\n                        (e.keyCode === 67 && e.ctrlKey === true) ||\n                        (e.keyCode === 86 && e.ctrlKey === true) ||\n                        (e.keyCode === 88 && e.ctrlKey === true)) {\n                      return;\n                    }\n                    // Ensure that it is a number and stop the keypress\n                    if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {\n                      e.preventDefault();\n                    }\n                  }}\n                  className=\"w-full p-3 border border-input rounded-lg bg-background text-foreground focus:ring-2 focus:ring-primary focus:border-primary text-center\"\n                  placeholder=\"01\"\n                  maxLength=\"2\"\n                />\n                <div className=\"text-xs text-muted-foreground text-center mt-1\">Hour (01-12)</div>\n              </div>\n              <div>\n                <input\n                  type=\"text\"\n                  value={selectedMinute}\n                  onChange={(e) => {\n                    const input = e.target.value;\n                    \n                    // Allow empty or up to 2 digits\n                    if (input === '' || /^\\d{1,2}$/.test(input)) {\n                      if (input === '') {\n                        setSelectedMinute('');\n                      } else {\n                        const numValue = parseInt(input, 10);\n                        if (numValue >= 0 && numValue <= 59) {\n                          setSelectedMinute(input);\n                        } else if (input.length === 1) {\n                          // Allow single digit input for typing\n                          setSelectedMinute(input);\n                        }\n                      }\n                    }\n                  }}\n                  onBlur={(e) => {\n                    const value = e.target.value;\n                    if (value === '') {\n                      setSelectedMinute('00');\n                    } else {\n                      const numValue = parseInt(value, 10);\n                      if (numValue >= 0 && numValue <= 59) {\n                        setSelectedMinute(numValue.toString().padStart(2, '0'));\n                      } else {\n                        setSelectedMinute('00');\n                      }\n                    }\n                  }}\n                  onKeyDown={(e) => {\n                    // Allow backspace, delete, tab, escape, enter\n                    if ([8, 9, 27, 13, 46].indexOf(e.keyCode) !== -1 ||\n                        // Allow Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X\n                        (e.keyCode === 65 && e.ctrlKey === true) ||\n                        (e.keyCode === 67 && e.ctrlKey === true) ||\n                        (e.keyCode === 86 && e.ctrlKey === true) ||\n                        (e.keyCode === 88 && e.ctrlKey === true)) {\n                      return;\n                    }\n                    // Ensure that it is a number and stop the keypress\n                    if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {\n                      e.preventDefault();\n                    }\n                  }}\n                  className=\"w-full p-3 border border-input rounded-lg bg-background text-foreground focus:ring-2 focus:ring-primary focus:border-primary text-center\"\n                  placeholder=\"00\"\n                  maxLength=\"2\"\n                />\n                <div className=\"text-xs text-muted-foreground text-center mt-1\">Minute (00-59)</div>\n              </div>\n              <div>\n                <select\n                  value={selectedPeriod}\n                  onChange={(e) => setSelectedPeriod(e.target.value)}\n                  className=\"w-full p-3 border border-input rounded-lg bg-background text-foreground focus:ring-2 focus:ring-primary focus:border-primary\"\n                >\n                  <option value=\"AM\">AM</option>\n                  <option value=\"PM\">PM</option>\n                </select>\n                <div className=\"text-xs text-muted-foreground text-center mt-1\">Period</div>\n              </div>\n            </div>\n\n            {/* End Time Selection Toggle */}\n            <div className=\"flex items-center gap-2 mt-4\">\n              <label className=\"flex items-center gap-2 cursor-pointer\">\n                <input\n                  type=\"checkbox\"\n                  checked={useManualEndTime}\n                  onChange={(e) => setUseManualEndTime(e.target.checked)}\n                  className=\"w-4 h-4 text-primary border-gray-300 rounded focus:ring-primary\"\n                />\n                <span className=\"text-sm font-medium text-foreground\">Set custom end time</span>\n              </label>\n            </div>\n\n            {/* Manual End Time Selection */}\n            {useManualEndTime && (\n              <div className=\"space-y-3 mt-3\">\n                <label className=\"text-sm font-medium text-foreground\">End Time</label>\n\n                {/* End Time Selectors */}\n                <div className=\"grid grid-cols-3 gap-2\">\n                  <div>\n                    <input\n                      type=\"text\"\n                      value={selectedEndHour}\n                      onChange={(e) => {\n                        const input = e.target.value;\n                        \n                        // Allow empty or up to 2 digits\n                        if (input === '' || /^\\d{1,2}$/.test(input)) {\n                          if (input === '') {\n                            setSelectedEndHour('');\n                          } else {\n                            const numValue = parseInt(input, 10);\n                            if (numValue >= 1 && numValue <= 12) {\n                              setSelectedEndHour(input);\n                            } else if (input.length === 1) {\n                              // Allow single digit input for typing\n                              setSelectedEndHour(input);\n                            }\n                          }\n                        }\n                      }}\n                      onBlur={(e) => {\n                        const value = e.target.value;\n                        if (value === '') {\n                          setSelectedEndHour('01');\n                        } else {\n                          const numValue = parseInt(value, 10);\n                          if (numValue >= 1 && numValue <= 12) {\n                            setSelectedEndHour(numValue.toString().padStart(2, '0'));\n                          } else {\n                            setSelectedEndHour('01');\n                          }\n                        }\n                      }}\n                      onKeyDown={(e) => {\n                        // Allow backspace, delete, tab, escape, enter\n                        if ([8, 9, 27, 13, 46].indexOf(e.keyCode) !== -1 ||\n                            // Allow Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X\n                            (e.keyCode === 65 && e.ctrlKey === true) ||\n                            (e.keyCode === 67 && e.ctrlKey === true) ||\n                            (e.keyCode === 86 && e.ctrlKey === true) ||\n                            (e.keyCode === 88 && e.ctrlKey === true)) {\n                          return;\n                        }\n                        // Ensure that it is a number and stop the keypress\n                        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {\n                          e.preventDefault();\n                        }\n                      }}\n                      className=\"w-full p-3 border border-input rounded-lg bg-background text-foreground focus:ring-2 focus:ring-primary focus:border-primary text-center\"\n                      placeholder=\"01\"\n                      maxLength=\"2\"\n                    />\n                    <div className=\"text-xs text-muted-foreground text-center mt-1\">Hour (01-12)</div>\n                  </div>\n                  <div>\n                    <input\n                      type=\"text\"\n                      value={selectedEndMinute}\n                      onChange={(e) => {\n                        const input = e.target.value;\n                        \n                        // Allow empty or up to 2 digits\n                        if (input === '' || /^\\d{1,2}$/.test(input)) {\n                          if (input === '') {\n                            setSelectedEndMinute('');\n                          } else {\n                            const numValue = parseInt(input, 10);\n                            if (numValue >= 0 && numValue <= 59) {\n                              setSelectedEndMinute(input);\n                            } else if (input.length === 1) {\n                              // Allow single digit input for typing\n                              setSelectedEndMinute(input);\n                            }\n                          }\n                        }\n                      }}\n                      onBlur={(e) => {\n                        const value = e.target.value;\n                        if (value === '') {\n                          setSelectedEndMinute('00');\n                        } else {\n                          const numValue = parseInt(value, 10);\n                          if (numValue >= 0 && numValue <= 59) {\n                            setSelectedEndMinute(numValue.toString().padStart(2, '0'));\n                          } else {\n                            setSelectedEndMinute('00');\n                          }\n                        }\n                      }}\n                      onKeyDown={(e) => {\n                        // Allow backspace, delete, tab, escape, enter\n                        if ([8, 9, 27, 13, 46].indexOf(e.keyCode) !== -1 ||\n                            // Allow Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X\n                            (e.keyCode === 65 && e.ctrlKey === true) ||\n                            (e.keyCode === 67 && e.ctrlKey === true) ||\n                            (e.keyCode === 86 && e.ctrlKey === true) ||\n                            (e.keyCode === 88 && e.ctrlKey === true)) {\n                          return;\n                        }\n                        // Ensure that it is a number and stop the keypress\n                        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {\n                          e.preventDefault();\n                        }\n                      }}\n                      className=\"w-full p-3 border border-input rounded-lg bg-background text-foreground focus:ring-2 focus:ring-primary focus:border-primary text-center\"\n                      placeholder=\"00\"\n                      maxLength=\"2\"\n                    />\n                    <div className=\"text-xs text-muted-foreground text-center mt-1\">Minute (00-59)</div>\n                  </div>\n                  <div>\n                    <select\n                      value={selectedEndPeriod}\n                      onChange={(e) => setSelectedEndPeriod(e.target.value)}\n                      className=\"w-full p-3 border border-input rounded-lg bg-background text-foreground focus:ring-2 focus:ring-primary focus:border-primary\"\n                    >\n                      <option value=\"AM\">AM</option>\n                      <option value=\"PM\">PM</option>\n                    </select>\n                    <div className=\"text-xs text-muted-foreground text-center mt-1\">Period</div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Time Preview */}\n            <div className=\"bg-primary/5 border border-primary/20 rounded-lg p-3 mt-3\">\n              <div className=\"text-center\">\n                <div className=\"text-xs text-muted-foreground mb-1\">Selected Time Range</div>\n                <div className=\"text-lg font-mono font-bold text-primary\">\n                  {formatDisplayTime(selectedHour, selectedMinute, selectedPeriod)} - {formatEndTime(endDateTime)}\n                </div>\n                <div className=\"text-xs text-muted-foreground mt-1\">\n                  {(() => {\n                    if (useManualEndTime) {\n                      const startDateTime = new Date(`${selectedDate}T${selectedTime}`);\n                      const endDateTime = new Date(`${selectedDate}T${selectedEndTime}`);\n                      const durationMs = endDateTime - startDateTime;\n                      const actualMinutes = Math.max(0, Math.round(durationMs / (1000 * 60)));\n                      \n                      if (actualMinutes < 60) {\n                        return `Duration: ${actualMinutes} Minutes`;\n                      } else if (actualMinutes === 60) {\n                        return 'Duration: 1 Hour';\n                      } else if (actualMinutes % 60 === 0) {\n                        return `Duration: ${Math.floor(actualMinutes / 60)} Hours`;\n                      } else {\n                        const hours = Math.floor(actualMinutes / 60);\n                        const mins = actualMinutes % 60;\n                        return `Duration: ${hours} Hour${hours > 1 ? 's' : ''} ${mins} Minutes`;\n                      }\n                    } else {\n                      const actualMinutes = Math.round(selectedDuration * 60);\n                      if (actualMinutes < 60) {\n                        return `Duration: ${actualMinutes} Minutes`;\n                      } else if (actualMinutes === 60) {\n                        return 'Duration: 1 Hour';\n                      } else if (actualMinutes % 60 === 0) {\n                        return `Duration: ${Math.floor(actualMinutes / 60)} Hours`;\n                      } else {\n                        const hours = Math.floor(actualMinutes / 60);\n                        const mins = actualMinutes % 60;\n                        return `Duration: ${hours} Hour${hours > 1 ? 's' : ''} ${mins} Minutes`;\n                      }\n                    }\n                  })()}\n                </div>\n              </div>\n            </div>\n\n\n          </div>\n\n          {/* Duration Selection - Only show if not using manual end time */}\n          {!useManualEndTime && (\n            <Select\n              label=\"Parking Duration\"\n              options={durationOptions}\n              value={selectedDuration}\n              onChange={setSelectedDuration}\n              placeholder=\"Select duration\"\n            />\n          )}\n        </div>\n\n        {/* Booking Summary */}\n        <div className=\"bg-muted/20 rounded-lg p-4 space-y-3\">\n          <h4 className=\"font-medium text-foreground\">Booking Summary</h4>\n\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <div className=\"text-muted-foreground mb-1\">Start</div>\n              <div className=\"font-medium text-foreground\">\n                {new Date(`${selectedDate}T${selectedTime}`)?.toLocaleDateString('en-US', {\n                  weekday: 'short',\n                  month: 'short',\n                  day: 'numeric'\n                })}\n              </div>\n              <div className=\"text-muted-foreground\">\n                {formatDisplayTime(selectedHour, selectedMinute, selectedPeriod)}\n              </div>\n            </div>\n\n            <div>\n              <div className=\"text-muted-foreground mb-1\">End</div>\n              <div className=\"font-medium text-foreground\">\n                {endDateTime?.toLocaleDateString('en-US', {\n                  weekday: 'short',\n                  month: 'short',\n                  day: 'numeric'\n                })}\n              </div>\n              <div className=\"text-muted-foreground\">\n                {formatEndTime(endDateTime)}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"pt-2 border-t border-border\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-muted-foreground\">Total Duration</span>\n              <span className=\"font-medium text-foreground\">\n                {(() => {\n                  let actualDuration = selectedDuration;\n                  let actualMinutes = selectedDuration * 60;\n                  \n                  if (useManualEndTime && selectedEndTime) {\n                    const startDateTime = new Date(`${selectedDate}T${selectedTime}`);\n                    const endDateTime = new Date(`${selectedDate}T${selectedEndTime}`);\n                    const durationMs = endDateTime - startDateTime;\n                    actualDuration = Math.max(0, durationMs / (1000 * 60 * 60));\n                    actualMinutes = Math.max(0, durationMs / (1000 * 60));\n                  }\n                  \n                  const roundedMinutes = Math.round(actualMinutes);\n                  \n                  if (roundedMinutes < 60) {\n                    return `${roundedMinutes} Minutes`;\n                  } else if (roundedMinutes === 60) {\n                    return '1 Hour';\n                  } else if (roundedMinutes % 60 === 0) {\n                    return `${Math.floor(roundedMinutes / 60)} Hours`;\n                  } else {\n                    const hours = Math.floor(roundedMinutes / 60);\n                    const mins = roundedMinutes % 60;\n                    return `${hours} Hour${hours > 1 ? 's' : ''} ${mins} Minutes`;\n                  }\n                })()}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Time Validation Warning */}\n        {isTimeInPast() && (\n          <div className=\"bg-warning/10 border border-warning/20 rounded-lg p-3\">\n            <div className=\"flex items-start gap-2\">\n              <Icon name=\"AlertTriangle\" size={16} className=\"text-warning mt-0.5\" />\n              <div className=\"text-sm\">\n                <div className=\"font-medium text-warning\">Invalid Time Selection</div>\n                <div className=\"text-warning/80\">\n                  Please select a future time for today's bookings.\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DateTimeSelector;\n","size_bytes":27441},"src/pages/slot-selection-booking/components/FloorLayoutVisualization.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst FloorLayoutVisualization = ({ \n  selectedFloor, \n  onFloorChange, \n  selectedSlot, \n  onSlotSelect,\n  vehicleType,\n  className = '' \n}) => {\n  const [hoveredSlot, setHoveredSlot] = useState(null);\n  const [clickedSlot, setClickedSlot] = useState(null); // State to track the clicked slot\n\n  // State for the modal\n  const [showSelectionModal, setShowSelectionModal] = useState(false);\n  const [selectedSlotForModal, setSelectedSlotForModal] = useState(null);\n\n  // Mock floor data with hierarchical slot identification\n  const floors = [\n    { id: 1, name: '1st Floor', totalSlots: 120, availableSlots: 45 },\n    { id: 2, name: '2nd Floor', totalSlots: 120, availableSlots: 67 },\n    { id: 3, name: '3rd Floor', totalSlots: 100, availableSlots: 23 }\n  ];\n\n  // Generate mock slot data for selected floor\n  const generateSlotData = (floorId) => {\n    const rows = ['A', 'B', 'C', 'D', 'E', 'F'];\n    const slotsPerRow = floorId === 3 ? 16 : 20;\n    const slots = [];\n\n    rows?.forEach((row, rowIndex) => {\n      for (let slotNum = 1; slotNum <= slotsPerRow; slotNum++) {\n        const slotId = `${floorId}-${row}-${slotNum}`;\n        const random = Math.random();\n\n        // Determine slot status based on random probability - reduced reserved slots\n        let status = 'available';\n        if (random < 0.1) status = 'reserved';         // Only 10% reserved (was 30%)\n        else if (random < 0.15) status = 'ending-soon'; // 5% ending soon\n        else if (random < 0.18) status = 'maintenance';  // 3% maintenance\n\n        // Vehicle compatibility - show all slots as available when no vehicle type is selected\n        const isCompatible = !vehicleType || // If no vehicle type selected, show all as compatible\n          (vehicleType === 'two-wheeler' ? \n            (rowIndex >= 4) : // Two-wheelers in rows E, F\n            (rowIndex < 4));  // Four-wheelers in rows A, B, C, D\n\n        slots?.push({\n          id: slotId,\n          floorId,\n          row,\n          slotNumber: slotNum,\n          status: isCompatible ? status : 'incompatible',\n          vehicleType: vehicleType, // Always pass the selected vehicle type\n          location: `${floorId === 1 ? '1st' : floorId === 2 ? '2nd' : '3rd'} Floor ${row} Row ${slotNum}${slotNum === 1 ? 'st' : slotNum === 2 ? 'nd' : slotNum === 3 ? 'rd' : 'th'} Parking Slot`,\n          walkingDistance: Math.floor(Math.random() * 150) + 50, // 50-200 meters\n          amenities: ['CCTV', 'Lighting', random > 0.5 ? 'EV Charging' : null]?.filter(Boolean),\n          endTime: status === 'ending-soon' ? new Date(Date.now() + Math.random() * 3600000) : null\n        });\n      }\n    });\n\n    return slots;\n  };\n\n  const [slotData, setSlotData] = useState(generateSlotData(selectedFloor));\n\n  useEffect(() => {\n    setSlotData(generateSlotData(selectedFloor));\n  }, [selectedFloor, vehicleType]);\n\n  const getSlotColor = (slot) => {\n    switch (slot?.status) {\n      case 'available':\n        return 'bg-success hover:bg-success/80 border-success';\n      case 'reserved':\n        return 'bg-destructive border-destructive cursor-not-allowed';\n      case 'ending-soon':\n        return 'bg-warning hover:bg-warning/80 border-warning';\n      case 'maintenance':\n        return 'bg-muted border-muted cursor-not-allowed';\n      case 'incompatible':\n        return 'bg-muted/50 border-muted cursor-not-allowed opacity-50';\n      default:\n        return 'bg-muted border-muted';\n    }\n  };\n\n  const getSlotIcon = (slot) => {\n    if (slot?.status === 'incompatible') return null;\n    if (vehicleType === 'two-wheeler') return 'Bike';\n    return 'Car';\n  };\n\n  // Handle slot selection with modal\n  const handleSlotClick = (slot) => {\n    console.log('FloorLayout - Slot clicked:', slot);\n    if (slot.status === 'available' || slot.status === 'ending-soon') {\n      setSelectedSlotForModal(slot);\n      setShowSelectionModal(true);\n    }\n  };\n\n  // Confirm slot selection\n  const handleConfirmSlotSelection = () => {\n    console.log('FloorLayout - Confirming slot selection:', selectedSlotForModal);\n    if (selectedSlotForModal) {\n      // Ensure we pass complete slot data\n      const completeSlotData = {\n        ...selectedSlotForModal,\n        slotNumber: selectedSlotForModal.slotNumber || selectedSlotForModal.id,\n        location: selectedSlotForModal.location || `${selectedFloor === 1 ? '1st' : selectedFloor === 2 ? '2nd' : '3rd'} Floor ${selectedSlotForModal.row || 'A'} Row ${selectedSlotForModal.slotNumber || selectedSlotForModal.id}th Parking Slot`,\n        floorId: selectedFloor,\n        walkingDistance: selectedSlotForModal.walkingDistance || Math.floor(Math.random() * 100) + 50\n      };\n\n      console.log('FloorLayout - Passing complete slot data:', completeSlotData);\n      onSlotSelect(completeSlotData);\n      setShowSelectionModal(false);\n      setSelectedSlotForModal(null);\n    }\n  };\n\n  const currentFloor = floors?.find(f => f?.id === selectedFloor);\n  const rows = ['A', 'B', 'C', 'D', 'E', 'F'];\n\n  return (\n    <div className={`bg-card rounded-lg border border-border ${className}`}>\n      {/* Floor Selection Header */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-foreground\">Floor Layout</h3>\n          <div className=\"text-sm text-muted-foreground\">\n            {currentFloor?.availableSlots} of {currentFloor?.totalSlots} available\n          </div>\n        </div>\n\n        {/* Floor Tabs */}\n        <div className=\"flex gap-2\">\n          {floors?.map((floor) => (\n            <Button\n              key={floor?.id}\n              variant={selectedFloor === floor?.id ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={() => {\n                onFloorChange(floor?.id);\n                setClickedSlot(null); // Clear selected slot when changing floor\n              }}\n              className=\"flex-1\"\n            >\n              <div className=\"text-center\">\n                <div className=\"font-medium\">{floor?.name}</div>\n                <div className=\"text-xs opacity-80\">{floor?.availableSlots} free</div>\n              </div>\n            </Button>\n          ))}\n        </div>\n      </div>\n      {/* Legend */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"flex flex-wrap gap-4 text-xs\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 bg-success rounded border\"></div>\n            <span>Available</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 bg-destructive rounded border\"></div>\n            <span>Reserved</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 bg-warning rounded border\"></div>\n            <span>Ending Soon</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 bg-muted rounded border\"></div>\n            <span>Maintenance</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 bg-muted/50 rounded border opacity-50\"></div>\n            <span>Incompatible</span>\n          </div>\n        </div>\n      </div>\n      {/* Slot Grid */}\n      <div className=\"p-4\">\n        <div className=\"space-y-6\">\n          {rows?.map((row) => {\n            const rowSlots = slotData?.filter(slot => slot?.row === row);\n            const isVehicleCompatibleRow = vehicleType === 'two-wheeler' ? \n              ['E', 'F']?.includes(row) : \n              ['A', 'B', 'C', 'D']?.includes(row);\n\n            return (\n              <div key={row} className=\"space-y-2\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-8 h-8 bg-muted rounded flex items-center justify-center text-sm font-medium\">\n                    {row}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    Row {row} - {isVehicleCompatibleRow ? \n                      (vehicleType === 'two-wheeler' ? 'Two Wheeler' : 'Four Wheeler') : \n                      'Not Compatible'\n                    }\n                  </div>\n                </div>\n                <div className=\"overflow-x-auto pb-8\">\n                  <div \n                    className=\"grid gap-3 sm:gap-4 min-w-full\"\n                    style={{\n                      gridTemplateColumns: `repeat(${rowSlots?.length || 20}, minmax(40px, 1fr))`,\n                      maxWidth: '100%',\n                      width: 'max-content'\n                    }}\n                  >\n                    {rowSlots?.map((slot) => (\n                      <button\n                        key={slot?.id}\n                        onClick={() => handleSlotClick(slot)}\n                        onMouseEnter={() => setHoveredSlot(slot)}\n                        onMouseLeave={() => setHoveredSlot(null)}\n                        className={`\n                          relative w-9 h-9 sm:w-10 sm:h-10 md:w-11 md:h-11 lg:w-12 lg:h-12 rounded-lg border-2 transition-all duration-200 flex items-center justify-center flex-shrink-0\n                          ${getSlotColor(slot)}\n                          ${selectedSlot?.id === slot?.id ? 'ring-2 ring-primary ring-offset-1 scale-105' : ''}\n                          ${slot?.status === 'available' || slot?.status === 'ending-soon' ? 'hover:scale-110' : ''}\n                          ${clickedSlot?.id === slot?.id ? 'ring-2 ring-blue-500 ring-offset-2 bg-blue-50 border-blue-500 scale-105' : ''}\n                        `}\n                        disabled={slot?.status === 'reserved' || slot?.status === 'maintenance' || slot?.status === 'incompatible'}\n                        title={slot?.location}\n                      >\n                        {getSlotIcon(slot) && (\n                          <Icon \n                            name={getSlotIcon(slot)} \n                            size={14} \n                            className=\"text-white\"\n                          />\n                        )}\n                        <span className=\"absolute -bottom-6 text-xs font-mono text-foreground bg-background/80 px-1 rounded whitespace-nowrap\">\n                          {slot?.slotNumber}\n                        </span>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Hover Tooltip */}\n        {hoveredSlot && (\n          <div className=\"fixed z-50 bg-popover text-popover-foreground p-3 rounded-lg shadow-lg border border-border pointer-events-none\">\n            <div className=\"font-medium\">{hoveredSlot?.location}</div>\n            <div className=\"text-sm text-muted-foreground\">\n              Walking distance: {hoveredSlot?.walkingDistance}m\n            </div>\n            {hoveredSlot?.amenities?.length > 0 && (\n              <div className=\"text-sm text-muted-foreground\">\n                Amenities: {hoveredSlot?.amenities?.join(', ')}\n              </div>\n            )}\n            {hoveredSlot?.endTime && (\n              <div className=\"text-sm text-warning\">\n                Available in: {Math.ceil((hoveredSlot?.endTime - new Date()) / 60000)} min\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Slot Selection Modal */}\n      {showSelectionModal && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\n          <div className=\"bg-card p-6 rounded-lg shadow-xl border border-border max-w-sm w-full\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-foreground\">Confirm Slot Selection</h3>\n              <button onClick={() => { setShowSelectionModal(false); setSelectedSlotForModal(null); }} className=\"text-muted-foreground hover:text-foreground\">\n                &times;\n              </button>\n            </div>\n            {selectedSlotForModal && (\n              <>\n                <p className=\"text-sm text-foreground/80 mb-2\">\n                  You are about to select:\n                </p>\n                <p className=\"font-medium text-primary mb-4\">\n                  {selectedSlotForModal.location}\n                </p>\n                <div className=\"flex gap-3\">\n                  <Button variant=\"outline\" onClick={() => { setShowSelectionModal(false); setSelectedSlotForModal(null); }} className=\"flex-1\">\n                    Cancel\n                  </Button>\n                  <Button onClick={handleConfirmSlotSelection} className=\"flex-1\">\n                    Confirm\n                  </Button>\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Select Slot Button (if not using modal) - This part might need adjustment based on UI flow */}\n      {/* The logic is now primarily driven by the modal, so this might be redundant or need to be integrated differently */}\n      {clickedSlot && !showSelectionModal && (\n        <div className=\"mt-6 p-4 bg-primary/10 border-2 border-primary rounded-lg shadow-md\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div>\n              <h4 className=\"font-semibold text-primary text-lg\">\n                Slot {clickedSlot.id} Selected\n              </h4>\n              <p className=\"text-sm text-foreground/80\">\n                {clickedSlot.location}\n              </p>\n            </div>\n            <div className=\"text-xs text-primary font-medium bg-primary/20 px-2 py-1 rounded\">\n              {clickedSlot.status === 'available' ? 'Available Now' : 'Available Soon'}\n            </div>\n          </div>\n          <div className=\"flex gap-3\">\n            <button\n              onClick={() => setClickedSlot(null)}\n              className=\"flex-1 px-4 py-3 border-2 border-border text-foreground rounded-lg hover:bg-muted transition-colors font-medium\"\n            >\n              Cancel\n            </button>\n            <button\n              onClick={handleConfirmSlotSelection} // Use the modal confirmation handler\n              className=\"flex-1 px-4 py-3 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors font-semibold shadow-sm\"\n            >\n              Select This Slot\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FloorLayoutVisualization;\n","size_bytes":14671},"src/pages/slot-selection-booking/components/PricingCalculator.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport Icon from '../../../components/AppIcon';\n\n\nconst PricingCalculator = ({\n  selectedSlot,\n  vehicleType,\n  duration,\n  dateTime,\n  onPriceChange,\n  className = ''\n}) => {\n  const [pricingBreakdown, setPricingBreakdown] = useState(null);\n  const [appliedDiscounts, setAppliedDiscounts] = useState([]);\n\n  // Base pricing rates for different vehicle types\n  const basePricing = {\n    'two-wheeler': {\n      hourly: 25, // ‚Çπ/hour for bikes/scooters\n      daily: 200\n    },\n    'four-wheeler': {\n      hourly: 50, // ‚Çπ/hour for cars/SUVs\n      daily: 400\n    },\n    'both': {\n      hourly: 50, // Default to car pricing\n      daily: 400\n    }\n  };\n\n  // Time-based multipliers\n  const timeMultipliers = {\n    peak: 1.5,      // 8 AM - 10 AM, 5 PM - 8 PM\n    normal: 1.0,    // 10 AM - 5 PM\n    offPeak: 0.8    // 8 PM - 8 AM\n  };\n\n  // Available discounts\n  const availableDiscounts = [\n    {\n      id: 'early-bird',\n      name: 'Early Bird Discount',\n      description: 'Book before 8 AM',\n      percentage: 15,\n      condition: (dateTime) => {\n        const hour = new Date(`${dateTime?.date}T${dateTime?.time}`)?.getHours();\n        return hour < 8;\n      }\n    },\n    {\n      id: 'long-duration',\n      name: 'Long Duration Discount',\n      description: '6+ hours booking',\n      percentage: 20,\n      condition: (duration) => duration >= 6\n    },\n    {\n      id: 'weekend-special',\n      name: 'Weekend Special',\n      description: 'Weekend bookings',\n      percentage: 10,\n      condition: (dateTime) => {\n        const day = new Date(`${dateTime?.date}T${dateTime?.time}`)?.getDay();\n        return day === 0 || day === 6; // Sunday or Saturday\n      }\n    },\n    {\n      id: 'off-peak',\n      name: 'Off-Peak Hours',\n      description: 'After 8 PM or before 8 AM',\n      percentage: 25,\n      condition: (dateTime) => {\n        const hour = new Date(`${dateTime?.date}T${dateTime?.time}`)?.getHours();\n        return hour >= 20 || hour < 8;\n      }\n    }\n  ];\n\n  // Calculate time category\n  const getTimeCategory = (dateTime) => {\n    if (!dateTime) return 'normal';\n    const hour = new Date(`${dateTime.date}T${dateTime.time}`)?.getHours();\n\n    if ((hour >= 8 && hour < 10) || (hour >= 17 && hour < 20)) {\n      return 'peak';\n    } else if (hour >= 20 || hour < 8) {\n      return 'offPeak';\n    }\n    return 'normal';\n  };\n\n  // Calculate pricing\n  useEffect(() => {\n    if (!vehicleType || !duration || !dateTime) {\n      setPricingBreakdown(null);\n      return;\n    }\n\n    const baseRate = basePricing?.[vehicleType]?.hourly || 25;\n    const timeCategory = getTimeCategory(dateTime);\n    const timeMultiplier = timeMultipliers?.[timeCategory];\n\n    // Get actual duration in minutes\n    const actualMinutes = dateTime?.durationInMinutes || Math.round(duration * 60);\n    const actualDuration = actualMinutes / 60; // Convert back to hours for calculation\n    \n    // Calculate base cost per minute for more accurate pricing\n    const ratePerMinute = baseRate / 60;\n    let baseCost = ratePerMinute * actualMinutes;\n\n    // Apply time multiplier\n    const timeAdjustedCost = baseCost * timeMultiplier;\n\n    // Check applicable discounts - use actual duration\n    const applicableDiscounts = availableDiscounts?.filter(discount => {\n      if (discount?.id === 'long-duration') return discount?.condition(actualDuration);\n      if (discount?.id === 'early-bird' || discount?.id === 'weekend-special' || discount?.id === 'off-peak') {\n        return discount?.condition(dateTime);\n      }\n      return false;\n    });\n\n    // Calculate discount amount\n    let totalDiscountPercentage = 0;\n    applicableDiscounts?.forEach(discount => {\n      totalDiscountPercentage += discount?.percentage;\n    });\n\n    // Cap discount at 50%\n    totalDiscountPercentage = Math.min(totalDiscountPercentage, 50);\n\n    const discountAmount = (timeAdjustedCost * totalDiscountPercentage) / 100;\n    const finalCost = timeAdjustedCost - discountAmount;\n\n    // Service fee and taxes (fixed rates for consistency)\n    const serviceFee = Math.round(finalCost * 0.05); // 5% service fee, rounded\n    const taxes = Math.round((finalCost + serviceFee) * 0.18); // 18% GST, rounded\n    const totalCost = finalCost + serviceFee + taxes;\n\n    const breakdown = {\n      baseRate,\n      baseCost,\n      timeCategory,\n      timeMultiplier,\n      timeAdjustedCost,\n      applicableDiscounts,\n      totalDiscountPercentage,\n      discountAmount,\n      subtotal: finalCost,\n      serviceFee,\n      taxes,\n      totalCost,\n      savings: baseCost - finalCost,\n      actualMinutes,\n      actualDuration\n    };\n\n    setPricingBreakdown(breakdown);\n    setAppliedDiscounts(applicableDiscounts);\n    onPriceChange(breakdown);\n  }, [selectedSlot, vehicleType, duration, dateTime, onPriceChange]);\n\n  if (!pricingBreakdown) {\n    return (\n      <div className={`bg-card rounded-lg border border-border p-6 ${className}`}>\n        <div className=\"flex items-center gap-3 mb-4\">\n          <Icon name=\"Calculator\" size={24} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Pricing Calculator</h3>\n        </div>\n        <div className=\"text-center text-muted-foreground py-8\">\n          Select vehicle type, time, and duration to see pricing details\n        </div>\n      </div>\n    );\n  }\n\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0\n    })?.format(amount);\n  };\n\n  const getTimeCategoryLabel = (category) => {\n    switch (category) {\n      case 'peak': return 'Peak Hours';\n      case 'offPeak': return 'Off-Peak Hours';\n      default: return 'Normal Hours';\n    }\n  };\n\n  const getTimeCategoryColor = (category) => {\n    switch (category) {\n      case 'peak': return 'text-destructive';\n      case 'offPeak': return 'text-success';\n      default: return 'text-foreground';\n    }\n  };\n\n  return (\n    <div className={`bg-card rounded-lg border border-border p-6 ${className}`}>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center gap-3\">\n          <Icon name=\"Calculator\" size={24} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Pricing Calculator</h3>\n        </div>\n\n        {/* Pricing Breakdown */}\n        <div className=\"space-y-4\">\n          {/* Base Cost */}\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <div className=\"font-medium text-foreground\">Base Rate</div>\n              <div className=\"text-sm text-muted-foreground\">\n                {(() => {\n                  const actualMinutes = dateTime?.durationInMinutes || Math.round(duration * 60);\n                  const ratePerMinute = pricingBreakdown?.baseRate / 60;\n                  \n                  if (actualMinutes < 60) {\n                    return `‚Çπ${ratePerMinute?.toFixed(2)}/min √ó ${actualMinutes} minutes`;\n                  } else {\n                    return `‚Çπ${pricingBreakdown?.baseRate}/hour √ó ${(actualMinutes / 60)?.toFixed(2)} hours`;\n                  }\n                })()}\n              </div>\n            </div>\n            <div className=\"font-medium text-foreground\">\n              {formatCurrency(pricingBreakdown?.baseCost)}\n            </div>\n          </div>\n\n          {/* Time Adjustment */}\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <div className=\"font-medium text-foreground\">Time Adjustment</div>\n              <div className={`text-sm ${getTimeCategoryColor(pricingBreakdown?.timeCategory)}`}>\n                {getTimeCategoryLabel(pricingBreakdown?.timeCategory)}\n                ({pricingBreakdown?.timeMultiplier}x)\n              </div>\n            </div>\n            <div className={`font-medium ${getTimeCategoryColor(pricingBreakdown?.timeCategory)}`}>\n              {pricingBreakdown?.timeMultiplier > 1 ? '+' : ''}\n              {formatCurrency(pricingBreakdown?.timeAdjustedCost - pricingBreakdown?.baseCost)}\n            </div>\n          </div>\n\n          {/* Discounts */}\n          {appliedDiscounts?.length > 0 && (\n            <div className=\"bg-success/10 border border-success/20 rounded-lg p-3\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Icon name=\"Tag\" size={16} className=\"text-success\" />\n                <span className=\"font-medium text-success\">Applied Discounts</span>\n              </div>\n              <div className=\"space-y-1\">\n                {appliedDiscounts?.map((discount) => (\n                  <div key={discount?.id} className=\"flex justify-between items-center text-sm\">\n                    <div>\n                      <div className=\"font-medium text-success\">{discount?.name}</div>\n                      <div className=\"text-success/80\">{discount?.description}</div>\n                    </div>\n                    <div className=\"font-medium text-success\">\n                      -{discount?.percentage}%\n                    </div>\n                  </div>\n                ))}\n              </div>\n              <div className=\"flex justify-between items-center mt-2 pt-2 border-t border-success/20\">\n                <span className=\"font-medium text-success\">Total Discount</span>\n                <span className=\"font-medium text-success\">\n                  -{formatCurrency(pricingBreakdown?.discountAmount)}\n                </span>\n              </div>\n            </div>\n          )}\n\n          {/* Subtotal */}\n          <div className=\"flex justify-between items-center pt-2 border-t border-border\">\n            <div className=\"font-medium text-foreground\">Subtotal</div>\n            <div className=\"font-medium text-foreground\">\n              {formatCurrency(pricingBreakdown?.subtotal)}\n            </div>\n          </div>\n\n          {/* Service Fee */}\n          <div className=\"flex justify-between items-center text-sm\">\n            <div className=\"text-muted-foreground\">Service Fee (5%)</div>\n            <div className=\"text-muted-foreground\">\n              {formatCurrency(pricingBreakdown?.serviceFee)}\n            </div>\n          </div>\n\n          {/* Taxes */}\n          <div className=\"flex justify-between items-center text-sm\">\n            <div className=\"text-muted-foreground\">GST (18%)</div>\n            <div className=\"text-muted-foreground\">\n              {formatCurrency(pricingBreakdown?.taxes)}\n            </div>\n          </div>\n\n          {/* Total */}\n          <div className=\"flex justify-between items-center pt-3 border-t border-border\">\n            <div className=\"text-lg font-semibold text-foreground\">Total Amount</div>\n            <div className=\"text-lg font-semibold text-primary\">\n              {formatCurrency(pricingBreakdown?.totalCost)}\n            </div>\n          </div>\n\n          {/* Savings */}\n          {pricingBreakdown?.savings > 0 && (\n            <div className=\"bg-success/10 border border-success/20 rounded-lg p-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Icon name=\"Zap\" size={16} className=\"text-success\" />\n                  <span className=\"font-medium text-success\">You're saving</span>\n                </div>\n                <span className=\"font-semibold text-success\">\n                  {formatCurrency(pricingBreakdown?.savings)}\n                </span>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Alternative Pricing */}\n        <div className=\"bg-muted/20 rounded-lg p-4\">\n          <h4 className=\"font-medium text-foreground mb-3\">Compare with other durations</h4>\n          <div className=\"space-y-2 text-sm\">\n            {[1, 2, 4, 8]?.filter(d => d !== duration)?.map((altDuration) => {\n              const altCost = pricingBreakdown?.baseRate * altDuration * pricingBreakdown?.timeMultiplier;\n              const altTotal = altCost * 1.23; // Approximate with fees and taxes\n              return (\n                <div key={altDuration} className=\"flex justify-between items-center\">\n                  <span className=\"text-muted-foreground\">\n                    {altDuration} {altDuration === 1 ? 'hour' : 'hours'}\n                  </span>\n                  <span className=\"text-foreground\">\n                    {formatCurrency(altTotal)}\n                  </span>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PricingCalculator;","size_bytes":12607},"src/pages/slot-selection-booking/components/SlotDetailsPanel.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst SlotDetailsPanel = ({ \n  selectedSlot,\n  vehicleInfo,\n  dateTime,\n  pricingInfo,\n  onBookingToggle,\n  isQuickBooking,\n  onProceedToPayment,\n  className = '' \n}) => {\n  const [countdownTime, setCountdownTime] = useState(null);\n\n  // Mock alternative slots\n  const alternativeSlots = [\n    {\n      id: '1-A-14',\n      location: '1st Floor A Row 14th Parking Slot',\n      walkingDistance: 75,\n      availableIn: null,\n      status: 'available'\n    },\n    {\n      id: '1-B-5',\n      location: '1st Floor B Row 5th Parking Slot',\n      walkingDistance: 120,\n      availableIn: new Date(Date.now() + 15 * 60000), // 15 minutes\n      status: 'ending-soon'\n    },\n    {\n      id: '2-A-8',\n      location: '2nd Floor A Row 8th Parking Slot',\n      walkingDistance: 95,\n      availableIn: null,\n      status: 'available'\n    }\n  ];\n\n  // Countdown timer for slots ending soon\n  useEffect(() => {\n    if (selectedSlot?.endTime) {\n      const interval = setInterval(() => {\n        const now = new Date();\n        const timeLeft = selectedSlot?.endTime - now;\n\n        if (timeLeft > 0) {\n          const minutes = Math.floor(timeLeft / 60000);\n          const seconds = Math.floor((timeLeft % 60000) / 1000);\n          setCountdownTime(`${minutes}:${seconds?.toString()?.padStart(2, '0')}`);\n        } else {\n          setCountdownTime('Available Now');\n        }\n      }, 1000);\n\n      return () => clearInterval(interval);\n    } else {\n      setCountdownTime(null);\n    }\n  }, [selectedSlot]);\n\n  if (!selectedSlot) {\n    return (\n      <div className={`bg-card rounded-lg border border-border p-6 ${className}`}>\n        <div className=\"text-center text-muted-foreground py-8\">\n          <Icon name=\"MapPin\" size={48} className=\"mx-auto mb-4 opacity-50\" />\n          <h3 className=\"text-lg font-medium mb-2\">No Slot Selected</h3>\n          <p>Choose a parking slot from the floor layout to see details</p>\n        </div>\n      </div>\n    );\n  }\n\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0\n    })?.format(amount);\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'available': return 'text-success';\n      case 'ending-soon': return 'text-warning';\n      case 'reserved': return 'text-destructive';\n      default: return 'text-muted-foreground';\n    }\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'available': return 'CheckCircle';\n      case 'ending-soon': return 'Clock';\n      case 'reserved': return 'XCircle';\n      default: return 'Circle';\n    }\n  };\n\n  return (\n    <div className={`bg-card rounded-lg border border-border ${className}`}>\n      <div className=\"p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-start justify-between\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-foreground mb-1\">\n              Slot Details\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {selectedSlot?.location}\n            </p>\n          </div>\n          <div className={`flex items-center gap-2 ${getStatusColor(selectedSlot?.status)}`}>\n            <Icon name={getStatusIcon(selectedSlot?.status)} size={20} />\n            <span className=\"text-sm font-medium capitalize\">\n              {selectedSlot?.status?.replace('-', ' ')}\n            </span>\n          </div>\n        </div>\n\n        {/* Countdown Timer */}\n        {countdownTime && selectedSlot?.status === 'ending-soon' && (\n          <div className=\"bg-warning/10 border border-warning/20 rounded-lg p-3\">\n            <div className=\"flex items-center gap-2\">\n              <Icon name=\"Clock\" size={16} className=\"text-warning\" />\n              <div>\n                <div className=\"font-medium text-warning\">Available in</div>\n                <div className=\"text-lg font-mono text-warning\">{countdownTime}</div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Slot Information */}\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"bg-muted/20 rounded-lg p-3\">\n              <div className=\"text-muted-foreground text-sm mb-1\">Walking Distance</div>\n              <div className=\"font-medium text-foreground\">\n                {selectedSlot?.walkingDistance}m\n              </div>\n            </div>\n            <div className=\"bg-muted/20 rounded-lg p-3\">\n              <div className=\"text-muted-foreground text-sm mb-1\">Floor Level</div>\n              <div className=\"font-medium text-foreground\">\n                {selectedSlot?.floorId === 1 ? '1st' : selectedSlot?.floorId === 2 ? '2nd' : '3rd'} Floor\n              </div>\n            </div>\n          </div>\n\n          {/* Amenities */}\n          {selectedSlot?.amenities && selectedSlot?.amenities?.length > 0 && (\n            <div>\n              <div className=\"text-sm font-medium text-foreground mb-2\">Available Amenities</div>\n              <div className=\"flex flex-wrap gap-2\">\n                {selectedSlot?.amenities?.map((amenity, index) => (\n                  <div key={index} className=\"bg-primary/10 text-primary px-2 py-1 rounded text-xs font-medium\">\n                    {amenity}\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Vehicle Compatibility */}\n          {vehicleInfo && (\n            <div className=\"bg-success/10 border border-success/20 rounded-lg p-3\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Icon name=\"CheckCircle\" size={16} className=\"text-success\" />\n                <span className=\"font-medium text-success\">Vehicle Compatible</span>\n              </div>\n              <div className=\"text-sm text-success/80\">\n                Perfect fit for {vehicleInfo?.name} ({vehicleInfo?.dimensions})\n              </div>\n            </div>\n          )}\n\n          {/* Booking Summary */}\n          {dateTime && pricingInfo && (\n            <div className=\"bg-muted/20 rounded-lg p-4\">\n              <h4 className=\"font-medium text-foreground mb-3\">Booking Summary</h4>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Date & Time</span>\n                  <span className=\"text-foreground\">\n                    {new Date(`${dateTime.date}T${dateTime.time}`)?.toLocaleDateString('en-US', {\n                      month: 'short',\n                      day: 'numeric'\n                    })} at {new Date(`${dateTime.date}T${dateTime.time}`)?.toLocaleTimeString('en-US', {\n                      hour: 'numeric',\n                      minute: '2-digit',\n                      hour12: true\n                    })}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Duration</span>\n                  <span className=\"text-foreground\">\n                    {(() => {\n                      const actualMinutes = dateTime?.durationInMinutes || Math.round((dateTime?.duration || 0) * 60);\n                      \n                      if (actualMinutes < 60) {\n                        return `${actualMinutes} minutes`;\n                      } else if (actualMinutes === 60) {\n                        return '1 hour';\n                      } else if (actualMinutes % 60 === 0) {\n                        return `${Math.floor(actualMinutes / 60)} hours`;\n                      } else {\n                        const hours = Math.floor(actualMinutes / 60);\n                        const mins = actualMinutes % 60;\n                        return `${hours}h ${mins}m`;\n                      }\n                    })()}\n                  </span>\n                </div>\n                <div className=\"flex justify-between pt-2 border-t border-border\">\n                  <span className=\"font-medium text-foreground\">Total Cost</span>\n                  <span className=\"font-semibold text-primary\">\n                    {formatCurrency(pricingInfo?.totalCost)}\n                  </span>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Quick Booking Toggle */}\n        <div className=\"bg-muted/20 rounded-lg p-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div>\n              <div className=\"font-medium text-foreground\">Quick Booking</div>\n              <div className=\"text-sm text-muted-foreground\">\n                Reserve immediately vs scheduled booking\n              </div>\n            </div>\n            <Button\n              variant={isQuickBooking ? 'default' : 'outline'}\n              size=\"sm\"\n              onClick={onBookingToggle}\n              iconName={isQuickBooking ? 'Zap' : 'Clock'}\n            >\n              {isQuickBooking ? 'Quick' : 'Scheduled'}\n            </Button>\n          </div>\n\n          {isQuickBooking && (\n            <div className=\"bg-primary/10 border border-primary/20 rounded p-2 text-xs text-primary\">\n              Slot will be reserved immediately upon payment confirmation\n            </div>\n          )}\n        </div>\n\n        {/* Alternative Slots */}\n        <div>\n          <h4 className=\"font-medium text-foreground mb-3\">Alternative Slots</h4>\n          <div className=\"space-y-2\">\n            {alternativeSlots?.slice(0, 3)?.map((slot) => (\n              <div key={slot?.id} className=\"bg-muted/20 rounded-lg p-3 hover:bg-muted/30 transition-colors cursor-pointer\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"font-medium text-foreground text-sm\">\n                      {slot?.location}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {slot?.walkingDistance}m walk\n                      {slot?.availableIn && (\n                        <span className=\"ml-2 text-warning\">\n                          ‚Ä¢ Available in {Math.ceil((slot?.availableIn - new Date()) / 60000)} min\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                  <Icon name=\"ArrowRight\" size={16} className=\"text-muted-foreground\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      {/* Action Button */}\n      <div className=\"p-6 pt-0\">\n        <Button\n          variant=\"primary\"\n          size=\"lg\"\n          fullWidth\n          iconName=\"ArrowRight\"\n          iconPosition=\"right\"\n          disabled={selectedSlot?.status === 'reserved' || selectedSlot?.status === 'maintenance'}\n          onClick={() => {\n            console.log('SlotDetailsPanel - Proceed button clicked');\n            console.log('SlotDetailsPanel - onProceedToPayment function exists:', typeof onProceedToPayment === 'function');\n            if (typeof onProceedToPayment === 'function') {\n              onProceedToPayment();\n            } else {\n              console.error('SlotDetailsPanel - onProceedToPayment is not a function');\n              alert('Payment function not available. Please refresh and try again.');\n            }\n          }}\n        >\n          {selectedSlot?.status === 'ending-soon' ? 'Reserve When Available' : 'Proceed to Payment'}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default SlotDetailsPanel;\n","size_bytes":11682},"src/pages/slot-selection-booking/components/VehicleSelector.jsx":{"content":"import React, { useState, useRef, useEffect } from 'react';\nimport { ChevronDownIcon, SettingsIcon, RotateCwIcon } from 'lucide-react';\n\nconst VehicleSelector = ({ onVehicleChange }) => {\n  const [selectedType, setSelectedType] = useState('');\n  const [selectedModel, setSelectedModel] = useState('');\n  \n  // Debug logging for state changes\n  useEffect(() => {\n    console.log('VehicleSelector - State changed:', { selectedType, selectedModel });\n  }, [selectedType, selectedModel]);\n  const [isTypeOpen, setIsTypeOpen] = useState(false);\n  const [isModelOpen, setIsModelOpen] = useState(false);\n  const [rotation, setRotation] = useState(0);\n  const [isRotating, setIsRotating] = useState(false);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [imageError, setImageError] = useState(false);\n\n  const typeDropdownRef = useRef(null);\n  const modelDropdownRef = useRef(null);\n\n  const vehicleTypes = [\n    'Two Wheeler',\n    'Four Wheeler',\n    'Commercial Vehicle'\n  ];\n\n  const vehicleModels = {\n    'Two Wheeler': ['Honda Activa', 'Bajaj Pulsar', 'Royal Enfield', 'TVS Apache', 'Yamaha FZ', 'Other Bikes'],\n    'Four Wheeler': ['Maruti Swift', 'Hyundai i20', 'Toyota Innova', 'Honda City', 'Tata Nexon', 'Other Cars'],\n    'Commercial Vehicle': ['Tata Ace', 'Mahindra Bolero Pickup', 'Ashok Leyland Partner']\n  };\n\n  // Specific model images - organized by vehicle type with actual bike images\n  const modelImages = {\n    // Two Wheeler Models - Using specific uploaded bike images\n    'Honda Activa': [\n      '/attached_assets/honda_activa_blue.jpg',\n      '/attached_assets/download_1758784421583.jpg',\n      '/attached_assets/download_1758784454326.jpg'\n    ],\n    'Bajaj Pulsar': [\n      '/attached_assets/bajaj_pulsar_blue.jpg',\n      '/attached_assets/download_1758784517645.jpg',\n      '/attached_assets/download_1758784567473.jpg'\n    ],\n    'Royal Enfield': [\n      '/attached_assets/royal_enfield_classic.jpg',\n      '/attached_assets/download_1758784583124.jpg',\n      '/attached_assets/download_1759081322589.jpg'\n    ],\n    'TVS Apache': [\n      '/attached_assets/tvs_apache_black.jpg',\n      '/attached_assets/download_1758784517645.jpg',\n      '/attached_assets/download_1758784567473.jpg'\n    ],\n    'Yamaha FZ': [\n      '/attached_assets/yamaha_r15_red.jpg',\n      '/attached_assets/c0fcf5bf-856b-4577-8d19-482be583214c_1759081437190.jpg',\n      '/attached_assets/download_1758784583124.jpg'\n    ],\n    'Other Bikes': [\n      '/attached_assets/vespa_red_classic.jpg',\n      '/attached_assets/download_1758784576189.jpg',\n      '/attached_assets/download_1759081556682.jpg'\n    ],\n\n    // Four Wheeler Models\n    'Maruti Swift': [\n      'https://images.unsplash.com/photo-1502877338535-766e1452684a?w=800&h=600&fit=crop',\n      'https://images.unsplash.com/photo-1550355291-bbee04a92027?w=800&h=600&fit=crop',\n      'https://images.unsplash.com/photo-1549399872-f6b6b5e28c91?w=800&h=600&fit=crop'\n    ],\n    'Hyundai i20': [\n      'https://images.unsplash.com/photo-1552519507-da3b142c6e3d?w=800&h=600&fit=crop',\n      'https://images.unsplash.com/photo-1593979999838-4eb7e6e1b508?w=800&h=600&fit=crop',\n      'https://images.unsplash.com/photo-1606664515524-ed2f786a0bd6?w=800&h=600&fit=crop'\n    ],\n    'Toyota Innova': [\n      'https://images.unsplash.com/photo-1571607388263-1044f9ea01dd?w=800&h=600&fit=crop',\n      'https://images.unsplash.com/photo-1583121274602-3e2820c69888?w=800&h=600&fit=crop',\n      'https://images.unsplash.com/photo-1581540222194-0def2dda94b8?w=800&h=600&fit=crop'\n    ],\n    'Honda City': [\n      'https://images.unsplash.com/photo-1549399872-f6b6b5e28c91?w=800&h=600&fit=crop',\n      'https://images.unsplash.com/photo-1550355291-bbee04a92027?w=800&h=600&fit=crop',\n      'https://images.unsplash.com/photo-1502877338535-766e1452684a?w=800&h=600&fit=crop'\n    ],\n    'Tata Nexon': [\n      'https://images.unsplash.com/photo-1606664515524-ed2f786a0bd6?w=800&h=600&fit=crop',\n      'https://images.unsplash.com/photo-1593979999838-4eb7e6e1b508?w=800&h=600&fit=crop',\n      'https://images.unsplash.com/photo-1552519507-da3b142c6e3d?w=800&h=600&fit=crop'\n    ],\n    'Other Cars': [\n      'https://images.unsplash.com/photo-1549317336-206569e8475c?w=800&h=600&fit=crop',\n      'https://images.unsplash.com/photo-1502877338535-766e1452684a?w=800&h=600&fit=crop',\n      'https://images.unsplash.com/photo-1550355291-bbee04a92027?w=800&h=600&fit=crop'\n    ],\n\n    // Commercial Vehicle Models\n    'Tata Ace': [\n      'https://images.unsplash.com/photo-1586190848861-99aa4a171e90?w=800&h=600&fit=crop',\n      'https://images.unsplash.com/photo-1564577160324-112d603f750f?w=800&h=600&fit=crop',\n      'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop'\n    ],\n    'Mahindra Bolero Pickup': [\n      'https://images.unsplash.com/photo-1564577160324-112d603f750f?w=800&h=600&fit=crop',\n      'https://images.unsplash.com/photo-1586190848861-99aa4a171e90?w=800&h=600&fit=crop',\n      'https://images.unsplash.com/photo-1549317336-206569e8475c?w=800&h=600&fit=crop'\n    ],\n    'Ashok Leyland Partner': [\n      'https://images.unsplash.com/photo-1549317336-206569e8475c?w=800&h=600&fit=crop',\n      'https://images.unsplash.com/photo-1586190848861-99aa4a171e90?w=800&h=600&fit=crop',\n      'https://images.unsplash.com/photo-1564577160324-112d603f750f?w=800&h=600&fit=crop'\n    ]\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (typeDropdownRef.current && !typeDropdownRef.current.contains(event.target)) {\n        setIsTypeOpen(false);\n      }\n      if (modelDropdownRef.current && !modelDropdownRef.current.contains(event.target)) {\n        setIsModelOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  const handleTypeSelect = (type) => {\n    console.log('VehicleSelector - Type selected:', type);\n    setSelectedType(type);\n    setSelectedModel(''); // Reset model when type changes\n    setIsTypeOpen(false);\n    resetImageState(); // Reset image state\n    \n    // Immediately pass basic vehicle data even without model\n    const vehicleTypeMapping = {\n      'Two Wheeler': 'two-wheeler',\n      'Four Wheeler': 'four-wheeler',\n      'Commercial Vehicle': 'commercial-vehicle'\n    };\n    \n    const basicVehicleData = {\n      type: type,\n      model: '',\n      name: type,\n      label: type,\n      vehicleType: vehicleTypeMapping[type] || 'two-wheeler',\n      category: type,\n      image: null\n    };\n    \n    console.log('VehicleSelector - Calling onVehicleChange with:', basicVehicleData);\n    if (onVehicleChange) {\n      onVehicleChange(basicVehicleData);\n    } else {\n      console.error('VehicleSelector - onVehicleChange is not defined!');\n    }\n  };\n\n  const handleModelSelect = (model) => {\n    setSelectedModel(model);\n    setIsModelOpen(false);\n    resetImageState(); // Reset image state\n\n    const vehicleTypeMapping = {\n      'Two Wheeler': 'two-wheeler',\n      'Four Wheeler': 'four-wheeler',\n      'Commercial Vehicle': 'commercial-vehicle'\n    };\n\n    const vehicleData = {\n      type: selectedType,\n      model: model,\n      name: model,\n      label: model,\n      vehicleType: vehicleTypeMapping[selectedType] || 'two-wheeler',\n      category: selectedType,\n      image: getCurrentImage() || 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=800&h=600&fit=crop'\n    };\n\n    console.log('VehicleSelector - Selected vehicle data:', vehicleData); // Debug log\n\n    if (onVehicleChange) {\n      onVehicleChange(vehicleData);\n    }\n  };\n\n  const start360Rotation = () => {\n    if (isRotating) return;\n\n    setIsRotating(true);\n    const duration = 3000; // 3 seconds for full rotation\n    const steps = 60; // Number of steps for smooth animation\n    const stepDuration = duration / steps;\n    const stepRotation = 360 / steps;\n\n    let currentStep = 0;\n    const rotationInterval = setInterval(() => {\n      currentStep++;\n      setRotation(prev => (prev + stepRotation) % 360);\n\n      if (currentStep >= steps) {\n        clearInterval(rotationInterval);\n        setIsRotating(false);\n        setRotation(0);\n      }\n    }, stepDuration);\n  };\n\n  const getCurrentImage = () => {\n    // Only show images when a specific model is selected\n    if (selectedModel && modelImages[selectedModel]) {\n      const imageArray = modelImages[selectedModel];\n      return imageArray[currentImageIndex % imageArray.length];\n    }\n    return null;\n  };\n\n  const handleImageError = () => {\n    if (selectedModel && modelImages[selectedModel]) {\n      const imageArray = modelImages[selectedModel];\n      if (currentImageIndex < imageArray.length - 1) {\n        setCurrentImageIndex(prev => prev + 1);\n      } else {\n        setImageError(true);\n      }\n    }\n  };\n\n  const resetImageState = () => {\n    setCurrentImageIndex(0);\n    setImageError(false);\n  };\n\n  return (\n    <div className={`bg-card border border-border rounded-xl p-2 sm:p-3 shadow-sm relative transition-all duration-300 ${\n      isModelOpen ? 'min-h-[450px]' : selectedModel && getCurrentImage() && !imageError ? 'min-h-[350px]' : 'min-h-[280px]'\n    }`}>\n      <div className=\"space-y-2 sm:space-y-3\">\n        {/* Header */}\n        <div className=\"flex items-center gap-2 pb-2 border-b border-border\">\n          <div className=\"w-5 h-5 sm:w-6 sm:h-6 bg-primary/10 rounded-lg flex items-center justify-center flex-shrink-0\">\n            <SettingsIcon className=\"w-3 h-3 sm:w-4 sm:h-4 text-primary\" />\n          </div>\n          <h3 className=\"text-sm sm:text-base font-semibold text-foreground\">\n            Vehicle Details\n          </h3>\n        </div>\n\n        {/* Vehicle Type Selector */}\n        <div className=\"space-y-1 sm:space-y-2\">\n          <label className=\"block text-xs font-medium text-foreground\">\n            Vehicle Type\n          </label>\n          <div\n            ref={typeDropdownRef}\n            className=\"vehicle-dropdown-container relative z-[100]\"\n          >\n            <button\n              type=\"button\"\n              onClick={() => {\n                setIsTypeOpen(!isTypeOpen);\n                setIsModelOpen(false);\n              }}\n              className=\"w-full flex items-center justify-between px-3 py-2\n                       border-2 border-border rounded-lg bg-input text-foreground\n                       hover:border-primary focus:border-primary focus:ring-2 focus:ring-primary/20\n                       transition-all duration-200 min-h-[36px] shadow-sm\"\n            >\n              <span className={`text-xs sm:text-sm truncate pr-2 ${!selectedType ? 'text-muted-foreground' : ''}`}>\n                {selectedType || 'Select vehicle type'}\n              </span>\n              <ChevronDownIcon\n                className={`w-3 h-3 sm:w-4 sm:h-4 transition-transform duration-200 flex-shrink-0 ${\n                  isTypeOpen ? 'rotate-180' : ''\n                }`}\n              />\n            </button>\n\n            {isTypeOpen && (\n              <div className=\"absolute left-0 right-0 top-full mt-1 z-[101]\n                            bg-white border-2 border-primary/30 rounded-lg shadow-2xl\n                            max-h-48 overflow-y-auto\"\n                   style={{\n                     position: 'absolute',\n                     transform: 'translateZ(0)',\n                     willChange: 'transform'\n                   }}\n              >\n                {vehicleTypes.map((type) => (\n                  <button\n                    key={type}\n                    type=\"button\"\n                    onClick={() => handleTypeSelect(type)}\n                    className=\"w-full px-3 py-2.5 text-left text-sm font-medium text-foreground\n                             hover:bg-primary/5 hover:text-primary transition-colors duration-150\n                             border-b border-border/50 last:border-b-0\n                             min-h-[40px] flex items-center\"\n                  >\n                    {type}\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Vehicle Model Selector - Only show when vehicle type is selected */}\n        {selectedType && (\n          <div className=\"space-y-1 sm:space-y-2\">\n            <label className=\"block text-xs font-medium text-foreground\">\n              Vehicle Model\n            </label>\n            <div\n              ref={modelDropdownRef}\n              className=\"vehicle-model-dropdown-container relative z-[90]\"\n            >\n              <button\n                type=\"button\"\n                onClick={() => {\n                  setIsModelOpen(!isModelOpen);\n                  setIsTypeOpen(false);\n                }}\n                className=\"w-full flex items-center justify-between px-3 py-2\n                           border-2 border-primary/20 bg-input text-foreground\n                           hover:border-primary focus:border-primary focus:ring-2 focus:ring-primary/20\n                           transition-all duration-200 min-h-[36px] shadow-sm rounded-lg\"\n              >\n                <span className={`text-xs sm:text-sm truncate pr-2 ${!selectedModel ? 'text-muted-foreground' : ''}`}>\n                  {selectedModel || `Choose your ${selectedType.toLowerCase()}`}\n                </span>\n                <ChevronDownIcon\n                  className={`w-3 h-3 sm:w-4 sm:h-4 transition-transform duration-200 flex-shrink-0 ${\n                    isModelOpen ? 'rotate-180' : ''\n                  }`}\n                />\n              </button>\n\n              {isModelOpen && vehicleModels[selectedType] && (\n                <div className=\"absolute left-0 right-0 top-full mt-1 z-[91]\n                              bg-white border-2 border-primary/30 rounded-lg shadow-2xl\n                              max-h-64 overflow-y-auto\"\n                     style={{\n                       position: 'absolute',\n                       transform: 'translateZ(0)',\n                       willChange: 'transform'\n                     }}\n                >\n                  {vehicleModels[selectedType].map((model) => (\n                    <button\n                      key={model}\n                      type=\"button\"\n                      onClick={() => handleModelSelect(model)}\n                      className=\"w-full px-4 py-3.5 text-left text-sm font-semibold text-foreground\n                               hover:bg-primary/5 hover:text-primary transition-colors duration-150\n                               border-b border-border/50 last:border-b-0\n                               min-h-[48px] flex items-center\"\n                    >\n                      {model}\n                    </button>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Vehicle Image Display - Only show when specific model is selected */}\n        {selectedModel && (\n          <div className=\"space-y-1.5\">\n            <div className=\"relative bg-gradient-to-br from-gray-50 to-gray-100 rounded-lg p-2 border border-gray-200\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <h4 className=\"text-sm sm:text-base font-semibold text-gray-800\">Vehicle Preview</h4>\n                <button\n                  onClick={start360Rotation}\n                  disabled={isRotating}\n                  className=\"flex items-center gap-1 sm:gap-2 px-2 sm:px-3 py-1 sm:py-2 bg-primary text-white rounded-md hover:bg-primary/90\n                           disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200\"\n                >\n                  <RotateCwIcon\n                    className={`w-3 h-3 sm:w-4 sm:h-4 ${isRotating ? 'animate-spin' : ''}`}\n                  />\n                  <span className=\"text-xs sm:text-sm font-medium\">\n                    {isRotating ? 'Rotating...' : '360¬∞ View'}\n                  </span>\n                </button>\n              </div>\n\n              <div className={`relative w-full rounded-lg overflow-hidden bg-white shadow-inner ${\n                getCurrentImage() && !imageError ? 'h-32 sm:h-40' : 'h-20 sm:h-28'\n              }`}>\n                {!imageError && getCurrentImage() ? (\n                  <img\n                    src={getCurrentImage()}\n                    alt={selectedModel}\n                    className=\"w-full h-full object-cover transition-transform duration-100 ease-linear\"\n                    style={{\n                      transform: `rotateY(${rotation}deg)`,\n                      transformStyle: 'preserve-3d'\n                    }}\n                    onError={handleImageError}\n                  />\n                ) : (\n                  <div className=\"w-full h-full flex items-center justify-center bg-gray-100\">\n                    <div className=\"text-center text-gray-500\">\n                      <div className=\"w-16 h-16 mx-auto mb-2 rounded-full bg-gray-200 flex items-center justify-center\">\n                        <svg className=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                        </svg>\n                      </div>\n                      <p className=\"text-sm font-medium\">Vehicle Image</p>\n                      <p className=\"text-xs\">{selectedModel}</p>\n                    </div>\n                  </div>\n                )}\n\n                {/* Rotation indicator */}\n                {isRotating && (\n                  <div className=\"absolute inset-0 bg-black/10 flex items-center justify-center\">\n                    <div className=\"bg-white/90 rounded-full p-3\">\n                      <RotateCwIcon className=\"w-6 h-6 text-primary animate-spin\" />\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"mt-2 text-center\">\n                <p className=\"text-xs sm:text-sm text-gray-600\">\n                  {selectedModel} ({selectedType})\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Selected Vehicle Summary */}\n        {selectedType && selectedModel && (\n          <div className=\"p-2 bg-gradient-to-r from-primary/5 to-primary/10 border-2 border-primary/20 rounded-lg\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-6 h-6 bg-primary/20 rounded-full flex items-center justify-center\">\n                <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"text-xs font-medium text-primary/80 mb-1\">Selected Vehicle</p>\n                <p className=\"text-sm sm:text-base font-semibold text-primary\">\n                  {selectedModel}\n                </p>\n                <p className=\"text-xs text-primary/70\">\n                  {selectedType}\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default VehicleSelector;\n","size_bytes":19278},"src/pages/user-authentication/components/AuthTabs.jsx":{"content":"import React from 'react';\n\nconst AuthTabs = ({ activeTab, onTabChange }) => {\n  const tabs = [\n    { id: 'login', label: 'Sign In' },\n    { id: 'register', label: 'Sign Up' }\n  ];\n\n  return (\n    <div className=\"flex bg-muted rounded-lg p-1 mb-6\">\n      {tabs?.map((tab) => (\n        <button\n          key={tab?.id}\n          onClick={() => onTabChange(tab?.id)}\n          className={`flex-1 py-2 px-4 text-sm font-medium rounded-md transition-micro ${\n            activeTab === tab?.id\n              ? 'bg-card text-foreground shadow-sm'\n              : 'text-muted-foreground hover:text-foreground'\n          }`}\n        >\n          {tab?.label}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default AuthTabs;","size_bytes":721},"src/pages/user-authentication/components/ForgotPasswordModal.jsx":{"content":"import React, { useState } from 'react';\nimport Input from '../../../components/ui/Input';\nimport Button from '../../../components/ui/Button';\nimport Icon from '../../../components/AppIcon';\n\nconst ForgotPasswordModal = ({ isOpen, onClose }) => {\n  const [email, setEmail] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const [error, setError] = useState('');\n\n  const handleSubmit = async (e) => {\n    e?.preventDefault();\n    \n    if (!email?.trim()) {\n      setError('Email is required');\n      return;\n    }\n    \n    if (!/\\S+@\\S+\\.\\S+/?.test(email)) {\n      setError('Please enter a valid email address');\n      return;\n    }\n    \n    setIsLoading(true);\n    setError('');\n    \n    // Simulate API call\n    setTimeout(() => {\n      setIsSuccess(true);\n      setIsLoading(false);\n    }, 1500);\n  };\n\n  const handleClose = () => {\n    setEmail('');\n    setError('');\n    setIsSuccess(false);\n    onClose();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-100 p-4\">\n      <div className=\"bg-card rounded-lg shadow-xl max-w-md w-full p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-lg font-semibold text-foreground\">\n            {isSuccess ? 'Check Your Email' : 'Reset Password'}\n          </h2>\n          <button\n            onClick={handleClose}\n            className=\"text-muted-foreground hover:text-foreground transition-micro\"\n          >\n            <Icon name=\"X\" size={20} />\n          </button>\n        </div>\n\n        {isSuccess ? (\n          <div className=\"text-center space-y-4\">\n            <div className=\"w-16 h-16 bg-success/10 rounded-full flex items-center justify-center mx-auto\">\n              <Icon name=\"Mail\" size={32} className=\"text-success\" />\n            </div>\n            <div>\n              <p className=\"text-foreground mb-2\">Password reset link sent!</p>\n              <p className=\"text-sm text-muted-foreground\">\n                We've sent a password reset link to <strong>{email}</strong>. \n                Please check your inbox and follow the instructions.\n              </p>\n            </div>\n            <Button\n              variant=\"primary\"\n              onClick={handleClose}\n              fullWidth\n            >\n              Got it\n            </Button>\n          </div>\n        ) : (\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Enter your email address and we'll send you a link to reset your password.\n            </p>\n            \n            <Input\n              label=\"Email Address\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => {\n                setEmail(e?.target?.value);\n                setError('');\n              }}\n              placeholder=\"Enter your email address\"\n              error={error}\n              required\n            />\n\n            <div className=\"flex gap-3 pt-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleClose}\n                fullWidth\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                variant=\"primary\"\n                loading={isLoading}\n                fullWidth\n              >\n                Send Reset Link\n              </Button>\n            </div>\n          </form>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ForgotPasswordModal;","size_bytes":3640},"src/pages/user-authentication/components/LoginForm.jsx":{"content":"import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Input from '../../../components/ui/Input';\nimport Button from '../../../components/ui/Button';\nimport { Checkbox } from '../../../components/ui/Checkbox';\nimport Icon from '../../../components/AppIcon';\n\nconst LoginForm = ({ onForgotPassword }) => {\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    rememberMe: false\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Mock credentials for demo + check for newly registered users\n  const mockCredentials = {\n    email: 'demo@parkslotpro.com',\n    password: 'demo123'\n  };\n\n  // Check if user just registered\n  const checkNewUserCredentials = () => {\n    const userEmail = localStorage.getItem('userEmail');\n    \n    if (userEmail && formData.email === userEmail) {\n      // This is a newly registered user, allow login with any password for demo\n      return true;\n    }\n    \n    return false;\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e?.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n    \n    // Clear error when user starts typing\n    if (errors?.[name]) {\n      setErrors(prev => ({ ...prev, [name]: '' }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!formData?.email?.trim()) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/?.test(formData?.email)) {\n      newErrors.email = 'Please enter a valid email address';\n    }\n    \n    if (!formData?.password) {\n      newErrors.password = 'Password is required';\n    } else if (formData?.password?.length < 6) {\n      newErrors.password = 'Password must be at least 6 characters';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors)?.length === 0;\n  };\n\n  const handleSubmit = async (e) => {\n    e?.preventDefault();\n    \n    if (!validateForm()) return;\n    \n    setIsLoading(true);\n    \n    // Simulate API call\n    setTimeout(() => {\n      if (formData?.email === mockCredentials?.email && formData?.password === mockCredentials?.password) {\n        // Successful login with demo credentials\n        localStorage.setItem('isAuthenticated', 'true');\n        localStorage.setItem('userEmail', formData?.email);\n        navigate('/home');\n      } else if (checkNewUserCredentials()) {\n        // Successful login for newly registered user\n        localStorage.setItem('isAuthenticated', 'true');\n        // Clear temporary password\n        localStorage.removeItem('tempPassword');\n        navigate('/home');\n      } else {\n        // Invalid credentials\n        setErrors({\n          email: 'Invalid email or password. Use demo@parkslotpro.com / demo123',\n          password: 'Invalid email or password. Use demo@parkslotpro.com / demo123'\n        });\n      }\n      setIsLoading(false);\n    }, 200); // Reduced to 200ms for immediate response\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <Input\n        label=\"Email or Phone\"\n        type=\"email\"\n        name=\"email\"\n        value={formData?.email}\n        onChange={handleInputChange}\n        placeholder=\"Enter your email address\"\n        error={errors?.email}\n        required\n        className=\"mb-4\"\n      />\n      <div className=\"relative\">\n        <Input\n          label=\"Password\"\n          type={showPassword ? 'text' : 'password'}\n          name=\"password\"\n          value={formData?.password}\n          onChange={handleInputChange}\n          placeholder=\"Enter your password\"\n          error={errors?.password}\n          required\n          className=\"mb-4\"\n        />\n        <button\n          type=\"button\"\n          onClick={() => setShowPassword(!showPassword)}\n          className=\"absolute right-3 top-9 text-muted-foreground hover:text-foreground transition-micro\"\n        >\n          <Icon name={showPassword ? 'EyeOff' : 'Eye'} size={20} />\n        </button>\n      </div>\n      <div className=\"flex items-center justify-between\">\n        <Checkbox\n          label=\"Remember me\"\n          name=\"rememberMe\"\n          checked={formData?.rememberMe}\n          onChange={handleInputChange}\n        />\n        \n        <button\n          type=\"button\"\n          onClick={onForgotPassword}\n          className=\"text-sm text-primary hover:text-primary/80 transition-micro\"\n        >\n          Forgot password?\n        </button>\n      </div>\n      <Button\n        type=\"submit\"\n        variant=\"primary\"\n        size=\"lg\"\n        fullWidth\n        loading={isLoading}\n        className=\"mt-6\"\n      >\n        Sign In\n      </Button>\n      {/* Demo credentials hint */}\n      <div className=\"mt-4 p-3 bg-muted rounded-lg\">\n        <p className=\"text-xs text-muted-foreground text-center\">\n          Demo credentials: demo@parkslotpro.com / demo123\n        </p>\n        {localStorage.getItem('userEmail') && (\n          <p className=\"text-xs text-primary text-center mt-2\">\n            üí° Use the email you registered with and any password to login\n          </p>\n        )}\n      </div>\n    </form>\n  );\n};\n\nexport default LoginForm;","size_bytes":5302},"src/pages/user-authentication/components/RegisterForm.jsx":{"content":"import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Input from '../../../components/ui/Input';\nimport Button from '../../../components/ui/Button';\nimport Select from '../../../components/ui/Select';\nimport { Checkbox } from '../../../components/ui/Checkbox';\nimport Icon from '../../../components/AppIcon';\n\nconst RegisterForm = () => {\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    fullName: '',\n    email: '',\n    phone: '',\n    password: '',\n    acceptTerms: false\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  \n  const [errors, setErrors] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e?.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n    \n    // Clear error when user starts typing\n    if (errors?.[name]) {\n      setErrors(prev => ({ ...prev, [name]: '' }));\n    }\n  };\n\n  const handleSelectChange = (name, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    \n    if (errors?.[name]) {\n      setErrors(prev => ({ ...prev, [name]: '' }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!formData?.fullName?.trim()) {\n      newErrors.fullName = 'Full name is required';\n    } else if (formData?.fullName?.trim()?.length < 2) {\n      newErrors.fullName = 'Name must be at least 2 characters';\n    }\n    \n    if (!formData?.email?.trim()) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/?.test(formData?.email)) {\n      newErrors.email = 'Please enter a valid email address';\n    }\n    \n    if (!formData?.phone?.trim()) {\n      newErrors.phone = 'Phone number is required';\n    } else if (!/^\\+?[\\d\\s-()]{10,}$/?.test(formData?.phone)) {\n      newErrors.phone = 'Please enter a valid phone number';\n    }\n    \n    if (!formData?.password) {\n      newErrors.password = 'Password is required';\n    } else if (formData?.password?.length < 8) {\n      newErrors.password = 'Password must be at least 8 characters';\n    }\n    \n    \n    if (!formData?.acceptTerms) {\n      newErrors.acceptTerms = 'You must accept the terms and conditions';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors)?.length === 0;\n  };\n\n  const handleSubmit = async (e) => {\n    e?.preventDefault();\n    \n    if (!validateForm()) return;\n    \n    setIsLoading(true);\n    \n    // Simulate API call\n    setTimeout(() => {\n      // Successful registration - store user data and automatically authenticate\n      localStorage.setItem('userEmail', formData?.email);\n      localStorage.setItem('userName', formData?.fullName);\n      localStorage.setItem('isAuthenticated', 'true'); // Automatically authenticate after registration\n      \n      // Redirect directly to home page after successful registration\n      setIsLoading(false);\n      navigate('/home');\n    }, 300); // Reduced to 300ms for faster response\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <Input\n        label=\"Full Name\"\n        type=\"text\"\n        name=\"fullName\"\n        value={formData?.fullName}\n        onChange={handleInputChange}\n        placeholder=\"Enter your full name\"\n        error={errors?.fullName}\n        required\n        className=\"mb-4\"\n      />\n      <Input\n        label=\"Email Address\"\n        type=\"email\"\n        name=\"email\"\n        value={formData?.email}\n        onChange={handleInputChange}\n        placeholder=\"Enter your email address\"\n        error={errors?.email}\n        required\n        className=\"mb-4\"\n      />\n      <Input\n        label=\"Phone Number\"\n        type=\"tel\"\n        name=\"phone\"\n        value={formData?.phone}\n        onChange={handleInputChange}\n        placeholder=\"Enter your phone number\"\n        error={errors?.phone}\n        required\n        className=\"mb-4\"\n      />\n      <div className=\"relative\">\n        <Input\n          label=\"Password\"\n          type={showPassword ? 'text' : 'password'}\n          name=\"password\"\n          value={formData?.password}\n          onChange={handleInputChange}\n          placeholder=\"Create a strong password\"\n          error={errors?.password}\n          required\n          className=\"mb-4\"\n        />\n        <button\n          type=\"button\"\n          onClick={() => setShowPassword(!showPassword)}\n          className=\"absolute right-3 top-9 text-muted-foreground hover:text-foreground transition-micro\"\n        >\n          <Icon name={showPassword ? 'EyeOff' : 'Eye'} size={20} />\n        </button>\n      </div>\n      \n      <Checkbox\n        label=\"I agree to the Terms of Service and Privacy Policy\"\n        name=\"acceptTerms\"\n        checked={formData?.acceptTerms}\n        onChange={handleInputChange}\n        error={errors?.acceptTerms}\n        required\n        className=\"mb-4\"\n      />\n      <Button\n        type=\"submit\"\n        variant=\"primary\"\n        size=\"lg\"\n        fullWidth\n        loading={isLoading}\n        className=\"mt-6\"\n      >\n        Create Account\n      </Button>\n    </form>\n  );\n};\n\nexport default RegisterForm;","size_bytes":5194},"src/pages/user-authentication/components/SocialLogin.jsx":{"content":"import React from 'react';\nimport Button from '../../../components/ui/Button';\n\n\nconst SocialLogin = () => {\n  const handleGoogleLogin = () => {\n    // Mock Google login\n    console.log('Google login initiated');\n    // In real app, this would redirect to Google OAuth\n  };\n\n  const handleAppleLogin = () => {\n    // Mock Apple login\n    console.log('Apple login initiated');\n    // In real app, this would redirect to Apple OAuth\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"relative\">\n        <div className=\"absolute inset-0 flex items-center\">\n          <div className=\"w-full border-t border-border\" />\n        </div>\n        <div className=\"relative flex justify-center text-xs uppercase\">\n          <span className=\"bg-card px-2 text-muted-foreground\">Or continue with</span>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-3\">\n        <Button\n          variant=\"outline\"\n          onClick={handleGoogleLogin}\n          className=\"flex items-center justify-center gap-2\"\n        >\n          <svg className=\"w-5 h-5\" viewBox=\"0 0 24 24\">\n            <path\n              fill=\"#4285F4\"\n              d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n            />\n            <path\n              fill=\"#34A853\"\n              d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n            />\n            <path\n              fill=\"#FBBC05\"\n              d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n            />\n            <path\n              fill=\"#EA4335\"\n              d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n            />\n          </svg>\n          Google\n        </Button>\n\n        <Button\n          variant=\"outline\"\n          onClick={handleAppleLogin}\n          className=\"flex items-center justify-center gap-2\"\n        >\n          <svg className=\"w-5 h-5\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n            <path d=\"M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z\"/>\n          </svg>\n          Apple\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default SocialLogin;","size_bytes":2784},"src/pages/user-authentication/components/TrustSignals.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst TrustSignals = () => {\n  const currentYear = new Date()?.getFullYear();\n\n  return (\n    <div className=\"mt-8 pt-6 border-t border-border\">\n      {/* SSL Badge */}\n      <div className=\"flex items-center justify-center gap-2 mb-4\">\n        <div className=\"flex items-center gap-2 px-3 py-1 bg-success/10 rounded-full\">\n          <Icon name=\"Shield\" size={16} className=\"text-success\" />\n          <span className=\"text-xs font-medium text-success\">SSL Secured</span>\n        </div>\n        <div className=\"flex items-center gap-2 px-3 py-1 bg-primary/10 rounded-full\">\n          <Icon name=\"Lock\" size={16} className=\"text-primary\" />\n          <span className=\"text-xs font-medium text-primary\">256-bit Encryption</span>\n        </div>\n      </div>\n\n      {/* Trust Features */}\n      <div className=\"grid grid-cols-3 gap-4 mb-6\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-2\">\n            <Icon name=\"Users\" size={16} className=\"text-accent\" />\n          </div>\n          <p className=\"text-xs text-muted-foreground\">50K+ Users</p>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 bg-warning/10 rounded-full flex items-center justify-center mx-auto mb-2\">\n            <Icon name=\"Star\" size={16} className=\"text-warning\" />\n          </div>\n          <p className=\"text-xs text-muted-foreground\">4.8 Rating</p>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 bg-success/10 rounded-full flex items-center justify-center mx-auto mb-2\">\n            <Icon name=\"Clock\" size={16} className=\"text-success\" />\n          </div>\n          <p className=\"text-xs text-muted-foreground\">24/7 Support</p>\n        </div>\n      </div>\n\n      {/* Footer Links */}\n      <div className=\"text-center space-y-2\">\n        <div className=\"flex items-center justify-center gap-4 text-xs\">\n          <button className=\"text-muted-foreground hover:text-primary transition-micro\">\n            Privacy Policy\n          </button>\n          <span className=\"text-border\">‚Ä¢</span>\n          <button className=\"text-muted-foreground hover:text-primary transition-micro\">\n            Terms of Service\n          </button>\n          <span className=\"text-border\">‚Ä¢</span>\n          <button className=\"text-muted-foreground hover:text-primary transition-micro\">\n            Help Center\n          </button>\n        </div>\n        <p className=\"text-xs text-muted-foreground\">\n          ¬© {currentYear} ParkSlot Pro. All rights reserved.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default TrustSignals;","size_bytes":2740},"replit.md":{"content":"# Parkslot Pro\n\n## Overview\n\nParkslot Pro is a modern React-based web application built for parking management. The project leverages React 18 with Vite for fast development, TailwindCSS for styling, and Redux Toolkit for state management. The application features a comprehensive UI component library, data visualization capabilities, and modern web development best practices.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React 18** with concurrent features for improved rendering performance\n- **Vite** as the build tool and development server for lightning-fast development experience\n- **Component-based architecture** with reusable UI components organized in `/src/components/`\n- **Page-based routing** using React Router v6 for declarative navigation\n- **CSS-in-JS approach** using TailwindCSS utility classes with custom design system\n\n### State Management\n- **Redux Toolkit** for centralized state management with simplified Redux setup\n- **Modern Redux patterns** reducing boilerplate and improving developer experience\n\n### Styling and UI\n- **TailwindCSS** as the primary CSS framework with utility-first approach\n- **Custom design system** with CSS variables for consistent theming and color management\n- **Responsive design** built-in with TailwindCSS mobile-first approach\n- **Component styling** using class-variance-authority and clsx for conditional styling\n\n### Data Visualization\n- **D3.js** integration for complex data visualizations and custom charts\n- **Recharts** for pre-built chart components and quick data visualization needs\n- **Dual approach** allowing both custom D3 implementations and ready-to-use chart components\n\n### Form Management\n- **React Hook Form** for efficient form handling with minimal re-renders\n- **Performance-optimized** form validation and submission handling\n\n### Animation and Interactions\n- **Framer Motion** for smooth UI animations and micro-interactions\n- **Enhanced user experience** through motion design patterns\n\n### Development Tools\n- **Hot Module Replacement** through Vite for instant development feedback\n- **PostCSS** with autoprefixer for CSS processing and vendor prefixing\n- **Path mapping** configured through jsconfig.json for cleaner imports\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React 18.2.0** - Main frontend framework\n- **React DOM 18.2.0** - DOM rendering library\n- **React Router DOM 6.0.2** - Client-side routing\n\n### State Management\n- **Redux Toolkit 2.6.1** - State management toolkit\n- **Redux 5.0.1** - Core Redux library\n\n### HTTP Client\n- **Axios 1.8.4** - Promise-based HTTP client for API communications\n\n### UI and Styling\n- **TailwindCSS 3.4.6** - Utility-first CSS framework\n- **Lucide React 0.484.0** - Icon library\n- **Radix UI Slot 1.2.3** - Primitive component library\n\n### Data Visualization\n- **D3.js 7.9.0** - Data-driven document manipulation\n- **Recharts 2.15.2** - React chart library\n\n### Form and Validation\n- **React Hook Form 7.55.0** - Form state management and validation\n\n### Animation\n- **Framer Motion 10.16.4** - Animation library for React\n\n### Utilities\n- **Date-fns 4.1.0** - Date utility library\n- **Class Variance Authority 0.7.1** - Styling utilities\n- **CLSX 2.1.1** - Conditional class name utility\n- **Tailwind Merge 3.3.1** - TailwindCSS class merging utility\n\n### Development and Deployment Platform\n- **Replit environment** for development with hot module replacement\n- **Autoscale deployment** configuration for production hosting\n- **Port 5000** configured for frontend server with proper host settings for Replit proxy\n\n### Testing Framework\n- **Jest** with React Testing Library for component testing\n- **Testing utilities** for user interaction simulation","size_bytes":3798},"src/pages/my-bookings-dashboard/components/ExtendTimeModal.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst ExtendTimeModal = ({ isOpen, onClose, booking, onSave }) => {\n  const [newEndTime, setNewEndTime] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  React.useEffect(() => {\n    if (booking && isOpen) {\n      const currentEndTime = new Date(booking.endTime);\n      const timeString = currentEndTime.toTimeString().slice(0, 5); // HH:MM format\n      setNewEndTime(timeString);\n    }\n  }, [booking, isOpen]);\n\n  const handleSave = async () => {\n    if (!newEndTime || !booking) return;\n\n    setIsLoading(true);\n\n    try {\n      const originalEnd = new Date(booking.endTime);\n      const originalStart = new Date(booking.startTime);\n\n      // Create new end time with same date but new time\n      const [hours, minutes] = newEndTime.split(':');\n      const newEnd = new Date(originalEnd);\n      newEnd.setHours(parseInt(hours), parseInt(minutes), 0, 0);\n\n      // Calculate durations\n      const originalDuration = Math.round((originalEnd - originalStart) / (1000 * 60)); // minutes\n      const newDuration = Math.round((newEnd - originalStart) / (1000 * 60)); // minutes\n      const extensionTime = newDuration - originalDuration;\n\n      if (extensionTime <= 0) {\n        alert('New end time must be later than current end time');\n        return;\n      }\n\n      // Calculate pricing based on vehicle type and extension time\n      const calculateExtensionPrice = () => {\n        const extensionMinutes = Math.ceil(extensionTime); // Use actual minutes for calculation\n        const vehicleType = booking.actualVehicleType || booking.vehicleCategory?.toLowerCase() || 'two-wheeler';\n\n        // Base rates per hour by vehicle type\n        const baseRatesPerHour = {\n          'two-wheeler': 8.0,\n          'four-wheeler': 15.0,\n          'commercial-vehicle': 25.0,\n          'scooter': 8.0,\n          'sport bike': 10.0,\n          'cruiser': 10.0,\n          'sedan': 15.0,\n          'suv': 20.0,\n          'luxury suv': 25.0,\n          'compact suv': 18.0,\n          'electric sedan': 18.0\n        };\n\n        // Get appropriate rate per hour and calculate rate per minute\n        let hourlyRate = baseRatesPerHour[vehicleType.toLowerCase()] || \n                        (vehicleType.includes('two') || vehicleType.includes('bike') || vehicleType.includes('scooter') ? 8.0 : 15.0);\n        const ratePerMinute = hourlyRate / 60;\n\n        // Time-of-day multiplier (peak hours cost more)\n        const currentHour = new Date().getHours();\n        const isPeakHours = (currentHour >= 8 && currentHour <= 10) || (currentHour >= 17 && currentHour <= 19);\n        const timeMultiplier = isPeakHours ? 1.3 : 1.0; // 30% increase during peak hours\n\n        const tierDescription = `Booking Tier (${vehicleType})`;\n        const hourlyEquivalentRate = hourlyRate * timeMultiplier; // Rate per hour during peak if applicable\n\n        const baseExtensionCost = extensionMinutes * ratePerMinute * timeMultiplier;\n        const serviceFee = baseExtensionCost * 0.05; // 5% service fee\n        const tax = (baseExtensionCost + serviceFee) * 0.08; // 8% tax\n        const totalExtensionCost = baseExtensionCost + serviceFee + tax;\n\n        return {\n          extensionMinutes,\n          ratePerMinute,\n          hourlyRate,\n          hourlyEquivalentRate,\n          baseExtensionCost: parseFloat(baseExtensionCost.toFixed(2)),\n          serviceFee: parseFloat(serviceFee.toFixed(2)),\n          tax: parseFloat(tax.toFixed(2)),\n          totalExtensionCost: parseFloat(totalExtensionCost.toFixed(2)),\n          isPeakHours,\n          tierDescription\n        };\n      };\n\n      const pricingInfo = calculateExtensionPrice();\n\n      // Format duration display\n      const formatDuration = (minutes) => {\n        const hours = Math.floor(minutes / 60);\n        const mins = minutes % 60;\n        if (hours > 0 && mins > 0) {\n          return `${hours}h ${mins}m`;\n        } else if (hours > 0) {\n          return `${hours}h`;\n        } else {\n          return `${mins}m`;\n        }\n      };\n\n      const updatedBooking = {\n        ...booking,\n        endTime: newEnd.toISOString(),\n        duration: formatDuration(newDuration),\n        originalDuration: formatDuration(originalDuration),\n        extensionTime: formatDuration(extensionTime),\n        totalDuration: formatDuration(newDuration),\n        totalAmount: (booking.totalAmount || 0) + pricingInfo.totalExtensionCost,\n        extensionCost: pricingInfo.totalExtensionCost,\n        isExtended: true,\n        extensionHistory: [\n          ...(booking.extensionHistory || []),\n          {\n            originalEndTime: booking.endTime,\n            newEndTime: newEnd.toISOString(),\n            extensionMinutes: extensionTime,\n            extensionCost: pricingInfo.totalExtensionCost,\n            pricingBreakdown: pricingInfo,\n            extendedAt: new Date().toISOString()\n          }\n        ]\n      };\n\n      await onSave(updatedBooking);\n      onClose();\n    } catch (error) {\n      console.error('Error extending booking:', error);\n      alert('Failed to extend booking. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (!isOpen || !booking) return null;\n\n  const originalEndTime = new Date(booking.endTime);\n  const currentTimeString = originalEndTime.toTimeString().slice(0, 5);\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-card rounded-2xl shadow-2xl max-w-md w-full mx-4 max-h-[90vh] flex flex-col\">\n        {/* Fixed Header */}\n        <div className=\"flex-shrink-0 p-6 pb-4\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-xl font-bold text-foreground\">Extend Booking Time</h3>\n            <button\n              onClick={onClose}\n              className=\"p-2 hover:bg-muted rounded-lg transition-colors\"\n            >\n              <Icon name=\"X\" size={20} className=\"text-muted-foreground\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Scrollable Content */}\n        <div className=\"flex-1 overflow-y-auto px-6\">\n\n        {/* Booking Details */}\n        <div className=\"bg-muted/20 rounded-lg p-4 mb-6\">\n          <h4 className=\"font-medium text-foreground mb-3\">Current Booking</h4>\n          <div className=\"space-y-2 text-sm\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Location:</span>\n              <span className=\"text-foreground font-medium\">{booking.slotLocation}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Vehicle:</span>\n              <span className=\"text-foreground font-medium\">{booking.vehicleType}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Start Time:</span>\n              <span className=\"text-foreground font-medium\">\n                {new Date(booking.startTime).toLocaleTimeString('en-US', {\n                  hour: 'numeric',\n                  minute: '2-digit',\n                  hour12: true\n                })}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Current End Time:</span>\n              <span className=\"text-foreground font-medium\">\n                {originalEndTime.toLocaleTimeString('en-US', {\n                  hour: 'numeric',\n                  minute: '2-digit',\n                  hour12: true\n                })}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Current Duration:</span>\n              <span className=\"text-foreground font-medium\">{booking.duration}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Time Extension */}\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-foreground mb-2\">\n              New End Time\n            </label>\n            <input\n              type=\"time\"\n              value={newEndTime}\n              onChange={(e) => setNewEndTime(e.target.value)}\n              className=\"w-full px-3 py-2 border border-border rounded-lg bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary\"\n              min={currentTimeString}\n            />\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Select a time after {originalEndTime.toLocaleTimeString('en-US', {\n                hour: 'numeric',\n                minute: '2-digit',\n                hour12: true\n              })}\n            </p>\n          </div>\n\n          {/* Extension Preview */}\n          {newEndTime && newEndTime > currentTimeString && (\n            <div className=\"space-y-3\">\n              <div className=\"bg-primary/10 border border-primary/20 rounded-lg p-3\">\n                <h5 className=\"font-medium text-primary mb-2\">Extension Summary</h5>\n                <div className=\"space-y-1 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Original Duration:</span>\n                    <span className=\"text-foreground\">{booking.duration}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Extension Time:</span>\n                    <span className=\"text-primary font-medium\">\n                      {(() => {\n                        const [hours, minutes] = newEndTime.split(':');\n                        const newEnd = new Date(originalEndTime);\n                        newEnd.setHours(parseInt(hours), parseInt(minutes), 0, 0);\n                        const extensionMinutes = Math.round((newEnd - originalEndTime) / (1000 * 60));\n                        const extHours = Math.floor(extensionMinutes / 60);\n                        const extMins = extensionMinutes % 60;\n                        if (extHours > 0 && extMins > 0) {\n                          return `+${extHours}h ${extMins}m`;\n                        } else if (extHours > 0) {\n                          return `+${extHours}h`;\n                        } else {\n                          return `+${extMins}m`;\n                        }\n                      })()}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between font-medium\">\n                    <span className=\"text-foreground\">Total Duration:</span>\n                    <span className=\"text-primary\">\n                      {(() => {\n                        const originalStart = new Date(booking.startTime);\n                        const [hours, minutes] = newEndTime.split(':');\n                        const newEnd = new Date(originalEndTime);\n                        newEnd.setHours(parseInt(hours), parseInt(minutes), 0, 0);\n                        const totalMinutes = Math.round((newEnd - originalStart) / (1000 * 60));\n                        const totalHours = Math.floor(totalMinutes / 60);\n                        const totalMins = totalMinutes % 60;\n                        if (totalHours > 0 && totalMins > 0) {\n                          return `${totalHours}h ${totalMins}m`;\n                        } else if (totalHours > 0) {\n                          return `${totalHours}h`;\n                        } else {\n                          return `${totalMins}m`;\n                        }\n                      })()}\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Pricing Breakdown */}\n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n                <h5 className=\"font-medium text-green-800 mb-2 flex items-center gap-2\">\n                  <Icon name=\"DollarSign\" size={16} className=\"text-green-600\" />\n                  Extension Pricing\n                </h5>\n                <div className=\"space-y-1 text-sm\">\n                  {(() => {\n                    const [hours, minutes] = newEndTime.split(':');\n                    const newEnd = new Date(originalEndTime);\n                    newEnd.setHours(parseInt(hours), parseInt(minutes), 0, 0);\n                    const extensionMinutes = Math.round((newEnd - originalEndTime) / (1000 * 60));\n                    const extensionHours = Math.ceil(extensionMinutes / 60);\n                    const vehicleType = booking.actualVehicleType || booking.vehicleCategory?.toLowerCase() || 'two-wheeler';\n\n                    // Base rates per hour by vehicle type\n                    const baseRatesPerHour = {\n                      'two-wheeler': 8.0,\n                      'four-wheeler': 15.0,\n                      'commercial-vehicle': 25.0,\n                      'scooter': 8.0,\n                      'sport bike': 10.0,\n                      'cruiser': 10.0,\n                      'sedan': 15.0,\n                      'suv': 20.0,\n                      'luxury suv': 25.0,\n                      'compact suv': 18.0,\n                      'electric sedan': 18.0\n                    };\n\n                    let hourlyRate = baseRatesPerHour[vehicleType.toLowerCase()] || \n                                    (vehicleType.includes('two') || vehicleType.includes('bike') || vehicleType.includes('scooter') ? 8.0 : 15.0);\n                    const ratePerMinute = hourlyRate / 60;\n\n                    // Time-of-day multiplier\n                    const currentHour = new Date().getHours();\n                    const isPeakHours = (currentHour >= 8 && currentHour <= 10) || (currentHour >= 17 && currentHour <= 19);\n                    const timeMultiplier = isPeakHours ? 1.3 : 1.0;\n\n                    const tierDescription = `Booking Tier (${vehicleType})`;\n                    const hourlyEquivalentRate = hourlyRate * timeMultiplier;\n\n                    const baseExtensionCost = extensionMinutes * ratePerMinute * timeMultiplier;\n                    const serviceFee = baseExtensionCost * 0.05;\n                    const tax = (baseExtensionCost + serviceFee) * 0.08;\n                    const totalExtensionCost = baseExtensionCost + serviceFee + tax;\n\n                    return (\n                      <>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-green-700\">{tierDescription}:</span>\n                          <span className=\"text-green-800 text-xs\">‚Çπ{ratePerMinute.toFixed(2)}/min</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-green-700\">Duration ({extensionMinutes} min @ ‚Çπ{hourlyEquivalentRate}/h{isPeakHours ? ' peak' : ''}):</span>\n                          <span className=\"text-green-800\">‚Çπ{baseExtensionCost.toFixed(2)}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-green-700\">Service Fee (5%):</span>\n                          <span className=\"text-green-800\">‚Çπ{serviceFee.toFixed(2)}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-green-700\">Tax (8%):</span>\n                          <span className=\"text-green-800\">‚Çπ{tax.toFixed(2)}</span>\n                        </div>\n                        <div className=\"flex justify-between font-medium pt-1 border-t border-green-300\">\n                          <span className=\"text-green-800\">Extension Cost:</span>\n                          <span className=\"text-green-900 text-base\">‚Çπ{totalExtensionCost.toFixed(2)}</span>\n                        </div>\n                        <div className=\"flex justify-between font-semibold\">\n                          <span className=\"text-green-800\">New Total Amount:</span>\n                          <span className=\"text-green-900 text-base\">‚Çπ{((booking.totalAmount || 0) + totalExtensionCost).toFixed(2)}</span>\n                        </div>\n                        {isPeakHours && (\n                          <div className=\"text-xs text-green-600 mt-1\">\n                            * Peak hours pricing (+30%) applied (8-10 AM, 5-7 PM)\n                          </div>\n                        )}\n                        {extensionMinutes > 15 && (\n                          <div className=\"text-xs text-green-600 mt-1\">\n                            * Extended duration pricing applied\n                          </div>\n                        )}\n                      </>\n                    );\n                  })()}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n        </div>\n\n        {/* Fixed Actions at Bottom */}\n        <div className=\"flex-shrink-0 p-6 pt-4 border-t border-border\">\n          <div className=\"flex gap-3\">\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              className=\"flex-1\"\n              disabled={isLoading}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleSave}\n              className=\"flex-1\"\n              disabled={!newEndTime || newEndTime <= currentTimeString || isLoading}\n              iconName={isLoading ? \"Loader2\" : \"Clock\"}\n              iconPosition=\"left\"\n            >\n              {isLoading ? 'Saving...' : 'Save Extension'}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ExtendTimeModal;","size_bytes":17848},"src/components/ui/Modal.jsx":{"content":"\nimport React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport Icon from '../AppIcon';\nimport { cn } from '../../utils/cn';\n\nconst Modal = ({ \n  isOpen, \n  onClose, \n  title, \n  children, \n  size = 'md',\n  className = '',\n  showCloseButton = true,\n  closeOnOverlayClick = true,\n  closeOnEscape = true\n}) => {\n  useEffect(() => {\n    if (!closeOnEscape) return;\n\n    const handleEscape = (e) => {\n      if (e.key === 'Escape' && isOpen) {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'hidden';\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen, onClose, closeOnEscape]);\n\n  if (!isOpen) return null;\n\n  const sizeClasses = {\n    sm: 'max-w-sm',\n    md: 'max-w-md',\n    lg: 'max-w-lg',\n    xl: 'max-w-xl',\n    '2xl': 'max-w-2xl',\n    full: 'max-w-full mx-4'\n  };\n\n  const handleOverlayClick = (e) => {\n    if (closeOnOverlayClick && e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n      {/* Backdrop */}\n      <div \n        className=\"absolute inset-0 bg-black/50 backdrop-blur-sm\"\n        onClick={handleOverlayClick}\n      />\n      \n      {/* Modal */}\n      <div className={cn(\n        'relative bg-card border border-border rounded-lg shadow-lg',\n        'w-full',\n        sizeClasses[size],\n        'max-h-[90vh] overflow-hidden',\n        'flex flex-col',\n        className\n      )}>\n        {/* Header */}\n        {(title || showCloseButton) && (\n          <div className=\"flex items-center justify-between p-4 border-b border-border\">\n            {title && (\n              <h2 className=\"text-lg font-semibold text-foreground\">\n                {title}\n              </h2>\n            )}\n            {showCloseButton && (\n              <button\n                onClick={onClose}\n                className=\"p-1 rounded-md hover:bg-muted text-muted-foreground hover:text-foreground transition-colors\"\n                aria-label=\"Close modal\"\n              >\n                <Icon name=\"X\" size={20} />\n              </button>\n            )}\n          </div>\n        )}\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-y-auto\">\n          {children}\n        </div>\n      </div>\n    </div>,\n    document.body\n  );\n};\n\nexport default Modal;\n","size_bytes":2499},"src/components/ui/Typography.jsx":{"content":"\nimport React from 'react';\nimport { cn } from '../../utils/cn';\n\nconst Typography = ({ \n  variant = 'body1', \n  component, \n  className = '', \n  children, \n  ...props \n}) => {\n  const variants = {\n    h1: 'text-4xl font-bold tracking-tight text-foreground',\n    h2: 'text-3xl font-semibold tracking-tight text-foreground',\n    h3: 'text-2xl font-semibold tracking-tight text-foreground',\n    h4: 'text-xl font-semibold tracking-tight text-foreground',\n    h5: 'text-lg font-semibold tracking-tight text-foreground',\n    h6: 'text-base font-semibold tracking-tight text-foreground',\n    subtitle1: 'text-base font-medium text-foreground',\n    subtitle2: 'text-sm font-medium text-foreground',\n    body1: 'text-base text-foreground',\n    body2: 'text-sm text-foreground',\n    caption: 'text-xs text-muted-foreground',\n    overline: 'text-xs uppercase tracking-wide text-muted-foreground',\n    button: 'text-sm font-medium text-foreground'\n  };\n\n  const defaultComponents = {\n    h1: 'h1',\n    h2: 'h2',\n    h3: 'h3',\n    h4: 'h4',\n    h5: 'h5',\n    h6: 'h6',\n    subtitle1: 'h6',\n    subtitle2: 'h6',\n    body1: 'p',\n    body2: 'p',\n    caption: 'span',\n    overline: 'span',\n    button: 'span'\n  };\n\n  const Component = component || defaultComponents[variant] || 'p';\n\n  return (\n    <Component \n      className={cn(variants[variant], className)} \n      {...props}\n    >\n      {children}\n    </Component>\n  );\n};\n\nexport default Typography;\n","size_bytes":1441},"src/contexts/ThemeContext.jsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react';\n\nconst ThemeContext = createContext();\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\nexport const ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState(() => {\n    // Check localStorage first, then system preference\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      return savedTheme;\n    }\n    \n    // Check system preference\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark';\n    }\n    \n    return 'light';\n  });\n\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n  };\n\n  useEffect(() => {\n    const root = document.documentElement;\n    \n    // Remove existing theme classes\n    root.classList.remove('light', 'dark');\n    \n    // Add new theme class\n    root.classList.add(theme);\n    \n    // Save to localStorage\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  // Listen for system theme changes\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    \n    const handleChange = (e) => {\n      // Only update if user hasn't manually set a theme\n      const savedTheme = localStorage.getItem('theme');\n      if (!savedTheme) {\n        setTheme(e.matches ? 'dark' : 'light');\n      }\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};","size_bytes":1818},"src/components/ui/CancellationModal.jsx":{"content":"import React from 'react';\nimport Icon from '../AppIcon';\nimport Button from './Button';\n\nconst CancellationModal = ({ \n  isOpen, \n  onClose, \n  onConfirm, \n  booking,\n  isProcessing = false \n}) => {\n  if (!isOpen || !booking) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-card rounded-2xl shadow-2xl max-w-sm w-full mx-4 p-4 sm:p-6 text-center animate-fade-in\">\n        {/* Header with Icon */}\n        <div className=\"flex items-center justify-center mb-6\">\n          <div className=\"w-12 h-12 bg-red-100 dark:bg-red-900/30 rounded-full flex items-center justify-center\">\n            <Icon name=\"AlertTriangle\" size={24} className=\"text-red-600 dark:text-red-400\" />\n          </div>\n        </div>\n\n        {/* Title */}\n        <h2 className=\"text-lg sm:text-xl font-bold text-foreground mb-2\">\n          Cancel Booking?\n        </h2>\n        <p className=\"text-sm text-muted-foreground mb-4\">\n          Are you sure you want to cancel this booking?\n        </p>\n\n        {/* Booking Details */}\n        <div className=\"bg-muted rounded-lg p-3 mb-4 text-left\">\n          <div className=\"space-y-2\">\n            <div>\n              <p className=\"text-xs text-muted-foreground\">Location</p>\n              <p className=\"text-sm font-medium text-foreground\">{booking.facility.name}</p>\n            </div>\n            <div>\n              <p className=\"text-xs text-muted-foreground\">Slot</p>\n              <p className=\"text-sm font-medium text-foreground\">{booking.slotLocation}</p>\n            </div>\n            <div>\n              <p className=\"text-xs text-muted-foreground\">Amount</p>\n              <p className=\"text-sm font-medium text-foreground\">${booking.totalAmount}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Warning message */}\n        <p className=\"text-destructive text-sm mb-6 font-medium\">\n          This action cannot be undone.\n        </p>\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-3\">\n          <Button\n            variant=\"outline\"\n            onClick={onClose}\n            disabled={isProcessing}\n            className=\"flex-1\"\n          >\n            Keep Booking\n          </Button>\n          <Button\n            variant=\"destructive\"\n            onClick={onConfirm}\n            disabled={isProcessing}\n            className=\"flex-1\"\n          >\n            {isProcessing ? (\n              <>\n                <Icon name=\"Loader\" size={16} className=\"animate-spin mr-2\" />\n                Cancelling...\n              </>\n            ) : (\n              'Cancel Booking'\n            )}\n          </Button>\n        </div>\n\n        {/* Additional info */}\n        <div className=\"mt-4 pt-4 border-t border-border\">\n          <p className=\"text-xs text-muted-foreground\">\n            Cancellation may be subject to terms and conditions.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CancellationModal;","size_bytes":3012},"ParkSlot_Pro_Presentation.md":{"content":"\n# üöó ParkSlot Pro - Smart Parking Management System\n## Comprehensive Project Presentation\n\n---\n\n## üìã Project Overview\n\n### **Vision Statement**\n*\"Revolutionizing urban parking through intelligent space management and seamless user experience\"*\n\n### **Mission**\nTo provide a comprehensive digital platform that connects drivers with available parking spaces, enabling efficient urban mobility and reducing parking-related stress.\n\n### **Core Value Proposition**\n- **Instant Discovery**: Find parking spots in real-time\n- **Smart Booking**: Reserve slots before arrival\n- **Seamless Payment**: Integrated payment processing\n- **Real-time Management**: Live slot availability tracking\n\n---\n\n## üéØ Main Theme & Concept\n\n### **Smart Urban Mobility Solution**\nParkSlot Pro addresses the critical urban challenge of parking scarcity through:\n\n#### **Core Concepts:**\n1. **Digital Transformation**: Converting traditional parking into smart, connected infrastructure\n2. **User-Centric Design**: Intuitive interface prioritizing user experience\n3. **Real-Time Intelligence**: Live data processing for optimal decision making\n4. **Scalable Architecture**: Built to handle growing urban demands\n\n#### **Business Model:**\n- **B2C Platform**: Direct service to end users (drivers)\n- **B2B Integration**: Partnership with parking facility owners\n- **Commission-Based Revenue**: Transaction fees and premium features\n- **Data Analytics Services**: Insights for urban planning\n\n---\n\n## üõ†Ô∏è Technology Stack & Architecture\n\n### **Frontend Technologies**\n```\nüîπ React 18.2.0 - Modern UI Framework\nüîπ Vite 5.4.20 - Lightning-fast build tool\nüîπ TailwindCSS 3.4.6 - Utility-first styling\nüîπ React Router DOM 6.0.2 - Client-side routing\nüîπ Redux Toolkit 2.6.1 - State management\nüîπ Framer Motion 10.16.4 - Smooth animations\n```\n\n### **Development Tools**\n```\nüîπ React Hook Form 7.55.0 - Form management\nüîπ D3.js 7.9.0 - Data visualizations\nüîπ Recharts 2.15.2 - Chart components\nüîπ Lucide React 0.484.0 - Icon library\nüîπ Axios 1.8.4 - HTTP client\nüîπ Date-fns 4.1.0 - Date utilities\n```\n\n### **Architecture Pattern**\n```\nüì± Component-Based Architecture\nüîÑ Unidirectional Data Flow\nüé® CSS-in-JS with Utility Classes\nüìä State Management with Redux\nüéØ Performance-Optimized Rendering\n```\n\n---\n\n## üèóÔ∏è System Architecture\n\n### **Frontend Architecture**\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ           User Interface            ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ    React Components & Pages         ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ       State Management              ‚îÇ\n‚îÇ    (Redux Toolkit + Context)       ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ      Routing & Navigation           ‚îÇ\n‚îÇ     (React Router DOM)             ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ        HTTP Client Layer           ‚îÇ\n‚îÇ          (Axios)                   ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n### **Component Hierarchy**\n```\nApp\n‚îú‚îÄ‚îÄ Routes\n‚îÇ   ‚îú‚îÄ‚îÄ Authentication\n‚îÇ   ‚îú‚îÄ‚îÄ Home Dashboard\n‚îÇ   ‚îú‚îÄ‚îÄ Location Search & Map\n‚îÇ   ‚îú‚îÄ‚îÄ Slot Selection & Booking\n‚îÇ   ‚îú‚îÄ‚îÄ Payment & Confirmation\n‚îÇ   ‚îú‚îÄ‚îÄ My Bookings Dashboard\n‚îÇ   ‚îî‚îÄ‚îÄ User Profile\n‚îú‚îÄ‚îÄ Shared Components\n‚îÇ   ‚îú‚îÄ‚îÄ Navigation Systems\n‚îÇ   ‚îú‚îÄ‚îÄ UI Components\n‚îÇ   ‚îî‚îÄ‚îÄ Context Providers\n‚îî‚îÄ‚îÄ Utilities & Helpers\n```\n\n---\n\n## üé® User Interface & Experience\n\n### **Design Philosophy**\n- **Mobile-First Approach**: Responsive design for all devices\n- **Intuitive Navigation**: Clear user journey paths\n- **Accessibility Focused**: WCAG compliant interface\n- **Performance Optimized**: Fast loading and smooth interactions\n\n### **Key UI Features**\n```\nüéØ Dark/Light Theme Support\nüì± Progressive Web App (PWA) Ready\nüé® Consistent Design System\n‚ö° Real-time Updates\nüîî Interactive Notifications\nüìä Data Visualization Charts\n```\n\n### **User Experience Flow**\n```\n1. Authentication ‚Üí 2. Location Search ‚Üí 3. Facility Selection\n         ‚Üì                    ‚Üì                    ‚Üì\n4. Slot Booking ‚Üí 5. Payment Process ‚Üí 6. Confirmation\n         ‚Üì                    ‚Üì                    ‚Üì\n7. Active Booking ‚Üí 8. Check-in/out ‚Üí 9. History & Rating\n```\n\n---\n\n## üîß Core Features & Functionality\n\n### **üè† Home Dashboard**\n- Welcome interface with user statistics\n- Quick booking widgets\n- Nearby parking areas display\n- Popular places in selected city\n- Real-time booking updates\n\n### **üó∫Ô∏è Location Search & Map**\n- Interactive map with parking facilities\n- City-based search (Hyderabad, Bangalore)\n- Filter options (price, distance, amenities)\n- Real-time availability updates\n- Facility details and ratings\n\n### **üéØ Slot Selection & Booking**\n- Interactive floor layout visualization\n- Vehicle type selection system\n- Date & time picker with duration\n- Real-time pricing calculator\n- Alternative slot suggestions\n\n### **üí≥ Payment & Confirmation**\n- Secure payment processing\n- Multiple payment methods\n- Booking terms and conditions\n- Receipt generation\n- Confirmation notifications\n\n### **üìÖ Booking Management**\n- Active, upcoming, and completed bookings\n- Extend booking functionality\n- Cancellation with policies\n- Rating and review system\n- Emergency contact integration\n\n---\n\n## üîê Security & Data Management\n\n### **Security Features**\n```\nüîí Secure Authentication System\nüõ°Ô∏è Input Validation & Sanitization\nüíæ Local Storage Management\nüîê Protected Route Navigation\n‚ö° Real-time Session Management\n```\n\n### **Data Management**\n```\nüìä localStorage for client-side persistence\nüîÑ Real-time state synchronization\nüì± Offline capability preparation\nüéØ Performance-optimized data flow\n```\n\n---\n\n## üì± Key Pages & Components\n\n### **1. User Authentication (`/user-authentication`)**\n- Login/Register forms\n- Social authentication options\n- Forgot password functionality\n- Trust signals and security features\n\n### **2. Home Dashboard (`/home`)**\n- Personalized welcome interface\n- Quick statistics and bookings\n- Popular locations showcase\n- City selection and navigation\n\n### **3. Location Search (`/location-search-map`)**\n- Map-based facility discovery\n- Advanced filtering system\n- Real-time availability updates\n- Facility comparison features\n\n### **4. Slot Selection (`/slot-selection-booking`)**\n- Interactive floor visualization\n- Vehicle and time selection\n- Dynamic pricing display\n- Booking confirmation flow\n\n### **5. Payment Processing (`/booking-confirmation-payment`)**\n- Secure payment interface\n- Multiple payment methods\n- Terms acceptance\n- Receipt generation\n\n### **6. Booking Dashboard (`/my-bookings-dashboard`)**\n- Comprehensive booking management\n- Extension and cancellation options\n- Historical booking data\n- Performance analytics\n\n---\n\n## üéØ Target Audience & Use Cases\n\n### **Primary Users**\n- **Urban Commuters**: Daily office goers\n- **Shopping Mall Visitors**: Retail customers\n- **Airport Travelers**: Long-term parking needs\n- **Event Attendees**: Temporary parking requirements\n\n### **Use Cases**\n```\nüè¢ Office Parking: Daily commuter needs\nüõçÔ∏è Retail Parking: Shopping center visits\n‚úàÔ∏è Airport Parking: Travel-related parking\nüé™ Event Parking: Concerts, sports, conferences\nüè• Hospital Parking: Medical facility visits\nüèõÔ∏è Government Office Parking: Civic services\n```\n\n---\n\n## üöÄ Performance & Optimization\n\n### **Performance Features**\n```\n‚ö° Vite for fast development and builds\nüîÑ Hot Module Replacement (HMR)\nüì± Mobile-optimized rendering\nüéØ Component lazy loading\nüíæ Efficient state management\nüñºÔ∏è Image optimization\n```\n\n### **Optimization Strategies**\n- **Code Splitting**: Route-based lazy loading\n- **Bundle Optimization**: Tree shaking and minification\n- **Caching Strategy**: LocalStorage and session management\n- **Network Optimization**: Efficient API calls and data fetching\n\n---\n\n## üîÆ Future Enhancements\n\n### **Planned Features**\n```\nü§ñ AI-Powered Parking Predictions\nüîå EV Charging Station Integration\nüéØ AR-Based Navigation\nüìä Advanced Analytics Dashboard\nüåê Multi-language Support\nüîî Push Notification System\n```\n\n### **Scalability Roadmap**\n- **Geographic Expansion**: Multiple cities support\n- **Platform Integration**: Third-party service connections\n- **Enterprise Features**: Corporate parking management\n- **IoT Integration**: Smart sensor connectivity\n\n---\n\n## üíª Development Environment\n\n### **Replit Integration**\n```\nüåê Cloud-based development\n‚ö° Hot reload development server\nüîß Integrated build tools\nüì¶ Automatic dependency management\nüöÄ One-click deployment\n```\n\n### **Development Workflow**\n```\n1. Component Development ‚Üí 2. Feature Integration\n         ‚Üì                        ‚Üì\n3. Testing & Validation ‚Üí 4. Deployment\n         ‚Üì                        ‚Üì\n5. Monitoring & Analytics ‚Üí 6. Iterative Improvement\n```\n\n---\n\n## üìä Technical Specifications\n\n### **Build Configuration**\n```javascript\n// Build Tool: Vite 5.4.20\n// Development Server: http://localhost:5000\n// Production Build: Optimized bundles\n// Asset Management: Public folder serving\n// Hot Reload: Enabled for development\n```\n\n### **Browser Compatibility**\n```\n‚úÖ Chrome 90+ (Primary target)\n‚úÖ Firefox 88+ (Full support)\n‚úÖ Safari 14+ (WebKit optimized)\n‚úÖ Edge 90+ (Chromium-based)\nüì± Mobile browsers (iOS Safari, Chrome Mobile)\n```\n\n---\n\n## üéØ Conclusion\n\n### **Project Impact**\nParkSlot Pro represents a comprehensive solution to urban parking challenges, combining modern web technologies with user-centric design to create an efficient, scalable parking management platform.\n\n### **Key Achievements**\n- **Full-featured Parking Platform**: Complete booking lifecycle\n- **Modern Technology Stack**: React 18 + Vite + TailwindCSS\n- **Responsive Design**: Mobile-first approach\n- **Real-time Functionality**: Live updates and interactions\n- **Scalable Architecture**: Ready for urban expansion\n\n### **Success Metrics**\n```\nüéØ User Experience: Intuitive and accessible design\n‚ö° Performance: Fast loading and smooth interactions\nüîß Maintainability: Clean, documented codebase\nüìà Scalability: Architecture ready for growth\nüõ°Ô∏è Security: Robust authentication and data protection\n```\n\n---\n\n## üìû Contact & Resources\n\n### **Project Repository**\n- **Platform**: Replit Cloud Development\n- **Technology**: React + Vite + TailwindCSS\n- **Deployment**: Replit Autoscale\n\n### **Development Team**\n- **Frontend Architecture**: React 18 ecosystem\n- **UI/UX Design**: TailwindCSS + Custom components\n- **State Management**: Redux Toolkit\n- **Performance**: Vite build optimization\n\n---\n\n*Thank you for exploring ParkSlot Pro - Smart Parking Management System*\n\n**üöó Making Urban Parking Simple, Smart, and Sustainable üåü**\n","size_bytes":11301},"ParkSlot_Pro_Project_Presentation.md":{"content":"\n# üöó ParkSlot Pro - Smart Parking Management System\n## Project Presentation Slides\n\n---\n\n### **Slide 1: Title Slide**\n# ParkSlot Pro\n## Smart Parking Management System\n### *Revolutionizing Urban Parking Through Technology*\n\n**Presented by:** [Your Name]  \n**Date:** [Current Date]  \n**Platform:** React Web Application\n\n---\n\n### **Slide 2: Project Overview**\n## üéØ What is ParkSlot Pro?\n\n- **Smart Parking Solution** for urban mobility challenges\n- **Real-time parking space discovery** and booking platform\n- **Seamless integration** of finding, booking, and payment\n- **Mobile-first responsive** web application\n- **Built with modern web technologies** for scalability\n\n**Mission:** *Making urban parking simple, smart, and sustainable*\n\n---\n\n### **Slide 3: Problem Statement**\n## üö® Urban Parking Challenges\n\n### Current Issues:\n- **30% of urban traffic** is people looking for parking\n- **Average 8 minutes** spent searching for parking spots\n- **Lack of real-time information** about available spaces\n- **Manual payment systems** causing delays\n- **No advance booking** options for events/appointments\n\n### Our Solution:\n‚úÖ **Instant Discovery** of available parking  \n‚úÖ **Smart Booking** with advance reservations  \n‚úÖ **Digital Payments** for seamless transactions  \n‚úÖ **Real-time Updates** on space availability\n\n---\n\n### **Slide 4: Technology Stack**\n## üõ†Ô∏è Modern Tech Architecture\n\n### **Frontend Technologies**\n```\nüîπ React 18.2.0 - Component-based UI\nüîπ Vite 5.4.20 - Lightning-fast build tool\nüîπ TailwindCSS 3.4.6 - Utility-first styling\nüîπ Redux Toolkit 2.6.1 - State management\nüîπ React Router DOM 6.0.2 - Navigation\nüîπ Framer Motion 10.16.4 - Animations\n```\n\n### **Development Tools**\n```\nüîπ React Hook Form - Form management\nüîπ D3.js & Recharts - Data visualization\nüîπ Lucide React - Icon library\nüîπ Axios - HTTP client\nüîπ Date-fns - Date utilities\n```\n\n---\n\n### **Slide 5: System Architecture**\n## üèóÔ∏è Application Architecture\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ           User Interface            ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ    React Components & Pages         ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ       State Management              ‚îÇ\n‚îÇ    (Redux Toolkit + Context)       ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ      Routing & Navigation           ‚îÇ\n‚îÇ     (React Router DOM)             ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ        HTTP Client Layer           ‚îÇ\n‚îÇ          (Axios)                   ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n**Design Pattern:** Component-based architecture with unidirectional data flow\n\n---\n\n### **Slide 6: Key Features Overview**\n## üé® Core Functionality\n\n### **üîê User Authentication**\n- Secure login/registration system\n- Social authentication options\n- Password recovery functionality\n\n### **üè† Smart Dashboard**\n- Personalized user interface\n- Quick booking widgets\n- Real-time statistics\n\n### **üó∫Ô∏è Interactive Map Search**\n- City-based location search\n- Real-time facility discovery\n- Advanced filtering options\n\n---\n\n### **Slide 7: Booking System Features**\n## üìÖ Comprehensive Booking Management\n\n### **üéØ Slot Selection**\n- Interactive floor layout visualization\n- Vehicle type selection\n- Date & time picker with duration\n- Real-time pricing calculator\n\n### **üí≥ Payment Processing**\n- Secure payment interface\n- Multiple payment methods\n- Instant confirmation\n- Digital receipts\n\n### **üìä Booking Dashboard**\n- Active, upcoming, completed bookings\n- Extend/cancel functionality\n- Rating and review system\n\n---\n\n### **Slide 8: User Experience Design**\n## üé® UI/UX Highlights\n\n### **Design Philosophy**\n- **Mobile-First Approach** - Responsive across all devices\n- **Intuitive Navigation** - Clear user journey paths\n- **Accessibility Focused** - WCAG compliant interface\n- **Performance Optimized** - Fast loading times\n\n### **Key UX Features**\n```\nüéØ Dark/Light Theme Support\nüì± Progressive Web App (PWA) Ready\nüé® Consistent Design System\n‚ö° Real-time Updates\nüîî Interactive Notifications\nüìä Data Visualization Charts\n```\n\n---\n\n### **Slide 9: Application Flow**\n## üîÑ User Journey Mapping\n\n```\n1. Authentication ‚Üí 2. Location Search ‚Üí 3. Facility Selection\n         ‚Üì                    ‚Üì                    ‚Üì\n4. Slot Booking ‚Üí 5. Payment Process ‚Üí 6. Confirmation\n         ‚Üì                    ‚Üì                    ‚Üì\n7. Active Booking ‚Üí 8. Check-in/out ‚Üí 9. History & Rating\n```\n\n### **Navigation Structure**\n- **Home Dashboard** - Central hub with quick access\n- **Location Search** - Map-based facility discovery\n- **Booking Management** - Comprehensive booking control\n- **User Profile** - Personal settings and preferences\n\n---\n\n### **Slide 10: Technical Implementation**\n## ‚öôÔ∏è Development Methodology\n\n### **Component Architecture**\n```\nApp\n‚îú‚îÄ‚îÄ Authentication System\n‚îú‚îÄ‚îÄ Dashboard Interface\n‚îú‚îÄ‚îÄ Location & Map Services\n‚îú‚îÄ‚îÄ Booking Management\n‚îú‚îÄ‚îÄ Payment Processing\n‚îî‚îÄ‚îÄ Shared UI Components\n```\n\n### **State Management**\n- **Redux Toolkit** for global state\n- **React Context** for theme management\n- **Local Storage** for persistence\n- **Real-time updates** with efficient re-rendering\n\n---\n\n### **Slide 11: Performance Optimization**\n## ‚ö° Technical Excellence\n\n### **Build & Performance**\n```\nüîπ Vite for fast development builds\nüîπ Hot Module Replacement (HMR)\nüîπ Component lazy loading\nüîπ Bundle optimization\nüîπ Image optimization\nüîπ Efficient API calls\n```\n\n### **Browser Compatibility**\n```\n‚úÖ Chrome 90+ (Primary target)\n‚úÖ Firefox 88+ (Full support)\n‚úÖ Safari 14+ (WebKit optimized)\n‚úÖ Edge 90+ (Chromium-based)\nüì± Mobile browsers support\n```\n\n---\n\n### **Slide 12: Data Visualization**\n## üìä Analytics & Insights\n\n### **Integrated Chart Libraries**\n- **D3.js** for custom data visualizations\n- **Recharts** for pre-built chart components\n- **Real-time booking analytics**\n- **Usage pattern visualization**\n\n### **Dashboard Metrics**\n- Booking trends and patterns\n- Popular parking locations\n- User engagement statistics\n- Revenue analytics (future scope)\n\n---\n\n### **Slide 13: Security & Reliability**\n## üîí Security Implementation\n\n### **Security Features**\n```\nüõ°Ô∏è Secure Authentication System\nüîê Input Validation & Sanitization\nüíæ Secure Local Storage Management\nüîí Protected Route Navigation\n‚ö° Real-time Session Management\n```\n\n### **Data Management**\n- Client-side data persistence\n- Real-time state synchronization\n- Offline capability preparation\n- Performance-optimized data flow\n\n---\n\n### **Slide 14: Development Environment**\n## üíª Replit Integration\n\n### **Cloud Development Benefits**\n```\nüåê Cloud-based development environment\n‚ö° Hot reload development server\nüîß Integrated build tools\nüì¶ Automatic dependency management\nüöÄ One-click deployment capability\n```\n\n### **Development Workflow**\n1. **Component Development** ‚Üí Feature Integration\n2. **Testing & Validation** ‚Üí Quality Assurance\n3. **Deployment** ‚Üí Production Ready\n4. **Monitoring** ‚Üí Performance Analytics\n\n---\n\n### **Slide 15: Target Market & Use Cases**\n## üéØ Market Application\n\n### **Primary Users**\n- **Urban Commuters** - Daily office parking needs\n- **Shopping Mall Visitors** - Retail parking solutions\n- **Airport Travelers** - Long-term parking requirements\n- **Event Attendees** - Temporary parking for events\n\n### **Business Applications**\n```\nüè¢ Corporate Parking Management\nüõçÔ∏è Retail Center Integration\n‚úàÔ∏è Airport Parking Services\nüé™ Event Venue Partnerships\nüè• Hospital Parking Solutions\n```\n\n---\n\n### **Slide 16: Scalability & Future Scope**\n## üöÄ Growth Roadmap\n\n### **Planned Enhancements**\n```\nü§ñ AI-Powered Parking Predictions\nüîå EV Charging Station Integration\nüéØ AR-Based Navigation\nüìä Advanced Analytics Dashboard\nüåê Multi-language Support\nüîî Push Notification System\n```\n\n### **Expansion Strategy**\n- **Geographic Scaling** - Multiple cities support\n- **Platform Integration** - Third-party services\n- **Enterprise Features** - Corporate solutions\n- **IoT Connectivity** - Smart sensor integration\n\n---\n\n### **Slide 17: Technical Specifications**\n## üìã Project Details\n\n### **Build Configuration**\n```javascript\n// Build Tool: Vite 5.4.20\n// Development Server: Port 5000\n// Production Ready: Optimized bundles\n// Hot Reload: Enabled development\n// Asset Management: Efficient serving\n```\n\n### **File Structure**\n```\nüìÅ src/\n  ‚îú‚îÄ‚îÄ üìÅ components/ (Reusable UI components)\n  ‚îú‚îÄ‚îÄ üìÅ pages/ (Main application pages)\n  ‚îú‚îÄ‚îÄ üìÅ styles/ (CSS and styling)\n  ‚îú‚îÄ‚îÄ üìÅ utils/ (Helper functions)\n  ‚îî‚îÄ‚îÄ üìÅ contexts/ (React contexts)\n```\n\n---\n\n### **Slide 18: Code Quality & Best Practices**\n## üéØ Development Standards\n\n### **Code Quality Measures**\n- **Component-based architecture** for reusability\n- **Modern React patterns** with hooks\n- **Responsive design** with TailwindCSS\n- **Type safety** with PropTypes validation\n- **Performance optimization** throughout\n\n### **Best Practices Implemented**\n```\n‚úÖ Clean, documented codebase\n‚úÖ Modular component structure\n‚úÖ Efficient state management\n‚úÖ Responsive design patterns\n‚úÖ Accessibility compliance\n‚úÖ Performance monitoring\n```\n\n---\n\n### **Slide 19: Project Achievements**\n## üèÜ Key Accomplishments\n\n### **Technical Achievements**\n```\nüéØ Full-featured parking platform\n‚ö° Modern React 18 implementation\nüì± Mobile-first responsive design\nüîß Scalable component architecture\nüõ°Ô∏è Secure authentication system\nüìä Data visualization integration\n```\n\n### **User Experience Success**\n- **Intuitive interface** design\n- **Fast loading** performance\n- **Seamless navigation** flow\n- **Real-time updates** capability\n- **Cross-platform** compatibility\n\n---\n\n### **Slide 20: Demo & Live Presentation**\n## üé¨ Application Demonstration\n\n### **Live Demo Features**\n1. **User Authentication** - Login/Register flow\n2. **Dashboard Navigation** - Home interface\n3. **Location Search** - Map-based discovery\n4. **Booking Process** - Slot selection to payment\n5. **Booking Management** - Dashboard functionality\n\n### **Interactive Elements**\n- Real-time map interactions\n- Dynamic form validations\n- Smooth page transitions\n- Responsive design showcase\n\n---\n\n### **Slide 21: Conclusion**\n## üéØ Project Impact & Summary\n\n### **Key Takeaways**\n- **Comprehensive solution** to urban parking challenges\n- **Modern web technologies** for scalable development\n- **User-centric design** approach\n- **Real-time functionality** implementation\n- **Production-ready** architecture\n\n### **Success Metrics**\n```\nüéØ User Experience: Intuitive & Accessible\n‚ö° Performance: Fast & Responsive\nüîß Maintainability: Clean Codebase\nüìà Scalability: Growth-Ready Architecture\nüõ°Ô∏è Security: Robust Implementation\n```\n\n---\n\n### **Slide 22: Thank You**\n## üôè Questions & Discussion\n\n### **Contact & Resources**\n- **Project Repository:** Replit Cloud Platform\n- **Technology Stack:** React + Vite + TailwindCSS\n- **Development Environment:** Replit Workspace\n\n### **Questions Welcome**\n*Ready to discuss technical implementation, architecture decisions, and future enhancements*\n\n---\n\n**üöó ParkSlot Pro - Making Urban Parking Simple, Smart, and Sustainable üåü**\n\n---\n\n### **Slide 23: Appendix - Technical Deep Dive**\n## üîß Additional Technical Details\n\n### **Dependencies Overview**\n```json\n{\n  \"core\": [\"React 18.2.0\", \"Redux Toolkit\", \"React Router\"],\n  \"styling\": [\"TailwindCSS\", \"Framer Motion\"],\n  \"forms\": [\"React Hook Form\"],\n  \"data\": [\"D3.js\", \"Recharts\", \"Axios\"],\n  \"build\": [\"Vite\", \"PostCSS\", \"Autoprefixer\"]\n}\n```\n\n### **Performance Metrics**\n- **First Contentful Paint:** < 1.5s\n- **Time to Interactive:** < 3s\n- **Bundle Size:** Optimized chunks\n- **Lighthouse Score:** 90+ performance rating\n\n---\n\n*End of Presentation*\n","size_bytes":12377},"ParkSlot_Pro_Complete_Project_Presentation.md":{"content":"\n# üöó ParkSlot Pro - Smart Parking Management System\n## Complete Project Presentation & Documentation\n\n---\n\n## üìã Executive Summary\n\n### **Project Overview**\nParkSlot Pro is a cutting-edge **Smart Parking Management System** designed to revolutionize urban mobility by connecting drivers with available parking spaces through an intelligent, real-time digital platform.\n\n### **Vision Statement**\n*\"Transforming urban parking through intelligent space management, seamless user experience, and sustainable city planning\"*\n\n### **Mission**\nTo eliminate the frustration of finding parking by providing a comprehensive digital ecosystem that enables instant discovery, smart booking, and efficient management of parking spaces across urban areas.\n\n---\n\n## üéØ Core Value Proposition & Main Motto\n\n### **Main Motto**\n**\"Making Urban Parking Simple, Smart, and Sustainable\"**\n\n### **Core Values**\n- **Instant Discovery** üîç - Find available parking spots in real-time\n- **Smart Booking** üìÖ - Reserve slots before arrival with flexible timing\n- **Seamless Payment** üí≥ - Integrated payment processing with digital receipts\n- **Real-time Management** ‚ö° - Live slot availability tracking and updates\n- **User-Centric Design** üé® - Intuitive interface prioritizing user experience\n- **Sustainable Solutions** üå± - Reducing traffic congestion and carbon footprint\n\n---\n\n## üõ†Ô∏è Technology Stack & Tools\n\n### **Frontend Technologies**\n```javascript\nüîπ React 18.2.0          - Modern component-based UI framework\nüîπ Vite 5.4.20           - Lightning-fast build tool and dev server\nüîπ TailwindCSS 3.4.6     - Utility-first CSS framework\nüîπ Redux Toolkit 2.6.1   - Predictable state container\nüîπ React Router DOM 6.0.2 - Declarative routing solution\nüîπ Framer Motion 10.16.4 - Production-ready motion library\n```\n\n### **Development Tools & Libraries**\n```javascript\nüîπ React Hook Form 7.55.0 - Performant form management\nüîπ D3.js 7.9.0           - Powerful data visualization\nüîπ Recharts 2.15.2       - Composable charting library\nüîπ Lucide React 0.484.0  - Beautiful & consistent icons\nüîπ Axios 1.8.4           - Promise-based HTTP client\nüîπ Date-fns 4.1.0        - Modern date utility library\n```\n\n### **Build & Development Environment**\n```javascript\nüîπ Replit Cloud Platform  - Cloud-based development environment\nüîπ Hot Module Replacement - Real-time development updates\nüîπ PostCSS & Autoprefixer - CSS processing and optimization\nüîπ ESLint & Prettier     - Code quality and formatting\nüîπ Progressive Web App   - PWA-ready architecture\n```\n\n---\n\n## üèóÔ∏è System Architecture & Methods\n\n### **Architectural Patterns**\n```\nüì± Component-Based Architecture\n‚îú‚îÄ‚îÄ Atomic Design Principles\n‚îú‚îÄ‚îÄ Unidirectional Data Flow\n‚îú‚îÄ‚îÄ State Management Pattern\n‚îú‚îÄ‚îÄ Container-Presenter Pattern\n‚îî‚îÄ‚îÄ Higher-Order Components (HOCs)\n```\n\n### **Frontend Architecture Layers**\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ           User Interface            ‚îÇ\n‚îÇ    (React Components & Pages)       ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ       State Management              ‚îÇ\n‚îÇ    (Redux Toolkit + Context)       ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ      Routing & Navigation           ‚îÇ\n‚îÇ     (React Router DOM)             ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ        HTTP Client Layer           ‚îÇ\n‚îÇ          (Axios)                   ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ      Data Persistence Layer        ‚îÇ\n‚îÇ      (localStorage + State)        ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n### **Development Methodology**\n- **Agile Development** - Iterative and incremental approach\n- **Component-First Design** - Modular and reusable UI components\n- **Mobile-First Responsive** - Progressive enhancement strategy\n- **Performance-Driven** - Optimization-focused development\n- **User-Centered Design** - UX research and usability testing\n\n---\n\n## üé® Design Concepts & UI/UX Principles\n\n### **Design Philosophy**\n```\nüéØ User-Centric Design    - Human-centered design approach\nüì± Mobile-First Strategy  - Responsive across all devices\nüé® Consistent Design      - Unified design system and patterns\n‚ö° Performance Focus     - Fast loading and smooth interactions\n‚ôø Accessibility First   - WCAG 2.1 AA compliance\nüåô Theme Flexibility     - Dark/Light mode support\n```\n\n### **UI/UX Concepts Implemented**\n- **Progressive Disclosure** - Information revealed progressively\n- **Cognitive Load Reduction** - Simplified decision-making processes\n- **Visual Hierarchy** - Clear information architecture\n- **Microinteractions** - Engaging and delightful user feedback\n- **Responsive Typography** - Fluid typography scaling\n- **Color Psychology** - Strategic color usage for user emotions\n\n---\n\n## üîß Core Features & Functionality\n\n### **üè† Smart Dashboard**\n```javascript\nFeatures:\n‚îú‚îÄ‚îÄ Personalized Welcome Interface\n‚îú‚îÄ‚îÄ Real-time Booking Statistics\n‚îú‚îÄ‚îÄ Quick Action Widgets\n‚îú‚îÄ‚îÄ Popular Locations Display\n‚îú‚îÄ‚îÄ City-based Navigation\n‚îú‚îÄ‚îÄ Booking History Overview\n‚îî‚îÄ‚îÄ Emergency Contact Integration\n```\n\n### **üó∫Ô∏è Intelligent Location Search & Map**\n```javascript\nCapabilities:\n‚îú‚îÄ‚îÄ Interactive Map Interface (Google Maps Integration)\n‚îú‚îÄ‚îÄ Real-time Facility Discovery\n‚îú‚îÄ‚îÄ Advanced Filtering System\n‚îÇ   ‚îú‚îÄ‚îÄ Price Range Filters\n‚îÇ   ‚îú‚îÄ‚îÄ Distance-based Sorting\n‚îÇ   ‚îú‚îÄ‚îÄ Amenity Filters\n‚îÇ   ‚îú‚îÄ‚îÄ Vehicle Type Compatibility\n‚îÇ   ‚îî‚îÄ‚îÄ Availability Status\n‚îú‚îÄ‚îÄ City-specific Search (Hyderabad, Bangalore)\n‚îú‚îÄ‚îÄ Facility Ratings & Reviews\n‚îî‚îÄ‚îÄ Live Availability Updates\n```\n\n### **üéØ Advanced Slot Selection & Booking**\n```javascript\nFeatures:\n‚îú‚îÄ‚îÄ Interactive Floor Layout Visualization\n‚îú‚îÄ‚îÄ Real-time Slot Availability\n‚îú‚îÄ‚îÄ Vehicle Type Selection System\n‚îÇ   ‚îú‚îÄ‚îÄ Two-wheeler Support\n‚îÇ   ‚îú‚îÄ‚îÄ Four-wheeler Categories\n‚îÇ   ‚îî‚îÄ‚îÄ Electric Vehicle Options\n‚îú‚îÄ‚îÄ Flexible Date & Time Picker\n‚îú‚îÄ‚îÄ Duration-based Pricing Calculator\n‚îú‚îÄ‚îÄ Alternative Slot Suggestions\n‚îî‚îÄ‚îÄ Instant Booking Confirmation\n```\n\n### **üí≥ Secure Payment & Confirmation**\n```javascript\nPayment Features:\n‚îú‚îÄ‚îÄ Multiple Payment Methods\n‚îÇ   ‚îú‚îÄ‚îÄ Credit/Debit Cards\n‚îÇ   ‚îú‚îÄ‚îÄ Digital Wallets\n‚îÇ   ‚îú‚îÄ‚îÄ UPI Integration\n‚îÇ   ‚îî‚îÄ‚îÄ Net Banking\n‚îú‚îÄ‚îÄ Secure Payment Processing\n‚îú‚îÄ‚îÄ Dynamic Pricing Engine\n‚îú‚îÄ‚îÄ Booking Terms & Conditions\n‚îú‚îÄ‚îÄ Digital Receipt Generation\n‚îî‚îÄ‚îÄ Confirmation Notifications\n```\n\n### **üìÖ Comprehensive Booking Management**\n```javascript\nManagement Features:\n‚îú‚îÄ‚îÄ Multi-status Booking Dashboard\n‚îÇ   ‚îú‚îÄ‚îÄ Active Bookings (Real-time tracking)\n‚îÇ   ‚îú‚îÄ‚îÄ Upcoming Bookings (Future reservations)\n‚îÇ   ‚îú‚îÄ‚îÄ Completed Bookings (History)\n‚îÇ   ‚îî‚îÄ‚îÄ All Bookings (Complete overview)\n‚îú‚îÄ‚îÄ Booking Extension Functionality\n‚îú‚îÄ‚îÄ Cancellation with Policy Management\n‚îú‚îÄ‚îÄ QR Code Generation for Entry/Exit\n‚îú‚îÄ‚îÄ Navigation & Directions Integration\n‚îú‚îÄ‚îÄ Rating & Review System\n‚îî‚îÄ‚îÄ Emergency Contact Support\n```\n\n---\n\n## üìä Data Management & State Concepts\n\n### **State Management Strategy**\n```javascript\nState Architecture:\n‚îú‚îÄ‚îÄ Global State (Redux Toolkit)\n‚îÇ   ‚îú‚îÄ‚îÄ User Authentication State\n‚îÇ   ‚îú‚îÄ‚îÄ Booking Management State\n‚îÇ   ‚îú‚îÄ‚îÄ Location & Facility Data\n‚îÇ   ‚îî‚îÄ‚îÄ Application Configuration\n‚îú‚îÄ‚îÄ Local Component State (React Hooks)\n‚îÇ   ‚îú‚îÄ‚îÄ Form State Management\n‚îÇ   ‚îú‚îÄ‚îÄ UI Interaction State\n‚îÇ   ‚îî‚îÄ‚îÄ Temporary Data Storage\n‚îú‚îÄ‚îÄ Context-based State (React Context)\n‚îÇ   ‚îú‚îÄ‚îÄ Theme Management\n‚îÇ   ‚îú‚îÄ‚îÄ User Preferences\n‚îÇ   ‚îî‚îÄ‚îÄ Navigation State\n‚îî‚îÄ‚îÄ Persistent Storage (localStorage)\n    ‚îú‚îÄ‚îÄ User Session Data\n    ‚îú‚îÄ‚îÄ Booking History\n    ‚îú‚îÄ‚îÄ User Preferences\n    ‚îî‚îÄ‚îÄ Offline Data Cache\n```\n\n### **Data Flow Patterns**\n- **Unidirectional Data Flow** - Predictable state updates\n- **Immutable State Updates** - Redux Toolkit's Immer integration\n- **Optimistic Updates** - Immediate UI feedback\n- **Real-time Synchronization** - Live data updates\n- **Offline-First Strategy** - Local data persistence\n\n---\n\n## üéØ Target Users & Use Cases\n\n### **Primary User Segments**\n```\nüè¢ Urban Commuters\n‚îú‚îÄ‚îÄ Daily office workers\n‚îú‚îÄ‚îÄ Frequent city travelers\n‚îú‚îÄ‚îÄ Business professionals\n‚îî‚îÄ‚îÄ Remote workers\n\nüõçÔ∏è Retail & Entertainment\n‚îú‚îÄ‚îÄ Shopping mall visitors\n‚îú‚îÄ‚îÄ Restaurant customers\n‚îú‚îÄ‚îÄ Movie theater attendees\n‚îî‚îÄ‚îÄ Entertainment venue visitors\n\n‚úàÔ∏è Travel & Transportation\n‚îú‚îÄ‚îÄ Airport travelers\n‚îú‚îÄ‚îÄ Railway station users\n‚îú‚îÄ‚îÄ Bus terminal visitors\n‚îî‚îÄ‚îÄ Long-distance travelers\n\nüé™ Event & Special Occasions\n‚îú‚îÄ‚îÄ Concert attendees\n‚îú‚îÄ‚îÄ Sports event visitors\n‚îú‚îÄ‚îÄ Conference participants\n‚îî‚îÄ‚îÄ Wedding/party guests\n```\n\n### **Business Use Cases**\n```javascript\nCorporate Solutions:\n‚îú‚îÄ‚îÄ Employee Parking Management\n‚îú‚îÄ‚îÄ Visitor Parking Allocation\n‚îú‚îÄ‚îÄ Corporate Event Parking\n‚îî‚îÄ‚îÄ Fleet Vehicle Management\n\nFacility Partnerships:\n‚îú‚îÄ‚îÄ Shopping Mall Integration\n‚îú‚îÄ‚îÄ Hospital Parking Solutions\n‚îú‚îÄ‚îÄ Educational Institution Parking\n‚îú‚îÄ‚îÄ Government Office Parking\n‚îî‚îÄ‚îÄ Entertainment Venue Partnerships\n```\n\n---\n\n## üöÄ Performance Optimization & Methods\n\n### **Performance Strategies**\n```javascript\nFrontend Optimization:\n‚îú‚îÄ‚îÄ Code Splitting & Lazy Loading\n‚îÇ   ‚îú‚îÄ‚îÄ Route-based code splitting\n‚îÇ   ‚îú‚îÄ‚îÄ Component lazy loading\n‚îÇ   ‚îî‚îÄ‚îÄ Dynamic imports\n‚îú‚îÄ‚îÄ Bundle Optimization\n‚îÇ   ‚îú‚îÄ‚îÄ Tree shaking\n‚îÇ   ‚îú‚îÄ‚îÄ Minification\n‚îÇ   ‚îú‚îÄ‚îÄ Compression\n‚îÇ   ‚îî‚îÄ‚îÄ Asset optimization\n‚îú‚îÄ‚îÄ Caching Strategies\n‚îÇ   ‚îú‚îÄ‚îÄ Browser caching\n‚îÇ   ‚îú‚îÄ‚îÄ Service worker caching\n‚îÇ   ‚îú‚îÄ‚îÄ localStorage caching\n‚îÇ   ‚îî‚îÄ‚îÄ API response caching\n‚îú‚îÄ‚îÄ Image Optimization\n‚îÇ   ‚îú‚îÄ‚îÄ WebP format support\n‚îÇ   ‚îú‚îÄ‚îÄ Lazy loading images\n‚îÇ   ‚îú‚îÄ‚îÄ Responsive images\n‚îÇ   ‚îî‚îÄ‚îÄ Progressive loading\n‚îî‚îÄ‚îÄ Network Optimization\n    ‚îú‚îÄ‚îÄ HTTP/2 support\n    ‚îú‚îÄ‚îÄ CDN integration\n    ‚îú‚îÄ‚îÄ API request optimization\n    ‚îî‚îÄ‚îÄ Preloading strategies\n```\n\n### **Performance Metrics**\n```\nüéØ Target Performance:\n‚îú‚îÄ‚îÄ First Contentful Paint: < 1.5s\n‚îú‚îÄ‚îÄ Time to Interactive: < 3s\n‚îú‚îÄ‚îÄ Largest Contentful Paint: < 2.5s\n‚îú‚îÄ‚îÄ Cumulative Layout Shift: < 0.1\n‚îú‚îÄ‚îÄ First Input Delay: < 100ms\n‚îî‚îÄ‚îÄ Lighthouse Score: 90+ (Performance)\n```\n\n---\n\n## üîê Security & Privacy Concepts\n\n### **Security Implementation**\n```javascript\nSecurity Measures:\n‚îú‚îÄ‚îÄ Authentication & Authorization\n‚îÇ   ‚îú‚îÄ‚îÄ Secure user authentication\n‚îÇ   ‚îú‚îÄ‚îÄ Session management\n‚îÇ   ‚îú‚îÄ‚îÄ Token-based security\n‚îÇ   ‚îî‚îÄ‚îÄ Multi-factor authentication support\n‚îú‚îÄ‚îÄ Data Protection\n‚îÇ   ‚îú‚îÄ‚îÄ Input validation & sanitization\n‚îÇ   ‚îú‚îÄ‚îÄ XSS protection\n‚îÇ   ‚îú‚îÄ‚îÄ CSRF protection\n‚îÇ   ‚îî‚îÄ‚îÄ SQL injection prevention\n‚îú‚îÄ‚îÄ Privacy Protection\n‚îÇ   ‚îú‚îÄ‚îÄ Data encryption\n‚îÇ   ‚îú‚îÄ‚îÄ Privacy policy compliance\n‚îÇ   ‚îú‚îÄ‚îÄ GDPR compliance\n‚îÇ   ‚îî‚îÄ‚îÄ User consent management\n‚îî‚îÄ‚îÄ Secure Communication\n    ‚îú‚îÄ‚îÄ HTTPS enforcement\n    ‚îú‚îÄ‚îÄ API security\n    ‚îú‚îÄ‚îÄ Secure payment processing\n    ‚îî‚îÄ‚îÄ Data transmission encryption\n```\n\n---\n\n## üì± Key Application Pages & Components\n\n### **Application Structure**\n```\nParkSlot Pro Application:\n‚îú‚îÄ‚îÄ üîê User Authentication (/user-authentication)\n‚îÇ   ‚îú‚îÄ‚îÄ Login & Registration Forms\n‚îÇ   ‚îú‚îÄ‚îÄ Social Authentication\n‚îÇ   ‚îú‚îÄ‚îÄ Password Recovery\n‚îÇ   ‚îî‚îÄ‚îÄ Trust Signals & Security\n‚îú‚îÄ‚îÄ üè† Home Dashboard (/home)\n‚îÇ   ‚îú‚îÄ‚îÄ Welcome Interface\n‚îÇ   ‚îú‚îÄ‚îÄ Quick Statistics\n‚îÇ   ‚îú‚îÄ‚îÄ Popular Locations\n‚îÇ   ‚îî‚îÄ‚îÄ City Selection\n‚îú‚îÄ‚îÄ üó∫Ô∏è Location Search & Map (/location-search-map)\n‚îÇ   ‚îú‚îÄ‚îÄ Interactive Map View\n‚îÇ   ‚îú‚îÄ‚îÄ Facility Discovery\n‚îÇ   ‚îú‚îÄ‚îÄ Advanced Filters\n‚îÇ   ‚îî‚îÄ‚îÄ Real-time Updates\n‚îú‚îÄ‚îÄ üè¢ Facility Details (/facility-details-floor-selection)\n‚îÇ   ‚îú‚îÄ‚îÄ Facility Information\n‚îÇ   ‚îú‚îÄ‚îÄ Floor Layout Visualization\n‚îÇ   ‚îú‚îÄ‚îÄ Amenities Display\n‚îÇ   ‚îî‚îÄ‚îÄ Reviews & Ratings\n‚îú‚îÄ‚îÄ üéØ Slot Selection (/slot-selection-booking)\n‚îÇ   ‚îú‚îÄ‚îÄ Interactive Floor Plans\n‚îÇ   ‚îú‚îÄ‚îÄ Vehicle Selection\n‚îÇ   ‚îú‚îÄ‚îÄ Date & Time Picker\n‚îÇ   ‚îî‚îÄ‚îÄ Pricing Calculator\n‚îú‚îÄ‚îÄ üí≥ Payment & Confirmation (/booking-confirmation-payment)\n‚îÇ   ‚îú‚îÄ‚îÄ Payment Processing\n‚îÇ   ‚îú‚îÄ‚îÄ Booking Summary\n‚îÇ   ‚îú‚îÄ‚îÄ Terms & Conditions\n‚îÇ   ‚îî‚îÄ‚îÄ Receipt Generation\n‚îú‚îÄ‚îÄ üìÖ Booking Management (/my-bookings-dashboard)\n‚îÇ   ‚îú‚îÄ‚îÄ Active Bookings\n‚îÇ   ‚îú‚îÄ‚îÄ Upcoming Bookings\n‚îÇ   ‚îú‚îÄ‚îÄ Completed Bookings\n‚îÇ   ‚îú‚îÄ‚îÄ Booking Extensions\n‚îÇ   ‚îú‚îÄ‚îÄ Cancellation Management\n‚îÇ   ‚îî‚îÄ‚îÄ QR Code Access\n‚îî‚îÄ‚îÄ üë§ User Profile (/profile)\n    ‚îú‚îÄ‚îÄ Personal Information\n    ‚îú‚îÄ‚îÄ Booking History\n    ‚îú‚îÄ‚îÄ Payment Methods\n    ‚îî‚îÄ‚îÄ Preferences\n```\n\n---\n\n## üîÆ Future Enhancements & Roadmap\n\n### **Planned Technology Upgrades**\n```javascript\nPhase 1 - AI Integration:\n‚îú‚îÄ‚îÄ Machine Learning Predictions\n‚îú‚îÄ‚îÄ Smart Parking Recommendations\n‚îú‚îÄ‚îÄ Dynamic Pricing Optimization\n‚îî‚îÄ‚îÄ User Behavior Analytics\n\nPhase 2 - IoT & Smart City:\n‚îú‚îÄ‚îÄ Smart Sensor Integration\n‚îú‚îÄ‚îÄ Real-time Occupancy Detection\n‚îú‚îÄ‚îÄ Automated Payment Systems\n‚îî‚îÄ‚îÄ Smart City Integration\n\nPhase 3 - Advanced Features:\n‚îú‚îÄ‚îÄ Augmented Reality Navigation\n‚îú‚îÄ‚îÄ Voice-controlled Booking\n‚îú‚îÄ‚îÄ Blockchain-based Payments\n‚îî‚îÄ‚îÄ Carbon Footprint Tracking\n```\n\n### **Scalability Roadmap**\n```\nGeographic Expansion:\n‚îú‚îÄ‚îÄ Multi-city Support (Delhi, Mumbai, Chennai)\n‚îú‚îÄ‚îÄ International Market Entry\n‚îú‚îÄ‚îÄ Regional Language Support\n‚îî‚îÄ‚îÄ Currency Localization\n\nPlatform Integration:\n‚îú‚îÄ‚îÄ Third-party Service APIs\n‚îú‚îÄ‚îÄ Government System Integration\n‚îú‚îÄ‚îÄ Smart City Platform Connectivity\n‚îî‚îÄ‚îÄ Transportation Network Integration\n```\n\n---\n\n## üìä Business Model & Impact\n\n### **Revenue Streams**\n```javascript\nBusiness Model:\n‚îú‚îÄ‚îÄ Transaction-based Commission (5-10% per booking)\n‚îú‚îÄ‚îÄ Premium Subscription Features\n‚îú‚îÄ‚îÄ Corporate Partnership Programs\n‚îú‚îÄ‚îÄ Data Analytics Services\n‚îú‚îÄ‚îÄ Advertising & Promotional Features\n‚îî‚îÄ‚îÄ White-label Solutions\n```\n\n### **Social & Environmental Impact**\n```\nüåç Environmental Benefits:\n‚îú‚îÄ‚îÄ Reduced Carbon Emissions (30% less search time)\n‚îú‚îÄ‚îÄ Decreased Traffic Congestion\n‚îú‚îÄ‚îÄ Optimized Urban Space Utilization\n‚îî‚îÄ‚îÄ Sustainable Mobility Solutions\n\nüèôÔ∏è Urban Development Impact:\n‚îú‚îÄ‚îÄ Smart City Infrastructure Support\n‚îú‚îÄ‚îÄ Data-driven Urban Planning\n‚îú‚îÄ‚îÄ Improved Quality of Life\n‚îî‚îÄ‚îÄ Economic Growth Facilitation\n```\n\n---\n\n## üíª Technical Specifications & Requirements\n\n### **System Requirements**\n```javascript\nBrowser Compatibility:\n‚îú‚îÄ‚îÄ Chrome 90+ (Primary Support)\n‚îú‚îÄ‚îÄ Firefox 88+ (Full Support)\n‚îú‚îÄ‚îÄ Safari 14+ (WebKit Optimized)\n‚îú‚îÄ‚îÄ Edge 90+ (Chromium-based)\n‚îî‚îÄ‚îÄ Mobile Browsers (iOS Safari, Chrome Mobile)\n\nDevice Support:\n‚îú‚îÄ‚îÄ Desktop (1920x1080 and above)\n‚îú‚îÄ‚îÄ Laptop (1366x768 and above)\n‚îú‚îÄ‚îÄ Tablet (768x1024 and above)\n‚îú‚îÄ‚îÄ Mobile (375x667 and above)\n‚îî‚îÄ‚îÄ Progressive Web App Support\n```\n\n### **Development Environment**\n```javascript\nReplit Cloud Platform:\n‚îú‚îÄ‚îÄ Cloud-based Development Environment\n‚îú‚îÄ‚îÄ Integrated Code Editor\n‚îú‚îÄ‚îÄ Hot Reload Development Server\n‚îú‚îÄ‚îÄ Automatic Dependency Management\n‚îú‚îÄ‚îÄ Built-in Version Control\n‚îú‚îÄ‚îÄ One-click Deployment\n‚îú‚îÄ‚îÄ Collaborative Development\n‚îî‚îÄ‚îÄ Real-time Preview\n```\n\n---\n\n## üéØ Project Success Metrics & KPIs\n\n### **Technical Success Metrics**\n```\nPerformance KPIs:\n‚îú‚îÄ‚îÄ Page Load Time: < 2 seconds\n‚îú‚îÄ‚îÄ API Response Time: < 500ms\n‚îú‚îÄ‚îÄ Uptime: 99.9% availability\n‚îú‚îÄ‚îÄ Error Rate: < 0.1%\n‚îú‚îÄ‚îÄ User Retention: > 80%\n‚îî‚îÄ‚îÄ Conversion Rate: > 15%\n\nUser Experience Metrics:\n‚îú‚îÄ‚îÄ User Satisfaction Score: > 4.5/5\n‚îú‚îÄ‚îÄ Task Completion Rate: > 95%\n‚îú‚îÄ‚îÄ User Engagement: > 10 minutes session\n‚îú‚îÄ‚îÄ Feature Adoption: > 70%\n‚îî‚îÄ‚îÄ Support Ticket Volume: < 2%\n```\n\n### **Business Impact Metrics**\n```\nMarket Success:\n‚îú‚îÄ‚îÄ User Acquisition Rate\n‚îú‚îÄ‚îÄ Monthly Active Users (MAU)\n‚îú‚îÄ‚îÄ Revenue Growth Rate\n‚îú‚îÄ‚îÄ Market Penetration\n‚îú‚îÄ‚îÄ Customer Lifetime Value\n‚îî‚îÄ‚îÄ Parking Space Utilization Rate\n```\n\n---\n\n## üõ°Ô∏è Quality Assurance & Testing Methods\n\n### **Testing Strategy**\n```javascript\nTesting Pyramid:\n‚îú‚îÄ‚îÄ Unit Testing (Jest + React Testing Library)\n‚îÇ   ‚îú‚îÄ‚îÄ Component functionality testing\n‚îÇ   ‚îú‚îÄ‚îÄ Utility function testing\n‚îÇ   ‚îú‚îÄ‚îÄ State management testing\n‚îÇ   ‚îî‚îÄ‚îÄ API integration testing\n‚îú‚îÄ‚îÄ Integration Testing\n‚îÇ   ‚îú‚îÄ‚îÄ Component interaction testing\n‚îÇ   ‚îú‚îÄ‚îÄ API integration testing\n‚îÇ   ‚îú‚îÄ‚îÄ User flow testing\n‚îÇ   ‚îî‚îÄ‚îÄ Cross-browser testing\n‚îú‚îÄ‚îÄ End-to-End Testing (Cypress)\n‚îÇ   ‚îú‚îÄ‚îÄ Complete user journey testing\n‚îÇ   ‚îú‚îÄ‚îÄ Payment flow testing\n‚îÇ   ‚îú‚îÄ‚îÄ Booking process testing\n‚îÇ   ‚îî‚îÄ‚îÄ Mobile responsiveness testing\n‚îî‚îÄ‚îÄ Performance Testing\n    ‚îú‚îÄ‚îÄ Load testing\n    ‚îú‚îÄ‚îÄ Stress testing\n    ‚îú‚îÄ‚îÄ Performance profiling\n    ‚îî‚îÄ‚îÄ Memory leak detection\n```\n\n---\n\n## üìö Documentation & Knowledge Base\n\n### **Technical Documentation**\n- **API Documentation** - Comprehensive API reference\n- **Component Library** - Reusable component documentation\n- **Development Guide** - Setup and development instructions\n- **Deployment Guide** - Production deployment procedures\n- **Troubleshooting Guide** - Common issues and solutions\n\n### **User Documentation**\n- **User Manual** - Complete application usage guide\n- **FAQ Section** - Frequently asked questions\n- **Video Tutorials** - Step-by-step usage videos\n- **Support Documentation** - Help and support resources\n\n---\n\n## üåü Innovation & Differentiation\n\n### **Unique Selling Propositions**\n```\nüöÄ Innovation Highlights:\n‚îú‚îÄ‚îÄ Real-time Slot Visualization\n‚îú‚îÄ‚îÄ Predictive Parking Analytics\n‚îú‚îÄ‚îÄ Seamless Multi-platform Experience\n‚îú‚îÄ‚îÄ Comprehensive Booking Management\n‚îú‚îÄ‚îÄ Smart City Integration Ready\n‚îú‚îÄ‚îÄ Sustainable Parking Solutions\n‚îî‚îÄ‚îÄ User-centric Design Excellence\n```\n\n### **Competitive Advantages**\n- **First-mover Advantage** in smart parking solutions\n- **Comprehensive Feature Set** covering entire parking lifecycle\n- **Scalable Architecture** ready for rapid expansion\n- **Strong Technical Foundation** with modern technologies\n- **User Experience Excellence** with intuitive design\n- **Partnership Opportunities** with various stakeholders\n\n---\n\n## üìû Project Contact & Resources\n\n### **Development Information**\n```\nProject Details:\n‚îú‚îÄ‚îÄ Platform: Replit Cloud Development\n‚îú‚îÄ‚îÄ Repository: ParkSlot Pro Workspace\n‚îú‚îÄ‚îÄ Technology: React 18 + Vite + TailwindCSS\n‚îú‚îÄ‚îÄ State Management: Redux Toolkit\n‚îú‚îÄ‚îÄ Deployment: Replit Autoscale\n‚îî‚îÄ‚îÄ Development Method: Agile/Iterative\n```\n\n### **Key Resources**\n- **Live Demo**: Available on Replit platform\n- **Source Code**: Accessible in Replit workspace\n- **Documentation**: Comprehensive project documentation\n- **Support**: Technical support and maintenance\n\n---\n\n## üéØ Conclusion\n\n### **Project Achievement Summary**\nParkSlot Pro represents a **comprehensive, innovative solution** to urban parking challenges, combining cutting-edge web technologies with user-centric design principles to create an efficient, scalable, and sustainable parking management platform.\n\n### **Key Accomplishments**\n```\n‚úÖ Full-featured Smart Parking Platform\n‚úÖ Modern React 18 + Vite Implementation\n‚úÖ Responsive Mobile-first Design\n‚úÖ Comprehensive Booking Management\n‚úÖ Real-time Data Synchronization\n‚úÖ Secure Payment Integration\n‚úÖ Advanced State Management\n‚úÖ Performance Optimized Architecture\n‚úÖ Scalable Component Structure\n‚úÖ Production-ready Deployment\n```\n\n### **Impact & Vision**\nParkSlot Pro is positioned to **revolutionize urban mobility** by making parking simple, smart, and sustainable. The platform's robust architecture, modern technology stack, and user-focused design create a foundation for **transforming how cities manage parking resources** and how users interact with urban infrastructure.\n\n---\n\n**üöó ParkSlot Pro - Making Urban Parking Simple, Smart, and Sustainable üåü**\n\n*Transforming Urban Mobility Through Intelligent Technology Solutions*\n\n---\n\n### **Final Note**\nThis comprehensive presentation showcases ParkSlot Pro as a **complete, production-ready smart parking management system** that demonstrates excellence in modern web development, user experience design, and innovative problem-solving approaches to urban challenges.\n\nThe project serves as a testament to the power of modern web technologies in creating meaningful, impactful solutions that address real-world problems while providing exceptional user experiences and business value.\n","size_bytes":21844}},"version":1}